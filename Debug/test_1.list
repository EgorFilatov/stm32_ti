
test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053cc  080053cc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080053cc  080053cc  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053cc  080053cc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080053d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000006c  08005440  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  08005440  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092ed  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1b  00000000  00000000  00029381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002b7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dc48  00000000  00000000  0002c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd6b  00000000  00000000  00039d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00048de5  00000000  00000000  00045a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e860  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  0008e8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005284 	.word	0x08005284

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08005284 	.word	0x08005284

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f95d 	bl	80016c4 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 f8ad 	bl	8001574 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f94f 	bl	80016c4 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f945 	bl	80016c4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f8d5 	bl	80015f8 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f8cb 	bl	80015f8 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f9b7 	bl	80007ec <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f943 	bl	8000714 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f9a9 	bl	80007ec <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f99f 	bl	80007ec <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f94f 	bl	8000760 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f945 	bl	8000760 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_fdiv>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	464f      	mov	r7, r9
 80004e8:	4646      	mov	r6, r8
 80004ea:	46d6      	mov	lr, sl
 80004ec:	0245      	lsls	r5, r0, #9
 80004ee:	b5c0      	push	{r6, r7, lr}
 80004f0:	0047      	lsls	r7, r0, #1
 80004f2:	1c0c      	adds	r4, r1, #0
 80004f4:	0a6d      	lsrs	r5, r5, #9
 80004f6:	0e3f      	lsrs	r7, r7, #24
 80004f8:	0fc6      	lsrs	r6, r0, #31
 80004fa:	2f00      	cmp	r7, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_fdiv+0x1c>
 80004fe:	e070      	b.n	80005e2 <__aeabi_fdiv+0xfe>
 8000500:	2fff      	cmp	r7, #255	; 0xff
 8000502:	d100      	bne.n	8000506 <__aeabi_fdiv+0x22>
 8000504:	e075      	b.n	80005f2 <__aeabi_fdiv+0x10e>
 8000506:	00eb      	lsls	r3, r5, #3
 8000508:	2580      	movs	r5, #128	; 0x80
 800050a:	04ed      	lsls	r5, r5, #19
 800050c:	431d      	orrs	r5, r3
 800050e:	2300      	movs	r3, #0
 8000510:	4699      	mov	r9, r3
 8000512:	469a      	mov	sl, r3
 8000514:	3f7f      	subs	r7, #127	; 0x7f
 8000516:	0260      	lsls	r0, r4, #9
 8000518:	0a43      	lsrs	r3, r0, #9
 800051a:	4698      	mov	r8, r3
 800051c:	0063      	lsls	r3, r4, #1
 800051e:	0e1b      	lsrs	r3, r3, #24
 8000520:	0fe4      	lsrs	r4, r4, #31
 8000522:	2b00      	cmp	r3, #0
 8000524:	d04e      	beq.n	80005c4 <__aeabi_fdiv+0xe0>
 8000526:	2bff      	cmp	r3, #255	; 0xff
 8000528:	d046      	beq.n	80005b8 <__aeabi_fdiv+0xd4>
 800052a:	4642      	mov	r2, r8
 800052c:	00d0      	lsls	r0, r2, #3
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	04d2      	lsls	r2, r2, #19
 8000532:	4302      	orrs	r2, r0
 8000534:	4690      	mov	r8, r2
 8000536:	2200      	movs	r2, #0
 8000538:	3b7f      	subs	r3, #127	; 0x7f
 800053a:	0031      	movs	r1, r6
 800053c:	1aff      	subs	r7, r7, r3
 800053e:	464b      	mov	r3, r9
 8000540:	4061      	eors	r1, r4
 8000542:	b2c9      	uxtb	r1, r1
 8000544:	4313      	orrs	r3, r2
 8000546:	2b0f      	cmp	r3, #15
 8000548:	d900      	bls.n	800054c <__aeabi_fdiv+0x68>
 800054a:	e0b5      	b.n	80006b8 <__aeabi_fdiv+0x1d4>
 800054c:	486e      	ldr	r0, [pc, #440]	; (8000708 <__aeabi_fdiv+0x224>)
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	58c3      	ldr	r3, [r0, r3]
 8000552:	469f      	mov	pc, r3
 8000554:	2300      	movs	r3, #0
 8000556:	4698      	mov	r8, r3
 8000558:	0026      	movs	r6, r4
 800055a:	4645      	mov	r5, r8
 800055c:	4692      	mov	sl, r2
 800055e:	4653      	mov	r3, sl
 8000560:	2b02      	cmp	r3, #2
 8000562:	d100      	bne.n	8000566 <__aeabi_fdiv+0x82>
 8000564:	e089      	b.n	800067a <__aeabi_fdiv+0x196>
 8000566:	2b03      	cmp	r3, #3
 8000568:	d100      	bne.n	800056c <__aeabi_fdiv+0x88>
 800056a:	e09e      	b.n	80006aa <__aeabi_fdiv+0x1c6>
 800056c:	2b01      	cmp	r3, #1
 800056e:	d018      	beq.n	80005a2 <__aeabi_fdiv+0xbe>
 8000570:	003b      	movs	r3, r7
 8000572:	337f      	adds	r3, #127	; 0x7f
 8000574:	2b00      	cmp	r3, #0
 8000576:	dd69      	ble.n	800064c <__aeabi_fdiv+0x168>
 8000578:	076a      	lsls	r2, r5, #29
 800057a:	d004      	beq.n	8000586 <__aeabi_fdiv+0xa2>
 800057c:	220f      	movs	r2, #15
 800057e:	402a      	ands	r2, r5
 8000580:	2a04      	cmp	r2, #4
 8000582:	d000      	beq.n	8000586 <__aeabi_fdiv+0xa2>
 8000584:	3504      	adds	r5, #4
 8000586:	012a      	lsls	r2, r5, #4
 8000588:	d503      	bpl.n	8000592 <__aeabi_fdiv+0xae>
 800058a:	4b60      	ldr	r3, [pc, #384]	; (800070c <__aeabi_fdiv+0x228>)
 800058c:	401d      	ands	r5, r3
 800058e:	003b      	movs	r3, r7
 8000590:	3380      	adds	r3, #128	; 0x80
 8000592:	2bfe      	cmp	r3, #254	; 0xfe
 8000594:	dd00      	ble.n	8000598 <__aeabi_fdiv+0xb4>
 8000596:	e070      	b.n	800067a <__aeabi_fdiv+0x196>
 8000598:	01ad      	lsls	r5, r5, #6
 800059a:	0a6d      	lsrs	r5, r5, #9
 800059c:	b2d8      	uxtb	r0, r3
 800059e:	e002      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 80005a0:	000e      	movs	r6, r1
 80005a2:	2000      	movs	r0, #0
 80005a4:	2500      	movs	r5, #0
 80005a6:	05c0      	lsls	r0, r0, #23
 80005a8:	4328      	orrs	r0, r5
 80005aa:	07f6      	lsls	r6, r6, #31
 80005ac:	4330      	orrs	r0, r6
 80005ae:	bce0      	pop	{r5, r6, r7}
 80005b0:	46ba      	mov	sl, r7
 80005b2:	46b1      	mov	r9, r6
 80005b4:	46a8      	mov	r8, r5
 80005b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b8:	4643      	mov	r3, r8
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d13f      	bne.n	800063e <__aeabi_fdiv+0x15a>
 80005be:	2202      	movs	r2, #2
 80005c0:	3fff      	subs	r7, #255	; 0xff
 80005c2:	e003      	b.n	80005cc <__aeabi_fdiv+0xe8>
 80005c4:	4643      	mov	r3, r8
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d12d      	bne.n	8000626 <__aeabi_fdiv+0x142>
 80005ca:	2201      	movs	r2, #1
 80005cc:	0031      	movs	r1, r6
 80005ce:	464b      	mov	r3, r9
 80005d0:	4061      	eors	r1, r4
 80005d2:	b2c9      	uxtb	r1, r1
 80005d4:	4313      	orrs	r3, r2
 80005d6:	2b0f      	cmp	r3, #15
 80005d8:	d834      	bhi.n	8000644 <__aeabi_fdiv+0x160>
 80005da:	484d      	ldr	r0, [pc, #308]	; (8000710 <__aeabi_fdiv+0x22c>)
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	58c3      	ldr	r3, [r0, r3]
 80005e0:	469f      	mov	pc, r3
 80005e2:	2d00      	cmp	r5, #0
 80005e4:	d113      	bne.n	800060e <__aeabi_fdiv+0x12a>
 80005e6:	2304      	movs	r3, #4
 80005e8:	4699      	mov	r9, r3
 80005ea:	3b03      	subs	r3, #3
 80005ec:	2700      	movs	r7, #0
 80005ee:	469a      	mov	sl, r3
 80005f0:	e791      	b.n	8000516 <__aeabi_fdiv+0x32>
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d105      	bne.n	8000602 <__aeabi_fdiv+0x11e>
 80005f6:	2308      	movs	r3, #8
 80005f8:	4699      	mov	r9, r3
 80005fa:	3b06      	subs	r3, #6
 80005fc:	27ff      	movs	r7, #255	; 0xff
 80005fe:	469a      	mov	sl, r3
 8000600:	e789      	b.n	8000516 <__aeabi_fdiv+0x32>
 8000602:	230c      	movs	r3, #12
 8000604:	4699      	mov	r9, r3
 8000606:	3b09      	subs	r3, #9
 8000608:	27ff      	movs	r7, #255	; 0xff
 800060a:	469a      	mov	sl, r3
 800060c:	e783      	b.n	8000516 <__aeabi_fdiv+0x32>
 800060e:	0028      	movs	r0, r5
 8000610:	f001 ffb6 	bl	8002580 <__clzsi2>
 8000614:	2776      	movs	r7, #118	; 0x76
 8000616:	1f43      	subs	r3, r0, #5
 8000618:	409d      	lsls	r5, r3
 800061a:	2300      	movs	r3, #0
 800061c:	427f      	negs	r7, r7
 800061e:	4699      	mov	r9, r3
 8000620:	469a      	mov	sl, r3
 8000622:	1a3f      	subs	r7, r7, r0
 8000624:	e777      	b.n	8000516 <__aeabi_fdiv+0x32>
 8000626:	4640      	mov	r0, r8
 8000628:	f001 ffaa 	bl	8002580 <__clzsi2>
 800062c:	4642      	mov	r2, r8
 800062e:	1f43      	subs	r3, r0, #5
 8000630:	409a      	lsls	r2, r3
 8000632:	2376      	movs	r3, #118	; 0x76
 8000634:	425b      	negs	r3, r3
 8000636:	4690      	mov	r8, r2
 8000638:	1a1b      	subs	r3, r3, r0
 800063a:	2200      	movs	r2, #0
 800063c:	e77d      	b.n	800053a <__aeabi_fdiv+0x56>
 800063e:	23ff      	movs	r3, #255	; 0xff
 8000640:	2203      	movs	r2, #3
 8000642:	e77a      	b.n	800053a <__aeabi_fdiv+0x56>
 8000644:	000e      	movs	r6, r1
 8000646:	20ff      	movs	r0, #255	; 0xff
 8000648:	2500      	movs	r5, #0
 800064a:	e7ac      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 800064c:	2001      	movs	r0, #1
 800064e:	1ac0      	subs	r0, r0, r3
 8000650:	281b      	cmp	r0, #27
 8000652:	dca6      	bgt.n	80005a2 <__aeabi_fdiv+0xbe>
 8000654:	379e      	adds	r7, #158	; 0x9e
 8000656:	002a      	movs	r2, r5
 8000658:	40bd      	lsls	r5, r7
 800065a:	40c2      	lsrs	r2, r0
 800065c:	1e6b      	subs	r3, r5, #1
 800065e:	419d      	sbcs	r5, r3
 8000660:	4315      	orrs	r5, r2
 8000662:	076b      	lsls	r3, r5, #29
 8000664:	d004      	beq.n	8000670 <__aeabi_fdiv+0x18c>
 8000666:	230f      	movs	r3, #15
 8000668:	402b      	ands	r3, r5
 800066a:	2b04      	cmp	r3, #4
 800066c:	d000      	beq.n	8000670 <__aeabi_fdiv+0x18c>
 800066e:	3504      	adds	r5, #4
 8000670:	016b      	lsls	r3, r5, #5
 8000672:	d544      	bpl.n	80006fe <__aeabi_fdiv+0x21a>
 8000674:	2001      	movs	r0, #1
 8000676:	2500      	movs	r5, #0
 8000678:	e795      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 800067a:	20ff      	movs	r0, #255	; 0xff
 800067c:	2500      	movs	r5, #0
 800067e:	e792      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 8000680:	2580      	movs	r5, #128	; 0x80
 8000682:	2600      	movs	r6, #0
 8000684:	20ff      	movs	r0, #255	; 0xff
 8000686:	03ed      	lsls	r5, r5, #15
 8000688:	e78d      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 800068a:	2300      	movs	r3, #0
 800068c:	4698      	mov	r8, r3
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	03c0      	lsls	r0, r0, #15
 8000692:	4205      	tst	r5, r0
 8000694:	d009      	beq.n	80006aa <__aeabi_fdiv+0x1c6>
 8000696:	4643      	mov	r3, r8
 8000698:	4203      	tst	r3, r0
 800069a:	d106      	bne.n	80006aa <__aeabi_fdiv+0x1c6>
 800069c:	4645      	mov	r5, r8
 800069e:	4305      	orrs	r5, r0
 80006a0:	026d      	lsls	r5, r5, #9
 80006a2:	0026      	movs	r6, r4
 80006a4:	20ff      	movs	r0, #255	; 0xff
 80006a6:	0a6d      	lsrs	r5, r5, #9
 80006a8:	e77d      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 80006aa:	2080      	movs	r0, #128	; 0x80
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4305      	orrs	r5, r0
 80006b0:	026d      	lsls	r5, r5, #9
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a6d      	lsrs	r5, r5, #9
 80006b6:	e776      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 80006b8:	4642      	mov	r2, r8
 80006ba:	016b      	lsls	r3, r5, #5
 80006bc:	0150      	lsls	r0, r2, #5
 80006be:	4283      	cmp	r3, r0
 80006c0:	d219      	bcs.n	80006f6 <__aeabi_fdiv+0x212>
 80006c2:	221b      	movs	r2, #27
 80006c4:	2500      	movs	r5, #0
 80006c6:	3f01      	subs	r7, #1
 80006c8:	2601      	movs	r6, #1
 80006ca:	001c      	movs	r4, r3
 80006cc:	006d      	lsls	r5, r5, #1
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	2c00      	cmp	r4, #0
 80006d2:	db01      	blt.n	80006d8 <__aeabi_fdiv+0x1f4>
 80006d4:	4298      	cmp	r0, r3
 80006d6:	d801      	bhi.n	80006dc <__aeabi_fdiv+0x1f8>
 80006d8:	1a1b      	subs	r3, r3, r0
 80006da:	4335      	orrs	r5, r6
 80006dc:	3a01      	subs	r2, #1
 80006de:	2a00      	cmp	r2, #0
 80006e0:	d1f3      	bne.n	80006ca <__aeabi_fdiv+0x1e6>
 80006e2:	1e5a      	subs	r2, r3, #1
 80006e4:	4193      	sbcs	r3, r2
 80006e6:	431d      	orrs	r5, r3
 80006e8:	003b      	movs	r3, r7
 80006ea:	337f      	adds	r3, #127	; 0x7f
 80006ec:	000e      	movs	r6, r1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_fdiv+0x210>
 80006f2:	e741      	b.n	8000578 <__aeabi_fdiv+0x94>
 80006f4:	e7aa      	b.n	800064c <__aeabi_fdiv+0x168>
 80006f6:	221a      	movs	r2, #26
 80006f8:	2501      	movs	r5, #1
 80006fa:	1a1b      	subs	r3, r3, r0
 80006fc:	e7e4      	b.n	80006c8 <__aeabi_fdiv+0x1e4>
 80006fe:	01ad      	lsls	r5, r5, #6
 8000700:	2000      	movs	r0, #0
 8000702:	0a6d      	lsrs	r5, r5, #9
 8000704:	e74f      	b.n	80005a6 <__aeabi_fdiv+0xc2>
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	080052bc 	.word	0x080052bc
 800070c:	f7ffffff 	.word	0xf7ffffff
 8000710:	080052fc 	.word	0x080052fc

08000714 <__eqsf2>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	0042      	lsls	r2, r0, #1
 8000718:	0245      	lsls	r5, r0, #9
 800071a:	024e      	lsls	r6, r1, #9
 800071c:	004c      	lsls	r4, r1, #1
 800071e:	0fc3      	lsrs	r3, r0, #31
 8000720:	0a6d      	lsrs	r5, r5, #9
 8000722:	2001      	movs	r0, #1
 8000724:	0e12      	lsrs	r2, r2, #24
 8000726:	0a76      	lsrs	r6, r6, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc9      	lsrs	r1, r1, #31
 800072c:	2aff      	cmp	r2, #255	; 0xff
 800072e:	d006      	beq.n	800073e <__eqsf2+0x2a>
 8000730:	2cff      	cmp	r4, #255	; 0xff
 8000732:	d003      	beq.n	800073c <__eqsf2+0x28>
 8000734:	42a2      	cmp	r2, r4
 8000736:	d101      	bne.n	800073c <__eqsf2+0x28>
 8000738:	42b5      	cmp	r5, r6
 800073a:	d006      	beq.n	800074a <__eqsf2+0x36>
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	2d00      	cmp	r5, #0
 8000740:	d1fc      	bne.n	800073c <__eqsf2+0x28>
 8000742:	2cff      	cmp	r4, #255	; 0xff
 8000744:	d1fa      	bne.n	800073c <__eqsf2+0x28>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d1f8      	bne.n	800073c <__eqsf2+0x28>
 800074a:	428b      	cmp	r3, r1
 800074c:	d006      	beq.n	800075c <__eqsf2+0x48>
 800074e:	2001      	movs	r0, #1
 8000750:	2a00      	cmp	r2, #0
 8000752:	d1f3      	bne.n	800073c <__eqsf2+0x28>
 8000754:	0028      	movs	r0, r5
 8000756:	1e43      	subs	r3, r0, #1
 8000758:	4198      	sbcs	r0, r3
 800075a:	e7ef      	b.n	800073c <__eqsf2+0x28>
 800075c:	2000      	movs	r0, #0
 800075e:	e7ed      	b.n	800073c <__eqsf2+0x28>

08000760 <__gesf2>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	0042      	lsls	r2, r0, #1
 8000764:	0245      	lsls	r5, r0, #9
 8000766:	024e      	lsls	r6, r1, #9
 8000768:	004c      	lsls	r4, r1, #1
 800076a:	0fc3      	lsrs	r3, r0, #31
 800076c:	0a6d      	lsrs	r5, r5, #9
 800076e:	0e12      	lsrs	r2, r2, #24
 8000770:	0a76      	lsrs	r6, r6, #9
 8000772:	0e24      	lsrs	r4, r4, #24
 8000774:	0fc8      	lsrs	r0, r1, #31
 8000776:	2aff      	cmp	r2, #255	; 0xff
 8000778:	d01b      	beq.n	80007b2 <__gesf2+0x52>
 800077a:	2cff      	cmp	r4, #255	; 0xff
 800077c:	d00e      	beq.n	800079c <__gesf2+0x3c>
 800077e:	2a00      	cmp	r2, #0
 8000780:	d11b      	bne.n	80007ba <__gesf2+0x5a>
 8000782:	2c00      	cmp	r4, #0
 8000784:	d101      	bne.n	800078a <__gesf2+0x2a>
 8000786:	2e00      	cmp	r6, #0
 8000788:	d01c      	beq.n	80007c4 <__gesf2+0x64>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d00c      	beq.n	80007a8 <__gesf2+0x48>
 800078e:	4283      	cmp	r3, r0
 8000790:	d01c      	beq.n	80007cc <__gesf2+0x6c>
 8000792:	2102      	movs	r1, #2
 8000794:	1e58      	subs	r0, r3, #1
 8000796:	4008      	ands	r0, r1
 8000798:	3801      	subs	r0, #1
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	2e00      	cmp	r6, #0
 800079e:	d122      	bne.n	80007e6 <__gesf2+0x86>
 80007a0:	2a00      	cmp	r2, #0
 80007a2:	d1f4      	bne.n	800078e <__gesf2+0x2e>
 80007a4:	2d00      	cmp	r5, #0
 80007a6:	d1f2      	bne.n	800078e <__gesf2+0x2e>
 80007a8:	2800      	cmp	r0, #0
 80007aa:	d1f6      	bne.n	800079a <__gesf2+0x3a>
 80007ac:	2001      	movs	r0, #1
 80007ae:	4240      	negs	r0, r0
 80007b0:	e7f3      	b.n	800079a <__gesf2+0x3a>
 80007b2:	2d00      	cmp	r5, #0
 80007b4:	d117      	bne.n	80007e6 <__gesf2+0x86>
 80007b6:	2cff      	cmp	r4, #255	; 0xff
 80007b8:	d0f0      	beq.n	800079c <__gesf2+0x3c>
 80007ba:	2c00      	cmp	r4, #0
 80007bc:	d1e7      	bne.n	800078e <__gesf2+0x2e>
 80007be:	2e00      	cmp	r6, #0
 80007c0:	d1e5      	bne.n	800078e <__gesf2+0x2e>
 80007c2:	e7e6      	b.n	8000792 <__gesf2+0x32>
 80007c4:	2000      	movs	r0, #0
 80007c6:	2d00      	cmp	r5, #0
 80007c8:	d0e7      	beq.n	800079a <__gesf2+0x3a>
 80007ca:	e7e2      	b.n	8000792 <__gesf2+0x32>
 80007cc:	42a2      	cmp	r2, r4
 80007ce:	dc05      	bgt.n	80007dc <__gesf2+0x7c>
 80007d0:	dbea      	blt.n	80007a8 <__gesf2+0x48>
 80007d2:	42b5      	cmp	r5, r6
 80007d4:	d802      	bhi.n	80007dc <__gesf2+0x7c>
 80007d6:	d3e7      	bcc.n	80007a8 <__gesf2+0x48>
 80007d8:	2000      	movs	r0, #0
 80007da:	e7de      	b.n	800079a <__gesf2+0x3a>
 80007dc:	4243      	negs	r3, r0
 80007de:	4158      	adcs	r0, r3
 80007e0:	0040      	lsls	r0, r0, #1
 80007e2:	3801      	subs	r0, #1
 80007e4:	e7d9      	b.n	800079a <__gesf2+0x3a>
 80007e6:	2002      	movs	r0, #2
 80007e8:	4240      	negs	r0, r0
 80007ea:	e7d6      	b.n	800079a <__gesf2+0x3a>

080007ec <__lesf2>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	0042      	lsls	r2, r0, #1
 80007f0:	0245      	lsls	r5, r0, #9
 80007f2:	024e      	lsls	r6, r1, #9
 80007f4:	004c      	lsls	r4, r1, #1
 80007f6:	0fc3      	lsrs	r3, r0, #31
 80007f8:	0a6d      	lsrs	r5, r5, #9
 80007fa:	0e12      	lsrs	r2, r2, #24
 80007fc:	0a76      	lsrs	r6, r6, #9
 80007fe:	0e24      	lsrs	r4, r4, #24
 8000800:	0fc8      	lsrs	r0, r1, #31
 8000802:	2aff      	cmp	r2, #255	; 0xff
 8000804:	d00b      	beq.n	800081e <__lesf2+0x32>
 8000806:	2cff      	cmp	r4, #255	; 0xff
 8000808:	d00d      	beq.n	8000826 <__lesf2+0x3a>
 800080a:	2a00      	cmp	r2, #0
 800080c:	d11f      	bne.n	800084e <__lesf2+0x62>
 800080e:	2c00      	cmp	r4, #0
 8000810:	d116      	bne.n	8000840 <__lesf2+0x54>
 8000812:	2e00      	cmp	r6, #0
 8000814:	d114      	bne.n	8000840 <__lesf2+0x54>
 8000816:	2000      	movs	r0, #0
 8000818:	2d00      	cmp	r5, #0
 800081a:	d010      	beq.n	800083e <__lesf2+0x52>
 800081c:	e009      	b.n	8000832 <__lesf2+0x46>
 800081e:	2d00      	cmp	r5, #0
 8000820:	d10c      	bne.n	800083c <__lesf2+0x50>
 8000822:	2cff      	cmp	r4, #255	; 0xff
 8000824:	d113      	bne.n	800084e <__lesf2+0x62>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d108      	bne.n	800083c <__lesf2+0x50>
 800082a:	2a00      	cmp	r2, #0
 800082c:	d008      	beq.n	8000840 <__lesf2+0x54>
 800082e:	4283      	cmp	r3, r0
 8000830:	d012      	beq.n	8000858 <__lesf2+0x6c>
 8000832:	2102      	movs	r1, #2
 8000834:	1e58      	subs	r0, r3, #1
 8000836:	4008      	ands	r0, r1
 8000838:	3801      	subs	r0, #1
 800083a:	e000      	b.n	800083e <__lesf2+0x52>
 800083c:	2002      	movs	r0, #2
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1f4      	bne.n	800082e <__lesf2+0x42>
 8000844:	2800      	cmp	r0, #0
 8000846:	d1fa      	bne.n	800083e <__lesf2+0x52>
 8000848:	2001      	movs	r0, #1
 800084a:	4240      	negs	r0, r0
 800084c:	e7f7      	b.n	800083e <__lesf2+0x52>
 800084e:	2c00      	cmp	r4, #0
 8000850:	d1ed      	bne.n	800082e <__lesf2+0x42>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d1eb      	bne.n	800082e <__lesf2+0x42>
 8000856:	e7ec      	b.n	8000832 <__lesf2+0x46>
 8000858:	42a2      	cmp	r2, r4
 800085a:	dc05      	bgt.n	8000868 <__lesf2+0x7c>
 800085c:	dbf2      	blt.n	8000844 <__lesf2+0x58>
 800085e:	42b5      	cmp	r5, r6
 8000860:	d802      	bhi.n	8000868 <__lesf2+0x7c>
 8000862:	d3ef      	bcc.n	8000844 <__lesf2+0x58>
 8000864:	2000      	movs	r0, #0
 8000866:	e7ea      	b.n	800083e <__lesf2+0x52>
 8000868:	4243      	negs	r3, r0
 800086a:	4158      	adcs	r0, r3
 800086c:	0040      	lsls	r0, r0, #1
 800086e:	3801      	subs	r0, #1
 8000870:	e7e5      	b.n	800083e <__lesf2+0x52>
 8000872:	46c0      	nop			; (mov r8, r8)

08000874 <__aeabi_i2f>:
 8000874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000876:	2800      	cmp	r0, #0
 8000878:	d013      	beq.n	80008a2 <__aeabi_i2f+0x2e>
 800087a:	17c3      	asrs	r3, r0, #31
 800087c:	18c6      	adds	r6, r0, r3
 800087e:	405e      	eors	r6, r3
 8000880:	0fc4      	lsrs	r4, r0, #31
 8000882:	0030      	movs	r0, r6
 8000884:	f001 fe7c 	bl	8002580 <__clzsi2>
 8000888:	239e      	movs	r3, #158	; 0x9e
 800088a:	0005      	movs	r5, r0
 800088c:	1a1b      	subs	r3, r3, r0
 800088e:	2b96      	cmp	r3, #150	; 0x96
 8000890:	dc0f      	bgt.n	80008b2 <__aeabi_i2f+0x3e>
 8000892:	2808      	cmp	r0, #8
 8000894:	dd01      	ble.n	800089a <__aeabi_i2f+0x26>
 8000896:	3d08      	subs	r5, #8
 8000898:	40ae      	lsls	r6, r5
 800089a:	0276      	lsls	r6, r6, #9
 800089c:	0a76      	lsrs	r6, r6, #9
 800089e:	b2d8      	uxtb	r0, r3
 80008a0:	e002      	b.n	80008a8 <__aeabi_i2f+0x34>
 80008a2:	2400      	movs	r4, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	2600      	movs	r6, #0
 80008a8:	05c0      	lsls	r0, r0, #23
 80008aa:	4330      	orrs	r0, r6
 80008ac:	07e4      	lsls	r4, r4, #31
 80008ae:	4320      	orrs	r0, r4
 80008b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b2:	2b99      	cmp	r3, #153	; 0x99
 80008b4:	dd0c      	ble.n	80008d0 <__aeabi_i2f+0x5c>
 80008b6:	2205      	movs	r2, #5
 80008b8:	0031      	movs	r1, r6
 80008ba:	1a12      	subs	r2, r2, r0
 80008bc:	40d1      	lsrs	r1, r2
 80008be:	000a      	movs	r2, r1
 80008c0:	0001      	movs	r1, r0
 80008c2:	0030      	movs	r0, r6
 80008c4:	311b      	adds	r1, #27
 80008c6:	4088      	lsls	r0, r1
 80008c8:	1e41      	subs	r1, r0, #1
 80008ca:	4188      	sbcs	r0, r1
 80008cc:	4302      	orrs	r2, r0
 80008ce:	0016      	movs	r6, r2
 80008d0:	2d05      	cmp	r5, #5
 80008d2:	dc12      	bgt.n	80008fa <__aeabi_i2f+0x86>
 80008d4:	0031      	movs	r1, r6
 80008d6:	4f0d      	ldr	r7, [pc, #52]	; (800090c <__aeabi_i2f+0x98>)
 80008d8:	4039      	ands	r1, r7
 80008da:	0772      	lsls	r2, r6, #29
 80008dc:	d009      	beq.n	80008f2 <__aeabi_i2f+0x7e>
 80008de:	200f      	movs	r0, #15
 80008e0:	4030      	ands	r0, r6
 80008e2:	2804      	cmp	r0, #4
 80008e4:	d005      	beq.n	80008f2 <__aeabi_i2f+0x7e>
 80008e6:	3104      	adds	r1, #4
 80008e8:	014a      	lsls	r2, r1, #5
 80008ea:	d502      	bpl.n	80008f2 <__aeabi_i2f+0x7e>
 80008ec:	239f      	movs	r3, #159	; 0x9f
 80008ee:	4039      	ands	r1, r7
 80008f0:	1b5b      	subs	r3, r3, r5
 80008f2:	0189      	lsls	r1, r1, #6
 80008f4:	0a4e      	lsrs	r6, r1, #9
 80008f6:	b2d8      	uxtb	r0, r3
 80008f8:	e7d6      	b.n	80008a8 <__aeabi_i2f+0x34>
 80008fa:	1f6a      	subs	r2, r5, #5
 80008fc:	4096      	lsls	r6, r2
 80008fe:	0031      	movs	r1, r6
 8000900:	4f02      	ldr	r7, [pc, #8]	; (800090c <__aeabi_i2f+0x98>)
 8000902:	4039      	ands	r1, r7
 8000904:	0772      	lsls	r2, r6, #29
 8000906:	d0f4      	beq.n	80008f2 <__aeabi_i2f+0x7e>
 8000908:	e7e9      	b.n	80008de <__aeabi_i2f+0x6a>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	fbffffff 	.word	0xfbffffff

08000910 <__aeabi_dadd>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	464f      	mov	r7, r9
 8000914:	4646      	mov	r6, r8
 8000916:	46d6      	mov	lr, sl
 8000918:	000d      	movs	r5, r1
 800091a:	0004      	movs	r4, r0
 800091c:	b5c0      	push	{r6, r7, lr}
 800091e:	001f      	movs	r7, r3
 8000920:	0011      	movs	r1, r2
 8000922:	0328      	lsls	r0, r5, #12
 8000924:	0f62      	lsrs	r2, r4, #29
 8000926:	0a40      	lsrs	r0, r0, #9
 8000928:	4310      	orrs	r0, r2
 800092a:	007a      	lsls	r2, r7, #1
 800092c:	0d52      	lsrs	r2, r2, #21
 800092e:	00e3      	lsls	r3, r4, #3
 8000930:	033c      	lsls	r4, r7, #12
 8000932:	4691      	mov	r9, r2
 8000934:	0a64      	lsrs	r4, r4, #9
 8000936:	0ffa      	lsrs	r2, r7, #31
 8000938:	0f4f      	lsrs	r7, r1, #29
 800093a:	006e      	lsls	r6, r5, #1
 800093c:	4327      	orrs	r7, r4
 800093e:	4692      	mov	sl, r2
 8000940:	46b8      	mov	r8, r7
 8000942:	0d76      	lsrs	r6, r6, #21
 8000944:	0fed      	lsrs	r5, r5, #31
 8000946:	00c9      	lsls	r1, r1, #3
 8000948:	4295      	cmp	r5, r2
 800094a:	d100      	bne.n	800094e <__aeabi_dadd+0x3e>
 800094c:	e099      	b.n	8000a82 <__aeabi_dadd+0x172>
 800094e:	464c      	mov	r4, r9
 8000950:	1b34      	subs	r4, r6, r4
 8000952:	46a4      	mov	ip, r4
 8000954:	2c00      	cmp	r4, #0
 8000956:	dc00      	bgt.n	800095a <__aeabi_dadd+0x4a>
 8000958:	e07c      	b.n	8000a54 <__aeabi_dadd+0x144>
 800095a:	464a      	mov	r2, r9
 800095c:	2a00      	cmp	r2, #0
 800095e:	d100      	bne.n	8000962 <__aeabi_dadd+0x52>
 8000960:	e0b8      	b.n	8000ad4 <__aeabi_dadd+0x1c4>
 8000962:	4ac5      	ldr	r2, [pc, #788]	; (8000c78 <__aeabi_dadd+0x368>)
 8000964:	4296      	cmp	r6, r2
 8000966:	d100      	bne.n	800096a <__aeabi_dadd+0x5a>
 8000968:	e11c      	b.n	8000ba4 <__aeabi_dadd+0x294>
 800096a:	2280      	movs	r2, #128	; 0x80
 800096c:	003c      	movs	r4, r7
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	4314      	orrs	r4, r2
 8000972:	46a0      	mov	r8, r4
 8000974:	4662      	mov	r2, ip
 8000976:	2a38      	cmp	r2, #56	; 0x38
 8000978:	dd00      	ble.n	800097c <__aeabi_dadd+0x6c>
 800097a:	e161      	b.n	8000c40 <__aeabi_dadd+0x330>
 800097c:	2a1f      	cmp	r2, #31
 800097e:	dd00      	ble.n	8000982 <__aeabi_dadd+0x72>
 8000980:	e1cc      	b.n	8000d1c <__aeabi_dadd+0x40c>
 8000982:	4664      	mov	r4, ip
 8000984:	2220      	movs	r2, #32
 8000986:	1b12      	subs	r2, r2, r4
 8000988:	4644      	mov	r4, r8
 800098a:	4094      	lsls	r4, r2
 800098c:	000f      	movs	r7, r1
 800098e:	46a1      	mov	r9, r4
 8000990:	4664      	mov	r4, ip
 8000992:	4091      	lsls	r1, r2
 8000994:	40e7      	lsrs	r7, r4
 8000996:	464c      	mov	r4, r9
 8000998:	1e4a      	subs	r2, r1, #1
 800099a:	4191      	sbcs	r1, r2
 800099c:	433c      	orrs	r4, r7
 800099e:	4642      	mov	r2, r8
 80009a0:	4321      	orrs	r1, r4
 80009a2:	4664      	mov	r4, ip
 80009a4:	40e2      	lsrs	r2, r4
 80009a6:	1a80      	subs	r0, r0, r2
 80009a8:	1a5c      	subs	r4, r3, r1
 80009aa:	42a3      	cmp	r3, r4
 80009ac:	419b      	sbcs	r3, r3
 80009ae:	425f      	negs	r7, r3
 80009b0:	1bc7      	subs	r7, r0, r7
 80009b2:	023b      	lsls	r3, r7, #8
 80009b4:	d400      	bmi.n	80009b8 <__aeabi_dadd+0xa8>
 80009b6:	e0d0      	b.n	8000b5a <__aeabi_dadd+0x24a>
 80009b8:	027f      	lsls	r7, r7, #9
 80009ba:	0a7f      	lsrs	r7, r7, #9
 80009bc:	2f00      	cmp	r7, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0xb2>
 80009c0:	e0ff      	b.n	8000bc2 <__aeabi_dadd+0x2b2>
 80009c2:	0038      	movs	r0, r7
 80009c4:	f001 fddc 	bl	8002580 <__clzsi2>
 80009c8:	0001      	movs	r1, r0
 80009ca:	3908      	subs	r1, #8
 80009cc:	2320      	movs	r3, #32
 80009ce:	0022      	movs	r2, r4
 80009d0:	1a5b      	subs	r3, r3, r1
 80009d2:	408f      	lsls	r7, r1
 80009d4:	40da      	lsrs	r2, r3
 80009d6:	408c      	lsls	r4, r1
 80009d8:	4317      	orrs	r7, r2
 80009da:	42b1      	cmp	r1, r6
 80009dc:	da00      	bge.n	80009e0 <__aeabi_dadd+0xd0>
 80009de:	e0ff      	b.n	8000be0 <__aeabi_dadd+0x2d0>
 80009e0:	1b89      	subs	r1, r1, r6
 80009e2:	1c4b      	adds	r3, r1, #1
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dd00      	ble.n	80009ea <__aeabi_dadd+0xda>
 80009e8:	e0a8      	b.n	8000b3c <__aeabi_dadd+0x22c>
 80009ea:	2220      	movs	r2, #32
 80009ec:	0039      	movs	r1, r7
 80009ee:	1ad2      	subs	r2, r2, r3
 80009f0:	0020      	movs	r0, r4
 80009f2:	4094      	lsls	r4, r2
 80009f4:	4091      	lsls	r1, r2
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	1e62      	subs	r2, r4, #1
 80009fa:	4194      	sbcs	r4, r2
 80009fc:	40df      	lsrs	r7, r3
 80009fe:	2600      	movs	r6, #0
 8000a00:	4301      	orrs	r1, r0
 8000a02:	430c      	orrs	r4, r1
 8000a04:	0763      	lsls	r3, r4, #29
 8000a06:	d009      	beq.n	8000a1c <__aeabi_dadd+0x10c>
 8000a08:	230f      	movs	r3, #15
 8000a0a:	4023      	ands	r3, r4
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d005      	beq.n	8000a1c <__aeabi_dadd+0x10c>
 8000a10:	1d23      	adds	r3, r4, #4
 8000a12:	42a3      	cmp	r3, r4
 8000a14:	41a4      	sbcs	r4, r4
 8000a16:	4264      	negs	r4, r4
 8000a18:	193f      	adds	r7, r7, r4
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	023b      	lsls	r3, r7, #8
 8000a1e:	d400      	bmi.n	8000a22 <__aeabi_dadd+0x112>
 8000a20:	e09e      	b.n	8000b60 <__aeabi_dadd+0x250>
 8000a22:	4b95      	ldr	r3, [pc, #596]	; (8000c78 <__aeabi_dadd+0x368>)
 8000a24:	3601      	adds	r6, #1
 8000a26:	429e      	cmp	r6, r3
 8000a28:	d100      	bne.n	8000a2c <__aeabi_dadd+0x11c>
 8000a2a:	e0b7      	b.n	8000b9c <__aeabi_dadd+0x28c>
 8000a2c:	4a93      	ldr	r2, [pc, #588]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000a2e:	08e4      	lsrs	r4, r4, #3
 8000a30:	4017      	ands	r7, r2
 8000a32:	077b      	lsls	r3, r7, #29
 8000a34:	0571      	lsls	r1, r6, #21
 8000a36:	027f      	lsls	r7, r7, #9
 8000a38:	4323      	orrs	r3, r4
 8000a3a:	0b3f      	lsrs	r7, r7, #12
 8000a3c:	0d4a      	lsrs	r2, r1, #21
 8000a3e:	0512      	lsls	r2, r2, #20
 8000a40:	433a      	orrs	r2, r7
 8000a42:	07ed      	lsls	r5, r5, #31
 8000a44:	432a      	orrs	r2, r5
 8000a46:	0018      	movs	r0, r3
 8000a48:	0011      	movs	r1, r2
 8000a4a:	bce0      	pop	{r5, r6, r7}
 8000a4c:	46ba      	mov	sl, r7
 8000a4e:	46b1      	mov	r9, r6
 8000a50:	46a8      	mov	r8, r5
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a54:	2c00      	cmp	r4, #0
 8000a56:	d04b      	beq.n	8000af0 <__aeabi_dadd+0x1e0>
 8000a58:	464c      	mov	r4, r9
 8000a5a:	1ba4      	subs	r4, r4, r6
 8000a5c:	46a4      	mov	ip, r4
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d000      	beq.n	8000a64 <__aeabi_dadd+0x154>
 8000a62:	e123      	b.n	8000cac <__aeabi_dadd+0x39c>
 8000a64:	0004      	movs	r4, r0
 8000a66:	431c      	orrs	r4, r3
 8000a68:	d100      	bne.n	8000a6c <__aeabi_dadd+0x15c>
 8000a6a:	e1af      	b.n	8000dcc <__aeabi_dadd+0x4bc>
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	1e54      	subs	r4, r2, #1
 8000a70:	2a01      	cmp	r2, #1
 8000a72:	d100      	bne.n	8000a76 <__aeabi_dadd+0x166>
 8000a74:	e215      	b.n	8000ea2 <__aeabi_dadd+0x592>
 8000a76:	4d80      	ldr	r5, [pc, #512]	; (8000c78 <__aeabi_dadd+0x368>)
 8000a78:	45ac      	cmp	ip, r5
 8000a7a:	d100      	bne.n	8000a7e <__aeabi_dadd+0x16e>
 8000a7c:	e1c8      	b.n	8000e10 <__aeabi_dadd+0x500>
 8000a7e:	46a4      	mov	ip, r4
 8000a80:	e11b      	b.n	8000cba <__aeabi_dadd+0x3aa>
 8000a82:	464a      	mov	r2, r9
 8000a84:	1ab2      	subs	r2, r6, r2
 8000a86:	4694      	mov	ip, r2
 8000a88:	2a00      	cmp	r2, #0
 8000a8a:	dc00      	bgt.n	8000a8e <__aeabi_dadd+0x17e>
 8000a8c:	e0ac      	b.n	8000be8 <__aeabi_dadd+0x2d8>
 8000a8e:	464a      	mov	r2, r9
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d043      	beq.n	8000b1c <__aeabi_dadd+0x20c>
 8000a94:	4a78      	ldr	r2, [pc, #480]	; (8000c78 <__aeabi_dadd+0x368>)
 8000a96:	4296      	cmp	r6, r2
 8000a98:	d100      	bne.n	8000a9c <__aeabi_dadd+0x18c>
 8000a9a:	e1af      	b.n	8000dfc <__aeabi_dadd+0x4ec>
 8000a9c:	2280      	movs	r2, #128	; 0x80
 8000a9e:	003c      	movs	r4, r7
 8000aa0:	0412      	lsls	r2, r2, #16
 8000aa2:	4314      	orrs	r4, r2
 8000aa4:	46a0      	mov	r8, r4
 8000aa6:	4662      	mov	r2, ip
 8000aa8:	2a38      	cmp	r2, #56	; 0x38
 8000aaa:	dc67      	bgt.n	8000b7c <__aeabi_dadd+0x26c>
 8000aac:	2a1f      	cmp	r2, #31
 8000aae:	dc00      	bgt.n	8000ab2 <__aeabi_dadd+0x1a2>
 8000ab0:	e15f      	b.n	8000d72 <__aeabi_dadd+0x462>
 8000ab2:	4647      	mov	r7, r8
 8000ab4:	3a20      	subs	r2, #32
 8000ab6:	40d7      	lsrs	r7, r2
 8000ab8:	4662      	mov	r2, ip
 8000aba:	2a20      	cmp	r2, #32
 8000abc:	d005      	beq.n	8000aca <__aeabi_dadd+0x1ba>
 8000abe:	4664      	mov	r4, ip
 8000ac0:	2240      	movs	r2, #64	; 0x40
 8000ac2:	1b12      	subs	r2, r2, r4
 8000ac4:	4644      	mov	r4, r8
 8000ac6:	4094      	lsls	r4, r2
 8000ac8:	4321      	orrs	r1, r4
 8000aca:	1e4a      	subs	r2, r1, #1
 8000acc:	4191      	sbcs	r1, r2
 8000ace:	000c      	movs	r4, r1
 8000ad0:	433c      	orrs	r4, r7
 8000ad2:	e057      	b.n	8000b84 <__aeabi_dadd+0x274>
 8000ad4:	003a      	movs	r2, r7
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	d100      	bne.n	8000adc <__aeabi_dadd+0x1cc>
 8000ada:	e105      	b.n	8000ce8 <__aeabi_dadd+0x3d8>
 8000adc:	0022      	movs	r2, r4
 8000ade:	3a01      	subs	r2, #1
 8000ae0:	2c01      	cmp	r4, #1
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dadd+0x1d6>
 8000ae4:	e182      	b.n	8000dec <__aeabi_dadd+0x4dc>
 8000ae6:	4c64      	ldr	r4, [pc, #400]	; (8000c78 <__aeabi_dadd+0x368>)
 8000ae8:	45a4      	cmp	ip, r4
 8000aea:	d05b      	beq.n	8000ba4 <__aeabi_dadd+0x294>
 8000aec:	4694      	mov	ip, r2
 8000aee:	e741      	b.n	8000974 <__aeabi_dadd+0x64>
 8000af0:	4c63      	ldr	r4, [pc, #396]	; (8000c80 <__aeabi_dadd+0x370>)
 8000af2:	1c77      	adds	r7, r6, #1
 8000af4:	4227      	tst	r7, r4
 8000af6:	d000      	beq.n	8000afa <__aeabi_dadd+0x1ea>
 8000af8:	e0c4      	b.n	8000c84 <__aeabi_dadd+0x374>
 8000afa:	0004      	movs	r4, r0
 8000afc:	431c      	orrs	r4, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d000      	beq.n	8000b04 <__aeabi_dadd+0x1f4>
 8000b02:	e169      	b.n	8000dd8 <__aeabi_dadd+0x4c8>
 8000b04:	2c00      	cmp	r4, #0
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x1fa>
 8000b08:	e1bf      	b.n	8000e8a <__aeabi_dadd+0x57a>
 8000b0a:	4644      	mov	r4, r8
 8000b0c:	430c      	orrs	r4, r1
 8000b0e:	d000      	beq.n	8000b12 <__aeabi_dadd+0x202>
 8000b10:	e1d0      	b.n	8000eb4 <__aeabi_dadd+0x5a4>
 8000b12:	0742      	lsls	r2, r0, #29
 8000b14:	08db      	lsrs	r3, r3, #3
 8000b16:	4313      	orrs	r3, r2
 8000b18:	08c0      	lsrs	r0, r0, #3
 8000b1a:	e029      	b.n	8000b70 <__aeabi_dadd+0x260>
 8000b1c:	003a      	movs	r2, r7
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	d100      	bne.n	8000b24 <__aeabi_dadd+0x214>
 8000b22:	e170      	b.n	8000e06 <__aeabi_dadd+0x4f6>
 8000b24:	4662      	mov	r2, ip
 8000b26:	4664      	mov	r4, ip
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	2c01      	cmp	r4, #1
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x220>
 8000b2e:	e0e0      	b.n	8000cf2 <__aeabi_dadd+0x3e2>
 8000b30:	4c51      	ldr	r4, [pc, #324]	; (8000c78 <__aeabi_dadd+0x368>)
 8000b32:	45a4      	cmp	ip, r4
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dadd+0x228>
 8000b36:	e161      	b.n	8000dfc <__aeabi_dadd+0x4ec>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	e7b4      	b.n	8000aa6 <__aeabi_dadd+0x196>
 8000b3c:	003a      	movs	r2, r7
 8000b3e:	391f      	subs	r1, #31
 8000b40:	40ca      	lsrs	r2, r1
 8000b42:	0011      	movs	r1, r2
 8000b44:	2b20      	cmp	r3, #32
 8000b46:	d003      	beq.n	8000b50 <__aeabi_dadd+0x240>
 8000b48:	2240      	movs	r2, #64	; 0x40
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	409f      	lsls	r7, r3
 8000b4e:	433c      	orrs	r4, r7
 8000b50:	1e63      	subs	r3, r4, #1
 8000b52:	419c      	sbcs	r4, r3
 8000b54:	2700      	movs	r7, #0
 8000b56:	2600      	movs	r6, #0
 8000b58:	430c      	orrs	r4, r1
 8000b5a:	0763      	lsls	r3, r4, #29
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_dadd+0x250>
 8000b5e:	e753      	b.n	8000a08 <__aeabi_dadd+0xf8>
 8000b60:	46b4      	mov	ip, r6
 8000b62:	08e4      	lsrs	r4, r4, #3
 8000b64:	077b      	lsls	r3, r7, #29
 8000b66:	4323      	orrs	r3, r4
 8000b68:	08f8      	lsrs	r0, r7, #3
 8000b6a:	4a43      	ldr	r2, [pc, #268]	; (8000c78 <__aeabi_dadd+0x368>)
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d01d      	beq.n	8000bac <__aeabi_dadd+0x29c>
 8000b70:	4662      	mov	r2, ip
 8000b72:	0307      	lsls	r7, r0, #12
 8000b74:	0552      	lsls	r2, r2, #21
 8000b76:	0b3f      	lsrs	r7, r7, #12
 8000b78:	0d52      	lsrs	r2, r2, #21
 8000b7a:	e760      	b.n	8000a3e <__aeabi_dadd+0x12e>
 8000b7c:	4644      	mov	r4, r8
 8000b7e:	430c      	orrs	r4, r1
 8000b80:	1e62      	subs	r2, r4, #1
 8000b82:	4194      	sbcs	r4, r2
 8000b84:	18e4      	adds	r4, r4, r3
 8000b86:	429c      	cmp	r4, r3
 8000b88:	419b      	sbcs	r3, r3
 8000b8a:	425f      	negs	r7, r3
 8000b8c:	183f      	adds	r7, r7, r0
 8000b8e:	023b      	lsls	r3, r7, #8
 8000b90:	d5e3      	bpl.n	8000b5a <__aeabi_dadd+0x24a>
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <__aeabi_dadd+0x368>)
 8000b94:	3601      	adds	r6, #1
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d000      	beq.n	8000b9c <__aeabi_dadd+0x28c>
 8000b9a:	e0b5      	b.n	8000d08 <__aeabi_dadd+0x3f8>
 8000b9c:	0032      	movs	r2, r6
 8000b9e:	2700      	movs	r7, #0
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	e74c      	b.n	8000a3e <__aeabi_dadd+0x12e>
 8000ba4:	0742      	lsls	r2, r0, #29
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	08c0      	lsrs	r0, r0, #3
 8000bac:	001a      	movs	r2, r3
 8000bae:	4302      	orrs	r2, r0
 8000bb0:	d100      	bne.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000bb2:	e1e1      	b.n	8000f78 <__aeabi_dadd+0x668>
 8000bb4:	2780      	movs	r7, #128	; 0x80
 8000bb6:	033f      	lsls	r7, r7, #12
 8000bb8:	4307      	orrs	r7, r0
 8000bba:	033f      	lsls	r7, r7, #12
 8000bbc:	4a2e      	ldr	r2, [pc, #184]	; (8000c78 <__aeabi_dadd+0x368>)
 8000bbe:	0b3f      	lsrs	r7, r7, #12
 8000bc0:	e73d      	b.n	8000a3e <__aeabi_dadd+0x12e>
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f001 fcdc 	bl	8002580 <__clzsi2>
 8000bc8:	0001      	movs	r1, r0
 8000bca:	3118      	adds	r1, #24
 8000bcc:	291f      	cmp	r1, #31
 8000bce:	dc00      	bgt.n	8000bd2 <__aeabi_dadd+0x2c2>
 8000bd0:	e6fc      	b.n	80009cc <__aeabi_dadd+0xbc>
 8000bd2:	3808      	subs	r0, #8
 8000bd4:	4084      	lsls	r4, r0
 8000bd6:	0027      	movs	r7, r4
 8000bd8:	2400      	movs	r4, #0
 8000bda:	42b1      	cmp	r1, r6
 8000bdc:	db00      	blt.n	8000be0 <__aeabi_dadd+0x2d0>
 8000bde:	e6ff      	b.n	80009e0 <__aeabi_dadd+0xd0>
 8000be0:	4a26      	ldr	r2, [pc, #152]	; (8000c7c <__aeabi_dadd+0x36c>)
 8000be2:	1a76      	subs	r6, r6, r1
 8000be4:	4017      	ands	r7, r2
 8000be6:	e70d      	b.n	8000a04 <__aeabi_dadd+0xf4>
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d02f      	beq.n	8000c4c <__aeabi_dadd+0x33c>
 8000bec:	464a      	mov	r2, r9
 8000bee:	1b92      	subs	r2, r2, r6
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dadd+0x2e8>
 8000bf6:	e0ad      	b.n	8000d54 <__aeabi_dadd+0x444>
 8000bf8:	4a1f      	ldr	r2, [pc, #124]	; (8000c78 <__aeabi_dadd+0x368>)
 8000bfa:	4591      	cmp	r9, r2
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dadd+0x2f0>
 8000bfe:	e10f      	b.n	8000e20 <__aeabi_dadd+0x510>
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	0412      	lsls	r2, r2, #16
 8000c04:	4310      	orrs	r0, r2
 8000c06:	4662      	mov	r2, ip
 8000c08:	2a38      	cmp	r2, #56	; 0x38
 8000c0a:	dd00      	ble.n	8000c0e <__aeabi_dadd+0x2fe>
 8000c0c:	e10f      	b.n	8000e2e <__aeabi_dadd+0x51e>
 8000c0e:	2a1f      	cmp	r2, #31
 8000c10:	dd00      	ble.n	8000c14 <__aeabi_dadd+0x304>
 8000c12:	e180      	b.n	8000f16 <__aeabi_dadd+0x606>
 8000c14:	4664      	mov	r4, ip
 8000c16:	2220      	movs	r2, #32
 8000c18:	001e      	movs	r6, r3
 8000c1a:	1b12      	subs	r2, r2, r4
 8000c1c:	4667      	mov	r7, ip
 8000c1e:	0004      	movs	r4, r0
 8000c20:	4093      	lsls	r3, r2
 8000c22:	4094      	lsls	r4, r2
 8000c24:	40fe      	lsrs	r6, r7
 8000c26:	1e5a      	subs	r2, r3, #1
 8000c28:	4193      	sbcs	r3, r2
 8000c2a:	40f8      	lsrs	r0, r7
 8000c2c:	4334      	orrs	r4, r6
 8000c2e:	431c      	orrs	r4, r3
 8000c30:	4480      	add	r8, r0
 8000c32:	1864      	adds	r4, r4, r1
 8000c34:	428c      	cmp	r4, r1
 8000c36:	41bf      	sbcs	r7, r7
 8000c38:	427f      	negs	r7, r7
 8000c3a:	464e      	mov	r6, r9
 8000c3c:	4447      	add	r7, r8
 8000c3e:	e7a6      	b.n	8000b8e <__aeabi_dadd+0x27e>
 8000c40:	4642      	mov	r2, r8
 8000c42:	430a      	orrs	r2, r1
 8000c44:	0011      	movs	r1, r2
 8000c46:	1e4a      	subs	r2, r1, #1
 8000c48:	4191      	sbcs	r1, r2
 8000c4a:	e6ad      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000c4c:	4c0c      	ldr	r4, [pc, #48]	; (8000c80 <__aeabi_dadd+0x370>)
 8000c4e:	1c72      	adds	r2, r6, #1
 8000c50:	4222      	tst	r2, r4
 8000c52:	d000      	beq.n	8000c56 <__aeabi_dadd+0x346>
 8000c54:	e0a1      	b.n	8000d9a <__aeabi_dadd+0x48a>
 8000c56:	0002      	movs	r2, r0
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_dadd+0x350>
 8000c5e:	e0fa      	b.n	8000e56 <__aeabi_dadd+0x546>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x356>
 8000c64:	e145      	b.n	8000ef2 <__aeabi_dadd+0x5e2>
 8000c66:	003a      	movs	r2, r7
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	d000      	beq.n	8000c6e <__aeabi_dadd+0x35e>
 8000c6c:	e146      	b.n	8000efc <__aeabi_dadd+0x5ec>
 8000c6e:	0742      	lsls	r2, r0, #29
 8000c70:	08db      	lsrs	r3, r3, #3
 8000c72:	4313      	orrs	r3, r2
 8000c74:	08c0      	lsrs	r0, r0, #3
 8000c76:	e77b      	b.n	8000b70 <__aeabi_dadd+0x260>
 8000c78:	000007ff 	.word	0x000007ff
 8000c7c:	ff7fffff 	.word	0xff7fffff
 8000c80:	000007fe 	.word	0x000007fe
 8000c84:	4647      	mov	r7, r8
 8000c86:	1a5c      	subs	r4, r3, r1
 8000c88:	1bc2      	subs	r2, r0, r7
 8000c8a:	42a3      	cmp	r3, r4
 8000c8c:	41bf      	sbcs	r7, r7
 8000c8e:	427f      	negs	r7, r7
 8000c90:	46b9      	mov	r9, r7
 8000c92:	0017      	movs	r7, r2
 8000c94:	464a      	mov	r2, r9
 8000c96:	1abf      	subs	r7, r7, r2
 8000c98:	023a      	lsls	r2, r7, #8
 8000c9a:	d500      	bpl.n	8000c9e <__aeabi_dadd+0x38e>
 8000c9c:	e08d      	b.n	8000dba <__aeabi_dadd+0x4aa>
 8000c9e:	0023      	movs	r3, r4
 8000ca0:	433b      	orrs	r3, r7
 8000ca2:	d000      	beq.n	8000ca6 <__aeabi_dadd+0x396>
 8000ca4:	e68a      	b.n	80009bc <__aeabi_dadd+0xac>
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	2500      	movs	r5, #0
 8000caa:	e761      	b.n	8000b70 <__aeabi_dadd+0x260>
 8000cac:	4cb4      	ldr	r4, [pc, #720]	; (8000f80 <__aeabi_dadd+0x670>)
 8000cae:	45a1      	cmp	r9, r4
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x3a4>
 8000cb2:	e0ad      	b.n	8000e10 <__aeabi_dadd+0x500>
 8000cb4:	2480      	movs	r4, #128	; 0x80
 8000cb6:	0424      	lsls	r4, r4, #16
 8000cb8:	4320      	orrs	r0, r4
 8000cba:	4664      	mov	r4, ip
 8000cbc:	2c38      	cmp	r4, #56	; 0x38
 8000cbe:	dc3d      	bgt.n	8000d3c <__aeabi_dadd+0x42c>
 8000cc0:	4662      	mov	r2, ip
 8000cc2:	2c1f      	cmp	r4, #31
 8000cc4:	dd00      	ble.n	8000cc8 <__aeabi_dadd+0x3b8>
 8000cc6:	e0b7      	b.n	8000e38 <__aeabi_dadd+0x528>
 8000cc8:	2520      	movs	r5, #32
 8000cca:	001e      	movs	r6, r3
 8000ccc:	1b2d      	subs	r5, r5, r4
 8000cce:	0004      	movs	r4, r0
 8000cd0:	40ab      	lsls	r3, r5
 8000cd2:	40ac      	lsls	r4, r5
 8000cd4:	40d6      	lsrs	r6, r2
 8000cd6:	40d0      	lsrs	r0, r2
 8000cd8:	4642      	mov	r2, r8
 8000cda:	1e5d      	subs	r5, r3, #1
 8000cdc:	41ab      	sbcs	r3, r5
 8000cde:	4334      	orrs	r4, r6
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	4690      	mov	r8, r2
 8000ce4:	4323      	orrs	r3, r4
 8000ce6:	e02c      	b.n	8000d42 <__aeabi_dadd+0x432>
 8000ce8:	0742      	lsls	r2, r0, #29
 8000cea:	08db      	lsrs	r3, r3, #3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	08c0      	lsrs	r0, r0, #3
 8000cf0:	e73b      	b.n	8000b6a <__aeabi_dadd+0x25a>
 8000cf2:	185c      	adds	r4, r3, r1
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	419b      	sbcs	r3, r3
 8000cf8:	4440      	add	r0, r8
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	18c7      	adds	r7, r0, r3
 8000cfe:	2601      	movs	r6, #1
 8000d00:	023b      	lsls	r3, r7, #8
 8000d02:	d400      	bmi.n	8000d06 <__aeabi_dadd+0x3f6>
 8000d04:	e729      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000d06:	2602      	movs	r6, #2
 8000d08:	4a9e      	ldr	r2, [pc, #632]	; (8000f84 <__aeabi_dadd+0x674>)
 8000d0a:	0863      	lsrs	r3, r4, #1
 8000d0c:	4017      	ands	r7, r2
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4014      	ands	r4, r2
 8000d12:	431c      	orrs	r4, r3
 8000d14:	07fb      	lsls	r3, r7, #31
 8000d16:	431c      	orrs	r4, r3
 8000d18:	087f      	lsrs	r7, r7, #1
 8000d1a:	e673      	b.n	8000a04 <__aeabi_dadd+0xf4>
 8000d1c:	4644      	mov	r4, r8
 8000d1e:	3a20      	subs	r2, #32
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	4662      	mov	r2, ip
 8000d24:	2a20      	cmp	r2, #32
 8000d26:	d005      	beq.n	8000d34 <__aeabi_dadd+0x424>
 8000d28:	4667      	mov	r7, ip
 8000d2a:	2240      	movs	r2, #64	; 0x40
 8000d2c:	1bd2      	subs	r2, r2, r7
 8000d2e:	4647      	mov	r7, r8
 8000d30:	4097      	lsls	r7, r2
 8000d32:	4339      	orrs	r1, r7
 8000d34:	1e4a      	subs	r2, r1, #1
 8000d36:	4191      	sbcs	r1, r2
 8000d38:	4321      	orrs	r1, r4
 8000d3a:	e635      	b.n	80009a8 <__aeabi_dadd+0x98>
 8000d3c:	4303      	orrs	r3, r0
 8000d3e:	1e58      	subs	r0, r3, #1
 8000d40:	4183      	sbcs	r3, r0
 8000d42:	1acc      	subs	r4, r1, r3
 8000d44:	42a1      	cmp	r1, r4
 8000d46:	41bf      	sbcs	r7, r7
 8000d48:	4643      	mov	r3, r8
 8000d4a:	427f      	negs	r7, r7
 8000d4c:	4655      	mov	r5, sl
 8000d4e:	464e      	mov	r6, r9
 8000d50:	1bdf      	subs	r7, r3, r7
 8000d52:	e62e      	b.n	80009b2 <__aeabi_dadd+0xa2>
 8000d54:	0002      	movs	r2, r0
 8000d56:	431a      	orrs	r2, r3
 8000d58:	d100      	bne.n	8000d5c <__aeabi_dadd+0x44c>
 8000d5a:	e0bd      	b.n	8000ed8 <__aeabi_dadd+0x5c8>
 8000d5c:	4662      	mov	r2, ip
 8000d5e:	4664      	mov	r4, ip
 8000d60:	3a01      	subs	r2, #1
 8000d62:	2c01      	cmp	r4, #1
 8000d64:	d100      	bne.n	8000d68 <__aeabi_dadd+0x458>
 8000d66:	e0e5      	b.n	8000f34 <__aeabi_dadd+0x624>
 8000d68:	4c85      	ldr	r4, [pc, #532]	; (8000f80 <__aeabi_dadd+0x670>)
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	d058      	beq.n	8000e20 <__aeabi_dadd+0x510>
 8000d6e:	4694      	mov	ip, r2
 8000d70:	e749      	b.n	8000c06 <__aeabi_dadd+0x2f6>
 8000d72:	4664      	mov	r4, ip
 8000d74:	2220      	movs	r2, #32
 8000d76:	1b12      	subs	r2, r2, r4
 8000d78:	4644      	mov	r4, r8
 8000d7a:	4094      	lsls	r4, r2
 8000d7c:	000f      	movs	r7, r1
 8000d7e:	46a1      	mov	r9, r4
 8000d80:	4664      	mov	r4, ip
 8000d82:	4091      	lsls	r1, r2
 8000d84:	40e7      	lsrs	r7, r4
 8000d86:	464c      	mov	r4, r9
 8000d88:	1e4a      	subs	r2, r1, #1
 8000d8a:	4191      	sbcs	r1, r2
 8000d8c:	433c      	orrs	r4, r7
 8000d8e:	4642      	mov	r2, r8
 8000d90:	430c      	orrs	r4, r1
 8000d92:	4661      	mov	r1, ip
 8000d94:	40ca      	lsrs	r2, r1
 8000d96:	1880      	adds	r0, r0, r2
 8000d98:	e6f4      	b.n	8000b84 <__aeabi_dadd+0x274>
 8000d9a:	4c79      	ldr	r4, [pc, #484]	; (8000f80 <__aeabi_dadd+0x670>)
 8000d9c:	42a2      	cmp	r2, r4
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dadd+0x492>
 8000da0:	e6fd      	b.n	8000b9e <__aeabi_dadd+0x28e>
 8000da2:	1859      	adds	r1, r3, r1
 8000da4:	4299      	cmp	r1, r3
 8000da6:	419b      	sbcs	r3, r3
 8000da8:	4440      	add	r0, r8
 8000daa:	425f      	negs	r7, r3
 8000dac:	19c7      	adds	r7, r0, r7
 8000dae:	07fc      	lsls	r4, r7, #31
 8000db0:	0849      	lsrs	r1, r1, #1
 8000db2:	0016      	movs	r6, r2
 8000db4:	430c      	orrs	r4, r1
 8000db6:	087f      	lsrs	r7, r7, #1
 8000db8:	e6cf      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000dba:	1acc      	subs	r4, r1, r3
 8000dbc:	42a1      	cmp	r1, r4
 8000dbe:	41bf      	sbcs	r7, r7
 8000dc0:	4643      	mov	r3, r8
 8000dc2:	427f      	negs	r7, r7
 8000dc4:	1a18      	subs	r0, r3, r0
 8000dc6:	4655      	mov	r5, sl
 8000dc8:	1bc7      	subs	r7, r0, r7
 8000dca:	e5f7      	b.n	80009bc <__aeabi_dadd+0xac>
 8000dcc:	08c9      	lsrs	r1, r1, #3
 8000dce:	077b      	lsls	r3, r7, #29
 8000dd0:	4655      	mov	r5, sl
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	08f8      	lsrs	r0, r7, #3
 8000dd6:	e6c8      	b.n	8000b6a <__aeabi_dadd+0x25a>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d000      	beq.n	8000dde <__aeabi_dadd+0x4ce>
 8000ddc:	e081      	b.n	8000ee2 <__aeabi_dadd+0x5d2>
 8000dde:	4643      	mov	r3, r8
 8000de0:	430b      	orrs	r3, r1
 8000de2:	d115      	bne.n	8000e10 <__aeabi_dadd+0x500>
 8000de4:	2080      	movs	r0, #128	; 0x80
 8000de6:	2500      	movs	r5, #0
 8000de8:	0300      	lsls	r0, r0, #12
 8000dea:	e6e3      	b.n	8000bb4 <__aeabi_dadd+0x2a4>
 8000dec:	1a5c      	subs	r4, r3, r1
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	419b      	sbcs	r3, r3
 8000df2:	1bc7      	subs	r7, r0, r7
 8000df4:	425b      	negs	r3, r3
 8000df6:	2601      	movs	r6, #1
 8000df8:	1aff      	subs	r7, r7, r3
 8000dfa:	e5da      	b.n	80009b2 <__aeabi_dadd+0xa2>
 8000dfc:	0742      	lsls	r2, r0, #29
 8000dfe:	08db      	lsrs	r3, r3, #3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	08c0      	lsrs	r0, r0, #3
 8000e04:	e6d2      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000e06:	0742      	lsls	r2, r0, #29
 8000e08:	08db      	lsrs	r3, r3, #3
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	08c0      	lsrs	r0, r0, #3
 8000e0e:	e6ac      	b.n	8000b6a <__aeabi_dadd+0x25a>
 8000e10:	4643      	mov	r3, r8
 8000e12:	4642      	mov	r2, r8
 8000e14:	08c9      	lsrs	r1, r1, #3
 8000e16:	075b      	lsls	r3, r3, #29
 8000e18:	4655      	mov	r5, sl
 8000e1a:	430b      	orrs	r3, r1
 8000e1c:	08d0      	lsrs	r0, r2, #3
 8000e1e:	e6c5      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000e20:	4643      	mov	r3, r8
 8000e22:	4642      	mov	r2, r8
 8000e24:	075b      	lsls	r3, r3, #29
 8000e26:	08c9      	lsrs	r1, r1, #3
 8000e28:	430b      	orrs	r3, r1
 8000e2a:	08d0      	lsrs	r0, r2, #3
 8000e2c:	e6be      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000e2e:	4303      	orrs	r3, r0
 8000e30:	001c      	movs	r4, r3
 8000e32:	1e63      	subs	r3, r4, #1
 8000e34:	419c      	sbcs	r4, r3
 8000e36:	e6fc      	b.n	8000c32 <__aeabi_dadd+0x322>
 8000e38:	0002      	movs	r2, r0
 8000e3a:	3c20      	subs	r4, #32
 8000e3c:	40e2      	lsrs	r2, r4
 8000e3e:	0014      	movs	r4, r2
 8000e40:	4662      	mov	r2, ip
 8000e42:	2a20      	cmp	r2, #32
 8000e44:	d003      	beq.n	8000e4e <__aeabi_dadd+0x53e>
 8000e46:	2540      	movs	r5, #64	; 0x40
 8000e48:	1aad      	subs	r5, r5, r2
 8000e4a:	40a8      	lsls	r0, r5
 8000e4c:	4303      	orrs	r3, r0
 8000e4e:	1e58      	subs	r0, r3, #1
 8000e50:	4183      	sbcs	r3, r0
 8000e52:	4323      	orrs	r3, r4
 8000e54:	e775      	b.n	8000d42 <__aeabi_dadd+0x432>
 8000e56:	2a00      	cmp	r2, #0
 8000e58:	d0e2      	beq.n	8000e20 <__aeabi_dadd+0x510>
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	d0cd      	beq.n	8000dfc <__aeabi_dadd+0x4ec>
 8000e60:	0742      	lsls	r2, r0, #29
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	4313      	orrs	r3, r2
 8000e66:	2280      	movs	r2, #128	; 0x80
 8000e68:	08c0      	lsrs	r0, r0, #3
 8000e6a:	0312      	lsls	r2, r2, #12
 8000e6c:	4210      	tst	r0, r2
 8000e6e:	d006      	beq.n	8000e7e <__aeabi_dadd+0x56e>
 8000e70:	08fc      	lsrs	r4, r7, #3
 8000e72:	4214      	tst	r4, r2
 8000e74:	d103      	bne.n	8000e7e <__aeabi_dadd+0x56e>
 8000e76:	0020      	movs	r0, r4
 8000e78:	08cb      	lsrs	r3, r1, #3
 8000e7a:	077a      	lsls	r2, r7, #29
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	0f5a      	lsrs	r2, r3, #29
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	0752      	lsls	r2, r2, #29
 8000e84:	08db      	lsrs	r3, r3, #3
 8000e86:	4313      	orrs	r3, r2
 8000e88:	e690      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000e8a:	4643      	mov	r3, r8
 8000e8c:	430b      	orrs	r3, r1
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_dadd+0x582>
 8000e90:	e709      	b.n	8000ca6 <__aeabi_dadd+0x396>
 8000e92:	4643      	mov	r3, r8
 8000e94:	4642      	mov	r2, r8
 8000e96:	08c9      	lsrs	r1, r1, #3
 8000e98:	075b      	lsls	r3, r3, #29
 8000e9a:	4655      	mov	r5, sl
 8000e9c:	430b      	orrs	r3, r1
 8000e9e:	08d0      	lsrs	r0, r2, #3
 8000ea0:	e666      	b.n	8000b70 <__aeabi_dadd+0x260>
 8000ea2:	1acc      	subs	r4, r1, r3
 8000ea4:	42a1      	cmp	r1, r4
 8000ea6:	4189      	sbcs	r1, r1
 8000ea8:	1a3f      	subs	r7, r7, r0
 8000eaa:	4249      	negs	r1, r1
 8000eac:	4655      	mov	r5, sl
 8000eae:	2601      	movs	r6, #1
 8000eb0:	1a7f      	subs	r7, r7, r1
 8000eb2:	e57e      	b.n	80009b2 <__aeabi_dadd+0xa2>
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	1a5c      	subs	r4, r3, r1
 8000eb8:	1a87      	subs	r7, r0, r2
 8000eba:	42a3      	cmp	r3, r4
 8000ebc:	4192      	sbcs	r2, r2
 8000ebe:	4252      	negs	r2, r2
 8000ec0:	1abf      	subs	r7, r7, r2
 8000ec2:	023a      	lsls	r2, r7, #8
 8000ec4:	d53d      	bpl.n	8000f42 <__aeabi_dadd+0x632>
 8000ec6:	1acc      	subs	r4, r1, r3
 8000ec8:	42a1      	cmp	r1, r4
 8000eca:	4189      	sbcs	r1, r1
 8000ecc:	4643      	mov	r3, r8
 8000ece:	4249      	negs	r1, r1
 8000ed0:	1a1f      	subs	r7, r3, r0
 8000ed2:	4655      	mov	r5, sl
 8000ed4:	1a7f      	subs	r7, r7, r1
 8000ed6:	e595      	b.n	8000a04 <__aeabi_dadd+0xf4>
 8000ed8:	077b      	lsls	r3, r7, #29
 8000eda:	08c9      	lsrs	r1, r1, #3
 8000edc:	430b      	orrs	r3, r1
 8000ede:	08f8      	lsrs	r0, r7, #3
 8000ee0:	e643      	b.n	8000b6a <__aeabi_dadd+0x25a>
 8000ee2:	4644      	mov	r4, r8
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	430c      	orrs	r4, r1
 8000ee8:	d130      	bne.n	8000f4c <__aeabi_dadd+0x63c>
 8000eea:	0742      	lsls	r2, r0, #29
 8000eec:	4313      	orrs	r3, r2
 8000eee:	08c0      	lsrs	r0, r0, #3
 8000ef0:	e65c      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000ef2:	077b      	lsls	r3, r7, #29
 8000ef4:	08c9      	lsrs	r1, r1, #3
 8000ef6:	430b      	orrs	r3, r1
 8000ef8:	08f8      	lsrs	r0, r7, #3
 8000efa:	e639      	b.n	8000b70 <__aeabi_dadd+0x260>
 8000efc:	185c      	adds	r4, r3, r1
 8000efe:	429c      	cmp	r4, r3
 8000f00:	419b      	sbcs	r3, r3
 8000f02:	4440      	add	r0, r8
 8000f04:	425b      	negs	r3, r3
 8000f06:	18c7      	adds	r7, r0, r3
 8000f08:	023b      	lsls	r3, r7, #8
 8000f0a:	d400      	bmi.n	8000f0e <__aeabi_dadd+0x5fe>
 8000f0c:	e625      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <__aeabi_dadd+0x674>)
 8000f10:	2601      	movs	r6, #1
 8000f12:	401f      	ands	r7, r3
 8000f14:	e621      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f16:	0004      	movs	r4, r0
 8000f18:	3a20      	subs	r2, #32
 8000f1a:	40d4      	lsrs	r4, r2
 8000f1c:	4662      	mov	r2, ip
 8000f1e:	2a20      	cmp	r2, #32
 8000f20:	d004      	beq.n	8000f2c <__aeabi_dadd+0x61c>
 8000f22:	2240      	movs	r2, #64	; 0x40
 8000f24:	4666      	mov	r6, ip
 8000f26:	1b92      	subs	r2, r2, r6
 8000f28:	4090      	lsls	r0, r2
 8000f2a:	4303      	orrs	r3, r0
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	4193      	sbcs	r3, r2
 8000f30:	431c      	orrs	r4, r3
 8000f32:	e67e      	b.n	8000c32 <__aeabi_dadd+0x322>
 8000f34:	185c      	adds	r4, r3, r1
 8000f36:	428c      	cmp	r4, r1
 8000f38:	4189      	sbcs	r1, r1
 8000f3a:	4440      	add	r0, r8
 8000f3c:	4249      	negs	r1, r1
 8000f3e:	1847      	adds	r7, r0, r1
 8000f40:	e6dd      	b.n	8000cfe <__aeabi_dadd+0x3ee>
 8000f42:	0023      	movs	r3, r4
 8000f44:	433b      	orrs	r3, r7
 8000f46:	d100      	bne.n	8000f4a <__aeabi_dadd+0x63a>
 8000f48:	e6ad      	b.n	8000ca6 <__aeabi_dadd+0x396>
 8000f4a:	e606      	b.n	8000b5a <__aeabi_dadd+0x24a>
 8000f4c:	0744      	lsls	r4, r0, #29
 8000f4e:	4323      	orrs	r3, r4
 8000f50:	2480      	movs	r4, #128	; 0x80
 8000f52:	08c0      	lsrs	r0, r0, #3
 8000f54:	0324      	lsls	r4, r4, #12
 8000f56:	4220      	tst	r0, r4
 8000f58:	d008      	beq.n	8000f6c <__aeabi_dadd+0x65c>
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	08d6      	lsrs	r6, r2, #3
 8000f5e:	4226      	tst	r6, r4
 8000f60:	d104      	bne.n	8000f6c <__aeabi_dadd+0x65c>
 8000f62:	4655      	mov	r5, sl
 8000f64:	0030      	movs	r0, r6
 8000f66:	08cb      	lsrs	r3, r1, #3
 8000f68:	0751      	lsls	r1, r2, #29
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	0f5a      	lsrs	r2, r3, #29
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	08db      	lsrs	r3, r3, #3
 8000f72:	0752      	lsls	r2, r2, #29
 8000f74:	4313      	orrs	r3, r2
 8000f76:	e619      	b.n	8000bac <__aeabi_dadd+0x29c>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	4a01      	ldr	r2, [pc, #4]	; (8000f80 <__aeabi_dadd+0x670>)
 8000f7c:	001f      	movs	r7, r3
 8000f7e:	e55e      	b.n	8000a3e <__aeabi_dadd+0x12e>
 8000f80:	000007ff 	.word	0x000007ff
 8000f84:	ff7fffff 	.word	0xff7fffff

08000f88 <__aeabi_ddiv>:
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	4657      	mov	r7, sl
 8000f8c:	464e      	mov	r6, r9
 8000f8e:	4645      	mov	r5, r8
 8000f90:	46de      	mov	lr, fp
 8000f92:	b5e0      	push	{r5, r6, r7, lr}
 8000f94:	4681      	mov	r9, r0
 8000f96:	0005      	movs	r5, r0
 8000f98:	030c      	lsls	r4, r1, #12
 8000f9a:	0048      	lsls	r0, r1, #1
 8000f9c:	4692      	mov	sl, r2
 8000f9e:	001f      	movs	r7, r3
 8000fa0:	b085      	sub	sp, #20
 8000fa2:	0b24      	lsrs	r4, r4, #12
 8000fa4:	0d40      	lsrs	r0, r0, #21
 8000fa6:	0fce      	lsrs	r6, r1, #31
 8000fa8:	2800      	cmp	r0, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_ddiv+0x26>
 8000fac:	e156      	b.n	800125c <__aeabi_ddiv+0x2d4>
 8000fae:	4bd4      	ldr	r3, [pc, #848]	; (8001300 <__aeabi_ddiv+0x378>)
 8000fb0:	4298      	cmp	r0, r3
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x2e>
 8000fb4:	e172      	b.n	800129c <__aeabi_ddiv+0x314>
 8000fb6:	0f6b      	lsrs	r3, r5, #29
 8000fb8:	00e4      	lsls	r4, r4, #3
 8000fba:	431c      	orrs	r4, r3
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	041b      	lsls	r3, r3, #16
 8000fc0:	4323      	orrs	r3, r4
 8000fc2:	4698      	mov	r8, r3
 8000fc4:	4bcf      	ldr	r3, [pc, #828]	; (8001304 <__aeabi_ddiv+0x37c>)
 8000fc6:	00ed      	lsls	r5, r5, #3
 8000fc8:	469b      	mov	fp, r3
 8000fca:	2300      	movs	r3, #0
 8000fcc:	4699      	mov	r9, r3
 8000fce:	4483      	add	fp, r0
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	033c      	lsls	r4, r7, #12
 8000fd4:	007b      	lsls	r3, r7, #1
 8000fd6:	4650      	mov	r0, sl
 8000fd8:	0b24      	lsrs	r4, r4, #12
 8000fda:	0d5b      	lsrs	r3, r3, #21
 8000fdc:	0fff      	lsrs	r7, r7, #31
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d100      	bne.n	8000fe4 <__aeabi_ddiv+0x5c>
 8000fe2:	e11f      	b.n	8001224 <__aeabi_ddiv+0x29c>
 8000fe4:	4ac6      	ldr	r2, [pc, #792]	; (8001300 <__aeabi_ddiv+0x378>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d100      	bne.n	8000fec <__aeabi_ddiv+0x64>
 8000fea:	e162      	b.n	80012b2 <__aeabi_ddiv+0x32a>
 8000fec:	49c5      	ldr	r1, [pc, #788]	; (8001304 <__aeabi_ddiv+0x37c>)
 8000fee:	0f42      	lsrs	r2, r0, #29
 8000ff0:	468c      	mov	ip, r1
 8000ff2:	00e4      	lsls	r4, r4, #3
 8000ff4:	4659      	mov	r1, fp
 8000ff6:	4314      	orrs	r4, r2
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	4463      	add	r3, ip
 8000ffc:	0412      	lsls	r2, r2, #16
 8000ffe:	1acb      	subs	r3, r1, r3
 8001000:	4314      	orrs	r4, r2
 8001002:	469b      	mov	fp, r3
 8001004:	00c2      	lsls	r2, r0, #3
 8001006:	2000      	movs	r0, #0
 8001008:	0033      	movs	r3, r6
 800100a:	407b      	eors	r3, r7
 800100c:	469a      	mov	sl, r3
 800100e:	464b      	mov	r3, r9
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d827      	bhi.n	8001064 <__aeabi_ddiv+0xdc>
 8001014:	49bc      	ldr	r1, [pc, #752]	; (8001308 <__aeabi_ddiv+0x380>)
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	58cb      	ldr	r3, [r1, r3]
 800101a:	469f      	mov	pc, r3
 800101c:	46b2      	mov	sl, r6
 800101e:	9b00      	ldr	r3, [sp, #0]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d016      	beq.n	8001052 <__aeabi_ddiv+0xca>
 8001024:	2b03      	cmp	r3, #3
 8001026:	d100      	bne.n	800102a <__aeabi_ddiv+0xa2>
 8001028:	e28e      	b.n	8001548 <__aeabi_ddiv+0x5c0>
 800102a:	2b01      	cmp	r3, #1
 800102c:	d000      	beq.n	8001030 <__aeabi_ddiv+0xa8>
 800102e:	e0d9      	b.n	80011e4 <__aeabi_ddiv+0x25c>
 8001030:	2300      	movs	r3, #0
 8001032:	2400      	movs	r4, #0
 8001034:	2500      	movs	r5, #0
 8001036:	4652      	mov	r2, sl
 8001038:	051b      	lsls	r3, r3, #20
 800103a:	4323      	orrs	r3, r4
 800103c:	07d2      	lsls	r2, r2, #31
 800103e:	4313      	orrs	r3, r2
 8001040:	0028      	movs	r0, r5
 8001042:	0019      	movs	r1, r3
 8001044:	b005      	add	sp, #20
 8001046:	bcf0      	pop	{r4, r5, r6, r7}
 8001048:	46bb      	mov	fp, r7
 800104a:	46b2      	mov	sl, r6
 800104c:	46a9      	mov	r9, r5
 800104e:	46a0      	mov	r8, r4
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001052:	2400      	movs	r4, #0
 8001054:	2500      	movs	r5, #0
 8001056:	4baa      	ldr	r3, [pc, #680]	; (8001300 <__aeabi_ddiv+0x378>)
 8001058:	e7ed      	b.n	8001036 <__aeabi_ddiv+0xae>
 800105a:	46ba      	mov	sl, r7
 800105c:	46a0      	mov	r8, r4
 800105e:	0015      	movs	r5, r2
 8001060:	9000      	str	r0, [sp, #0]
 8001062:	e7dc      	b.n	800101e <__aeabi_ddiv+0x96>
 8001064:	4544      	cmp	r4, r8
 8001066:	d200      	bcs.n	800106a <__aeabi_ddiv+0xe2>
 8001068:	e1c7      	b.n	80013fa <__aeabi_ddiv+0x472>
 800106a:	d100      	bne.n	800106e <__aeabi_ddiv+0xe6>
 800106c:	e1c2      	b.n	80013f4 <__aeabi_ddiv+0x46c>
 800106e:	2301      	movs	r3, #1
 8001070:	425b      	negs	r3, r3
 8001072:	469c      	mov	ip, r3
 8001074:	002e      	movs	r6, r5
 8001076:	4640      	mov	r0, r8
 8001078:	2500      	movs	r5, #0
 800107a:	44e3      	add	fp, ip
 800107c:	0223      	lsls	r3, r4, #8
 800107e:	0e14      	lsrs	r4, r2, #24
 8001080:	431c      	orrs	r4, r3
 8001082:	0c1b      	lsrs	r3, r3, #16
 8001084:	4699      	mov	r9, r3
 8001086:	0423      	lsls	r3, r4, #16
 8001088:	0c1f      	lsrs	r7, r3, #16
 800108a:	0212      	lsls	r2, r2, #8
 800108c:	4649      	mov	r1, r9
 800108e:	9200      	str	r2, [sp, #0]
 8001090:	9701      	str	r7, [sp, #4]
 8001092:	f7ff f8bf 	bl	8000214 <__aeabi_uidivmod>
 8001096:	0002      	movs	r2, r0
 8001098:	437a      	muls	r2, r7
 800109a:	040b      	lsls	r3, r1, #16
 800109c:	0c31      	lsrs	r1, r6, #16
 800109e:	4680      	mov	r8, r0
 80010a0:	4319      	orrs	r1, r3
 80010a2:	428a      	cmp	r2, r1
 80010a4:	d907      	bls.n	80010b6 <__aeabi_ddiv+0x12e>
 80010a6:	2301      	movs	r3, #1
 80010a8:	425b      	negs	r3, r3
 80010aa:	469c      	mov	ip, r3
 80010ac:	1909      	adds	r1, r1, r4
 80010ae:	44e0      	add	r8, ip
 80010b0:	428c      	cmp	r4, r1
 80010b2:	d800      	bhi.n	80010b6 <__aeabi_ddiv+0x12e>
 80010b4:	e207      	b.n	80014c6 <__aeabi_ddiv+0x53e>
 80010b6:	1a88      	subs	r0, r1, r2
 80010b8:	4649      	mov	r1, r9
 80010ba:	f7ff f8ab 	bl	8000214 <__aeabi_uidivmod>
 80010be:	0409      	lsls	r1, r1, #16
 80010c0:	468c      	mov	ip, r1
 80010c2:	0431      	lsls	r1, r6, #16
 80010c4:	4666      	mov	r6, ip
 80010c6:	9a01      	ldr	r2, [sp, #4]
 80010c8:	0c09      	lsrs	r1, r1, #16
 80010ca:	4342      	muls	r2, r0
 80010cc:	0003      	movs	r3, r0
 80010ce:	4331      	orrs	r1, r6
 80010d0:	428a      	cmp	r2, r1
 80010d2:	d904      	bls.n	80010de <__aeabi_ddiv+0x156>
 80010d4:	1909      	adds	r1, r1, r4
 80010d6:	3b01      	subs	r3, #1
 80010d8:	428c      	cmp	r4, r1
 80010da:	d800      	bhi.n	80010de <__aeabi_ddiv+0x156>
 80010dc:	e1ed      	b.n	80014ba <__aeabi_ddiv+0x532>
 80010de:	1a88      	subs	r0, r1, r2
 80010e0:	4642      	mov	r2, r8
 80010e2:	0412      	lsls	r2, r2, #16
 80010e4:	431a      	orrs	r2, r3
 80010e6:	4690      	mov	r8, r2
 80010e8:	4641      	mov	r1, r8
 80010ea:	9b00      	ldr	r3, [sp, #0]
 80010ec:	040e      	lsls	r6, r1, #16
 80010ee:	0c1b      	lsrs	r3, r3, #16
 80010f0:	001f      	movs	r7, r3
 80010f2:	9302      	str	r3, [sp, #8]
 80010f4:	9b00      	ldr	r3, [sp, #0]
 80010f6:	0c36      	lsrs	r6, r6, #16
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	0c19      	lsrs	r1, r3, #16
 80010fc:	000b      	movs	r3, r1
 80010fe:	4373      	muls	r3, r6
 8001100:	0c12      	lsrs	r2, r2, #16
 8001102:	437e      	muls	r6, r7
 8001104:	9103      	str	r1, [sp, #12]
 8001106:	4351      	muls	r1, r2
 8001108:	437a      	muls	r2, r7
 800110a:	0c1f      	lsrs	r7, r3, #16
 800110c:	46bc      	mov	ip, r7
 800110e:	1876      	adds	r6, r6, r1
 8001110:	4466      	add	r6, ip
 8001112:	42b1      	cmp	r1, r6
 8001114:	d903      	bls.n	800111e <__aeabi_ddiv+0x196>
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0249      	lsls	r1, r1, #9
 800111a:	468c      	mov	ip, r1
 800111c:	4462      	add	r2, ip
 800111e:	0c31      	lsrs	r1, r6, #16
 8001120:	188a      	adds	r2, r1, r2
 8001122:	0431      	lsls	r1, r6, #16
 8001124:	041e      	lsls	r6, r3, #16
 8001126:	0c36      	lsrs	r6, r6, #16
 8001128:	198e      	adds	r6, r1, r6
 800112a:	4290      	cmp	r0, r2
 800112c:	d302      	bcc.n	8001134 <__aeabi_ddiv+0x1ac>
 800112e:	d112      	bne.n	8001156 <__aeabi_ddiv+0x1ce>
 8001130:	42b5      	cmp	r5, r6
 8001132:	d210      	bcs.n	8001156 <__aeabi_ddiv+0x1ce>
 8001134:	4643      	mov	r3, r8
 8001136:	1e59      	subs	r1, r3, #1
 8001138:	9b00      	ldr	r3, [sp, #0]
 800113a:	469c      	mov	ip, r3
 800113c:	4465      	add	r5, ip
 800113e:	001f      	movs	r7, r3
 8001140:	429d      	cmp	r5, r3
 8001142:	419b      	sbcs	r3, r3
 8001144:	425b      	negs	r3, r3
 8001146:	191b      	adds	r3, r3, r4
 8001148:	18c0      	adds	r0, r0, r3
 800114a:	4284      	cmp	r4, r0
 800114c:	d200      	bcs.n	8001150 <__aeabi_ddiv+0x1c8>
 800114e:	e1a0      	b.n	8001492 <__aeabi_ddiv+0x50a>
 8001150:	d100      	bne.n	8001154 <__aeabi_ddiv+0x1cc>
 8001152:	e19b      	b.n	800148c <__aeabi_ddiv+0x504>
 8001154:	4688      	mov	r8, r1
 8001156:	1bae      	subs	r6, r5, r6
 8001158:	42b5      	cmp	r5, r6
 800115a:	41ad      	sbcs	r5, r5
 800115c:	1a80      	subs	r0, r0, r2
 800115e:	426d      	negs	r5, r5
 8001160:	1b40      	subs	r0, r0, r5
 8001162:	4284      	cmp	r4, r0
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x1e0>
 8001166:	e1d5      	b.n	8001514 <__aeabi_ddiv+0x58c>
 8001168:	4649      	mov	r1, r9
 800116a:	f7ff f853 	bl	8000214 <__aeabi_uidivmod>
 800116e:	9a01      	ldr	r2, [sp, #4]
 8001170:	040b      	lsls	r3, r1, #16
 8001172:	4342      	muls	r2, r0
 8001174:	0c31      	lsrs	r1, r6, #16
 8001176:	0005      	movs	r5, r0
 8001178:	4319      	orrs	r1, r3
 800117a:	428a      	cmp	r2, r1
 800117c:	d900      	bls.n	8001180 <__aeabi_ddiv+0x1f8>
 800117e:	e16c      	b.n	800145a <__aeabi_ddiv+0x4d2>
 8001180:	1a88      	subs	r0, r1, r2
 8001182:	4649      	mov	r1, r9
 8001184:	f7ff f846 	bl	8000214 <__aeabi_uidivmod>
 8001188:	9a01      	ldr	r2, [sp, #4]
 800118a:	0436      	lsls	r6, r6, #16
 800118c:	4342      	muls	r2, r0
 800118e:	0409      	lsls	r1, r1, #16
 8001190:	0c36      	lsrs	r6, r6, #16
 8001192:	0003      	movs	r3, r0
 8001194:	430e      	orrs	r6, r1
 8001196:	42b2      	cmp	r2, r6
 8001198:	d900      	bls.n	800119c <__aeabi_ddiv+0x214>
 800119a:	e153      	b.n	8001444 <__aeabi_ddiv+0x4bc>
 800119c:	9803      	ldr	r0, [sp, #12]
 800119e:	1ab6      	subs	r6, r6, r2
 80011a0:	0002      	movs	r2, r0
 80011a2:	042d      	lsls	r5, r5, #16
 80011a4:	431d      	orrs	r5, r3
 80011a6:	9f02      	ldr	r7, [sp, #8]
 80011a8:	042b      	lsls	r3, r5, #16
 80011aa:	0c1b      	lsrs	r3, r3, #16
 80011ac:	435a      	muls	r2, r3
 80011ae:	437b      	muls	r3, r7
 80011b0:	469c      	mov	ip, r3
 80011b2:	0c29      	lsrs	r1, r5, #16
 80011b4:	4348      	muls	r0, r1
 80011b6:	0c13      	lsrs	r3, r2, #16
 80011b8:	4484      	add	ip, r0
 80011ba:	4463      	add	r3, ip
 80011bc:	4379      	muls	r1, r7
 80011be:	4298      	cmp	r0, r3
 80011c0:	d903      	bls.n	80011ca <__aeabi_ddiv+0x242>
 80011c2:	2080      	movs	r0, #128	; 0x80
 80011c4:	0240      	lsls	r0, r0, #9
 80011c6:	4684      	mov	ip, r0
 80011c8:	4461      	add	r1, ip
 80011ca:	0c18      	lsrs	r0, r3, #16
 80011cc:	0412      	lsls	r2, r2, #16
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	0c12      	lsrs	r2, r2, #16
 80011d2:	1841      	adds	r1, r0, r1
 80011d4:	189b      	adds	r3, r3, r2
 80011d6:	428e      	cmp	r6, r1
 80011d8:	d200      	bcs.n	80011dc <__aeabi_ddiv+0x254>
 80011da:	e0ff      	b.n	80013dc <__aeabi_ddiv+0x454>
 80011dc:	d100      	bne.n	80011e0 <__aeabi_ddiv+0x258>
 80011de:	e0fa      	b.n	80013d6 <__aeabi_ddiv+0x44e>
 80011e0:	2301      	movs	r3, #1
 80011e2:	431d      	orrs	r5, r3
 80011e4:	4a49      	ldr	r2, [pc, #292]	; (800130c <__aeabi_ddiv+0x384>)
 80011e6:	445a      	add	r2, fp
 80011e8:	2a00      	cmp	r2, #0
 80011ea:	dc00      	bgt.n	80011ee <__aeabi_ddiv+0x266>
 80011ec:	e0aa      	b.n	8001344 <__aeabi_ddiv+0x3bc>
 80011ee:	076b      	lsls	r3, r5, #29
 80011f0:	d000      	beq.n	80011f4 <__aeabi_ddiv+0x26c>
 80011f2:	e13d      	b.n	8001470 <__aeabi_ddiv+0x4e8>
 80011f4:	08ed      	lsrs	r5, r5, #3
 80011f6:	4643      	mov	r3, r8
 80011f8:	01db      	lsls	r3, r3, #7
 80011fa:	d506      	bpl.n	800120a <__aeabi_ddiv+0x282>
 80011fc:	4642      	mov	r2, r8
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <__aeabi_ddiv+0x388>)
 8001200:	401a      	ands	r2, r3
 8001202:	4690      	mov	r8, r2
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	00d2      	lsls	r2, r2, #3
 8001208:	445a      	add	r2, fp
 800120a:	4b42      	ldr	r3, [pc, #264]	; (8001314 <__aeabi_ddiv+0x38c>)
 800120c:	429a      	cmp	r2, r3
 800120e:	dd00      	ble.n	8001212 <__aeabi_ddiv+0x28a>
 8001210:	e71f      	b.n	8001052 <__aeabi_ddiv+0xca>
 8001212:	4643      	mov	r3, r8
 8001214:	075b      	lsls	r3, r3, #29
 8001216:	431d      	orrs	r5, r3
 8001218:	4643      	mov	r3, r8
 800121a:	0552      	lsls	r2, r2, #21
 800121c:	025c      	lsls	r4, r3, #9
 800121e:	0b24      	lsrs	r4, r4, #12
 8001220:	0d53      	lsrs	r3, r2, #21
 8001222:	e708      	b.n	8001036 <__aeabi_ddiv+0xae>
 8001224:	4652      	mov	r2, sl
 8001226:	4322      	orrs	r2, r4
 8001228:	d100      	bne.n	800122c <__aeabi_ddiv+0x2a4>
 800122a:	e07b      	b.n	8001324 <__aeabi_ddiv+0x39c>
 800122c:	2c00      	cmp	r4, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x2aa>
 8001230:	e0fa      	b.n	8001428 <__aeabi_ddiv+0x4a0>
 8001232:	0020      	movs	r0, r4
 8001234:	f001 f9a4 	bl	8002580 <__clzsi2>
 8001238:	0002      	movs	r2, r0
 800123a:	3a0b      	subs	r2, #11
 800123c:	231d      	movs	r3, #29
 800123e:	0001      	movs	r1, r0
 8001240:	1a9b      	subs	r3, r3, r2
 8001242:	4652      	mov	r2, sl
 8001244:	3908      	subs	r1, #8
 8001246:	40da      	lsrs	r2, r3
 8001248:	408c      	lsls	r4, r1
 800124a:	4314      	orrs	r4, r2
 800124c:	4652      	mov	r2, sl
 800124e:	408a      	lsls	r2, r1
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <__aeabi_ddiv+0x390>)
 8001252:	4458      	add	r0, fp
 8001254:	469b      	mov	fp, r3
 8001256:	4483      	add	fp, r0
 8001258:	2000      	movs	r0, #0
 800125a:	e6d5      	b.n	8001008 <__aeabi_ddiv+0x80>
 800125c:	464b      	mov	r3, r9
 800125e:	4323      	orrs	r3, r4
 8001260:	4698      	mov	r8, r3
 8001262:	d044      	beq.n	80012ee <__aeabi_ddiv+0x366>
 8001264:	2c00      	cmp	r4, #0
 8001266:	d100      	bne.n	800126a <__aeabi_ddiv+0x2e2>
 8001268:	e0ce      	b.n	8001408 <__aeabi_ddiv+0x480>
 800126a:	0020      	movs	r0, r4
 800126c:	f001 f988 	bl	8002580 <__clzsi2>
 8001270:	0001      	movs	r1, r0
 8001272:	0002      	movs	r2, r0
 8001274:	390b      	subs	r1, #11
 8001276:	231d      	movs	r3, #29
 8001278:	1a5b      	subs	r3, r3, r1
 800127a:	4649      	mov	r1, r9
 800127c:	0010      	movs	r0, r2
 800127e:	40d9      	lsrs	r1, r3
 8001280:	3808      	subs	r0, #8
 8001282:	4084      	lsls	r4, r0
 8001284:	000b      	movs	r3, r1
 8001286:	464d      	mov	r5, r9
 8001288:	4323      	orrs	r3, r4
 800128a:	4698      	mov	r8, r3
 800128c:	4085      	lsls	r5, r0
 800128e:	4823      	ldr	r0, [pc, #140]	; (800131c <__aeabi_ddiv+0x394>)
 8001290:	1a83      	subs	r3, r0, r2
 8001292:	469b      	mov	fp, r3
 8001294:	2300      	movs	r3, #0
 8001296:	4699      	mov	r9, r3
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	e69a      	b.n	8000fd2 <__aeabi_ddiv+0x4a>
 800129c:	464b      	mov	r3, r9
 800129e:	4323      	orrs	r3, r4
 80012a0:	4698      	mov	r8, r3
 80012a2:	d11d      	bne.n	80012e0 <__aeabi_ddiv+0x358>
 80012a4:	2308      	movs	r3, #8
 80012a6:	4699      	mov	r9, r3
 80012a8:	3b06      	subs	r3, #6
 80012aa:	2500      	movs	r5, #0
 80012ac:	4683      	mov	fp, r0
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	e68f      	b.n	8000fd2 <__aeabi_ddiv+0x4a>
 80012b2:	4652      	mov	r2, sl
 80012b4:	4322      	orrs	r2, r4
 80012b6:	d109      	bne.n	80012cc <__aeabi_ddiv+0x344>
 80012b8:	2302      	movs	r3, #2
 80012ba:	4649      	mov	r1, r9
 80012bc:	4319      	orrs	r1, r3
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <__aeabi_ddiv+0x398>)
 80012c0:	4689      	mov	r9, r1
 80012c2:	469c      	mov	ip, r3
 80012c4:	2400      	movs	r4, #0
 80012c6:	2002      	movs	r0, #2
 80012c8:	44e3      	add	fp, ip
 80012ca:	e69d      	b.n	8001008 <__aeabi_ddiv+0x80>
 80012cc:	2303      	movs	r3, #3
 80012ce:	464a      	mov	r2, r9
 80012d0:	431a      	orrs	r2, r3
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <__aeabi_ddiv+0x398>)
 80012d4:	4691      	mov	r9, r2
 80012d6:	469c      	mov	ip, r3
 80012d8:	4652      	mov	r2, sl
 80012da:	2003      	movs	r0, #3
 80012dc:	44e3      	add	fp, ip
 80012de:	e693      	b.n	8001008 <__aeabi_ddiv+0x80>
 80012e0:	230c      	movs	r3, #12
 80012e2:	4699      	mov	r9, r3
 80012e4:	3b09      	subs	r3, #9
 80012e6:	46a0      	mov	r8, r4
 80012e8:	4683      	mov	fp, r0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	e671      	b.n	8000fd2 <__aeabi_ddiv+0x4a>
 80012ee:	2304      	movs	r3, #4
 80012f0:	4699      	mov	r9, r3
 80012f2:	2300      	movs	r3, #0
 80012f4:	469b      	mov	fp, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	2500      	movs	r5, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	e669      	b.n	8000fd2 <__aeabi_ddiv+0x4a>
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	000007ff 	.word	0x000007ff
 8001304:	fffffc01 	.word	0xfffffc01
 8001308:	0800533c 	.word	0x0800533c
 800130c:	000003ff 	.word	0x000003ff
 8001310:	feffffff 	.word	0xfeffffff
 8001314:	000007fe 	.word	0x000007fe
 8001318:	000003f3 	.word	0x000003f3
 800131c:	fffffc0d 	.word	0xfffffc0d
 8001320:	fffff801 	.word	0xfffff801
 8001324:	4649      	mov	r1, r9
 8001326:	2301      	movs	r3, #1
 8001328:	4319      	orrs	r1, r3
 800132a:	4689      	mov	r9, r1
 800132c:	2400      	movs	r4, #0
 800132e:	2001      	movs	r0, #1
 8001330:	e66a      	b.n	8001008 <__aeabi_ddiv+0x80>
 8001332:	2300      	movs	r3, #0
 8001334:	2480      	movs	r4, #128	; 0x80
 8001336:	469a      	mov	sl, r3
 8001338:	2500      	movs	r5, #0
 800133a:	4b8a      	ldr	r3, [pc, #552]	; (8001564 <__aeabi_ddiv+0x5dc>)
 800133c:	0324      	lsls	r4, r4, #12
 800133e:	e67a      	b.n	8001036 <__aeabi_ddiv+0xae>
 8001340:	2501      	movs	r5, #1
 8001342:	426d      	negs	r5, r5
 8001344:	2301      	movs	r3, #1
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	2b38      	cmp	r3, #56	; 0x38
 800134a:	dd00      	ble.n	800134e <__aeabi_ddiv+0x3c6>
 800134c:	e670      	b.n	8001030 <__aeabi_ddiv+0xa8>
 800134e:	2b1f      	cmp	r3, #31
 8001350:	dc00      	bgt.n	8001354 <__aeabi_ddiv+0x3cc>
 8001352:	e0bf      	b.n	80014d4 <__aeabi_ddiv+0x54c>
 8001354:	211f      	movs	r1, #31
 8001356:	4249      	negs	r1, r1
 8001358:	1a8a      	subs	r2, r1, r2
 800135a:	4641      	mov	r1, r8
 800135c:	40d1      	lsrs	r1, r2
 800135e:	000a      	movs	r2, r1
 8001360:	2b20      	cmp	r3, #32
 8001362:	d004      	beq.n	800136e <__aeabi_ddiv+0x3e6>
 8001364:	4641      	mov	r1, r8
 8001366:	4b80      	ldr	r3, [pc, #512]	; (8001568 <__aeabi_ddiv+0x5e0>)
 8001368:	445b      	add	r3, fp
 800136a:	4099      	lsls	r1, r3
 800136c:	430d      	orrs	r5, r1
 800136e:	1e6b      	subs	r3, r5, #1
 8001370:	419d      	sbcs	r5, r3
 8001372:	2307      	movs	r3, #7
 8001374:	432a      	orrs	r2, r5
 8001376:	001d      	movs	r5, r3
 8001378:	2400      	movs	r4, #0
 800137a:	4015      	ands	r5, r2
 800137c:	4213      	tst	r3, r2
 800137e:	d100      	bne.n	8001382 <__aeabi_ddiv+0x3fa>
 8001380:	e0d4      	b.n	800152c <__aeabi_ddiv+0x5a4>
 8001382:	210f      	movs	r1, #15
 8001384:	2300      	movs	r3, #0
 8001386:	4011      	ands	r1, r2
 8001388:	2904      	cmp	r1, #4
 800138a:	d100      	bne.n	800138e <__aeabi_ddiv+0x406>
 800138c:	e0cb      	b.n	8001526 <__aeabi_ddiv+0x59e>
 800138e:	1d11      	adds	r1, r2, #4
 8001390:	4291      	cmp	r1, r2
 8001392:	4192      	sbcs	r2, r2
 8001394:	4252      	negs	r2, r2
 8001396:	189b      	adds	r3, r3, r2
 8001398:	000a      	movs	r2, r1
 800139a:	0219      	lsls	r1, r3, #8
 800139c:	d400      	bmi.n	80013a0 <__aeabi_ddiv+0x418>
 800139e:	e0c2      	b.n	8001526 <__aeabi_ddiv+0x59e>
 80013a0:	2301      	movs	r3, #1
 80013a2:	2400      	movs	r4, #0
 80013a4:	2500      	movs	r5, #0
 80013a6:	e646      	b.n	8001036 <__aeabi_ddiv+0xae>
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	4641      	mov	r1, r8
 80013ac:	031b      	lsls	r3, r3, #12
 80013ae:	4219      	tst	r1, r3
 80013b0:	d008      	beq.n	80013c4 <__aeabi_ddiv+0x43c>
 80013b2:	421c      	tst	r4, r3
 80013b4:	d106      	bne.n	80013c4 <__aeabi_ddiv+0x43c>
 80013b6:	431c      	orrs	r4, r3
 80013b8:	0324      	lsls	r4, r4, #12
 80013ba:	46ba      	mov	sl, r7
 80013bc:	0015      	movs	r5, r2
 80013be:	4b69      	ldr	r3, [pc, #420]	; (8001564 <__aeabi_ddiv+0x5dc>)
 80013c0:	0b24      	lsrs	r4, r4, #12
 80013c2:	e638      	b.n	8001036 <__aeabi_ddiv+0xae>
 80013c4:	2480      	movs	r4, #128	; 0x80
 80013c6:	4643      	mov	r3, r8
 80013c8:	0324      	lsls	r4, r4, #12
 80013ca:	431c      	orrs	r4, r3
 80013cc:	0324      	lsls	r4, r4, #12
 80013ce:	46b2      	mov	sl, r6
 80013d0:	4b64      	ldr	r3, [pc, #400]	; (8001564 <__aeabi_ddiv+0x5dc>)
 80013d2:	0b24      	lsrs	r4, r4, #12
 80013d4:	e62f      	b.n	8001036 <__aeabi_ddiv+0xae>
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d100      	bne.n	80013dc <__aeabi_ddiv+0x454>
 80013da:	e703      	b.n	80011e4 <__aeabi_ddiv+0x25c>
 80013dc:	19a6      	adds	r6, r4, r6
 80013de:	1e68      	subs	r0, r5, #1
 80013e0:	42a6      	cmp	r6, r4
 80013e2:	d200      	bcs.n	80013e6 <__aeabi_ddiv+0x45e>
 80013e4:	e08d      	b.n	8001502 <__aeabi_ddiv+0x57a>
 80013e6:	428e      	cmp	r6, r1
 80013e8:	d200      	bcs.n	80013ec <__aeabi_ddiv+0x464>
 80013ea:	e0a3      	b.n	8001534 <__aeabi_ddiv+0x5ac>
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x468>
 80013ee:	e0b3      	b.n	8001558 <__aeabi_ddiv+0x5d0>
 80013f0:	0005      	movs	r5, r0
 80013f2:	e6f5      	b.n	80011e0 <__aeabi_ddiv+0x258>
 80013f4:	42aa      	cmp	r2, r5
 80013f6:	d900      	bls.n	80013fa <__aeabi_ddiv+0x472>
 80013f8:	e639      	b.n	800106e <__aeabi_ddiv+0xe6>
 80013fa:	4643      	mov	r3, r8
 80013fc:	07de      	lsls	r6, r3, #31
 80013fe:	0858      	lsrs	r0, r3, #1
 8001400:	086b      	lsrs	r3, r5, #1
 8001402:	431e      	orrs	r6, r3
 8001404:	07ed      	lsls	r5, r5, #31
 8001406:	e639      	b.n	800107c <__aeabi_ddiv+0xf4>
 8001408:	4648      	mov	r0, r9
 800140a:	f001 f8b9 	bl	8002580 <__clzsi2>
 800140e:	0001      	movs	r1, r0
 8001410:	0002      	movs	r2, r0
 8001412:	3115      	adds	r1, #21
 8001414:	3220      	adds	r2, #32
 8001416:	291c      	cmp	r1, #28
 8001418:	dc00      	bgt.n	800141c <__aeabi_ddiv+0x494>
 800141a:	e72c      	b.n	8001276 <__aeabi_ddiv+0x2ee>
 800141c:	464b      	mov	r3, r9
 800141e:	3808      	subs	r0, #8
 8001420:	4083      	lsls	r3, r0
 8001422:	2500      	movs	r5, #0
 8001424:	4698      	mov	r8, r3
 8001426:	e732      	b.n	800128e <__aeabi_ddiv+0x306>
 8001428:	f001 f8aa 	bl	8002580 <__clzsi2>
 800142c:	0003      	movs	r3, r0
 800142e:	001a      	movs	r2, r3
 8001430:	3215      	adds	r2, #21
 8001432:	3020      	adds	r0, #32
 8001434:	2a1c      	cmp	r2, #28
 8001436:	dc00      	bgt.n	800143a <__aeabi_ddiv+0x4b2>
 8001438:	e700      	b.n	800123c <__aeabi_ddiv+0x2b4>
 800143a:	4654      	mov	r4, sl
 800143c:	3b08      	subs	r3, #8
 800143e:	2200      	movs	r2, #0
 8001440:	409c      	lsls	r4, r3
 8001442:	e705      	b.n	8001250 <__aeabi_ddiv+0x2c8>
 8001444:	1936      	adds	r6, r6, r4
 8001446:	3b01      	subs	r3, #1
 8001448:	42b4      	cmp	r4, r6
 800144a:	d900      	bls.n	800144e <__aeabi_ddiv+0x4c6>
 800144c:	e6a6      	b.n	800119c <__aeabi_ddiv+0x214>
 800144e:	42b2      	cmp	r2, r6
 8001450:	d800      	bhi.n	8001454 <__aeabi_ddiv+0x4cc>
 8001452:	e6a3      	b.n	800119c <__aeabi_ddiv+0x214>
 8001454:	1e83      	subs	r3, r0, #2
 8001456:	1936      	adds	r6, r6, r4
 8001458:	e6a0      	b.n	800119c <__aeabi_ddiv+0x214>
 800145a:	1909      	adds	r1, r1, r4
 800145c:	3d01      	subs	r5, #1
 800145e:	428c      	cmp	r4, r1
 8001460:	d900      	bls.n	8001464 <__aeabi_ddiv+0x4dc>
 8001462:	e68d      	b.n	8001180 <__aeabi_ddiv+0x1f8>
 8001464:	428a      	cmp	r2, r1
 8001466:	d800      	bhi.n	800146a <__aeabi_ddiv+0x4e2>
 8001468:	e68a      	b.n	8001180 <__aeabi_ddiv+0x1f8>
 800146a:	1e85      	subs	r5, r0, #2
 800146c:	1909      	adds	r1, r1, r4
 800146e:	e687      	b.n	8001180 <__aeabi_ddiv+0x1f8>
 8001470:	230f      	movs	r3, #15
 8001472:	402b      	ands	r3, r5
 8001474:	2b04      	cmp	r3, #4
 8001476:	d100      	bne.n	800147a <__aeabi_ddiv+0x4f2>
 8001478:	e6bc      	b.n	80011f4 <__aeabi_ddiv+0x26c>
 800147a:	2305      	movs	r3, #5
 800147c:	425b      	negs	r3, r3
 800147e:	42ab      	cmp	r3, r5
 8001480:	419b      	sbcs	r3, r3
 8001482:	3504      	adds	r5, #4
 8001484:	425b      	negs	r3, r3
 8001486:	08ed      	lsrs	r5, r5, #3
 8001488:	4498      	add	r8, r3
 800148a:	e6b4      	b.n	80011f6 <__aeabi_ddiv+0x26e>
 800148c:	42af      	cmp	r7, r5
 800148e:	d900      	bls.n	8001492 <__aeabi_ddiv+0x50a>
 8001490:	e660      	b.n	8001154 <__aeabi_ddiv+0x1cc>
 8001492:	4282      	cmp	r2, r0
 8001494:	d804      	bhi.n	80014a0 <__aeabi_ddiv+0x518>
 8001496:	d000      	beq.n	800149a <__aeabi_ddiv+0x512>
 8001498:	e65c      	b.n	8001154 <__aeabi_ddiv+0x1cc>
 800149a:	42ae      	cmp	r6, r5
 800149c:	d800      	bhi.n	80014a0 <__aeabi_ddiv+0x518>
 800149e:	e659      	b.n	8001154 <__aeabi_ddiv+0x1cc>
 80014a0:	2302      	movs	r3, #2
 80014a2:	425b      	negs	r3, r3
 80014a4:	469c      	mov	ip, r3
 80014a6:	9b00      	ldr	r3, [sp, #0]
 80014a8:	44e0      	add	r8, ip
 80014aa:	469c      	mov	ip, r3
 80014ac:	4465      	add	r5, ip
 80014ae:	429d      	cmp	r5, r3
 80014b0:	419b      	sbcs	r3, r3
 80014b2:	425b      	negs	r3, r3
 80014b4:	191b      	adds	r3, r3, r4
 80014b6:	18c0      	adds	r0, r0, r3
 80014b8:	e64d      	b.n	8001156 <__aeabi_ddiv+0x1ce>
 80014ba:	428a      	cmp	r2, r1
 80014bc:	d800      	bhi.n	80014c0 <__aeabi_ddiv+0x538>
 80014be:	e60e      	b.n	80010de <__aeabi_ddiv+0x156>
 80014c0:	1e83      	subs	r3, r0, #2
 80014c2:	1909      	adds	r1, r1, r4
 80014c4:	e60b      	b.n	80010de <__aeabi_ddiv+0x156>
 80014c6:	428a      	cmp	r2, r1
 80014c8:	d800      	bhi.n	80014cc <__aeabi_ddiv+0x544>
 80014ca:	e5f4      	b.n	80010b6 <__aeabi_ddiv+0x12e>
 80014cc:	1e83      	subs	r3, r0, #2
 80014ce:	4698      	mov	r8, r3
 80014d0:	1909      	adds	r1, r1, r4
 80014d2:	e5f0      	b.n	80010b6 <__aeabi_ddiv+0x12e>
 80014d4:	4925      	ldr	r1, [pc, #148]	; (800156c <__aeabi_ddiv+0x5e4>)
 80014d6:	0028      	movs	r0, r5
 80014d8:	4459      	add	r1, fp
 80014da:	408d      	lsls	r5, r1
 80014dc:	4642      	mov	r2, r8
 80014de:	408a      	lsls	r2, r1
 80014e0:	1e69      	subs	r1, r5, #1
 80014e2:	418d      	sbcs	r5, r1
 80014e4:	4641      	mov	r1, r8
 80014e6:	40d8      	lsrs	r0, r3
 80014e8:	40d9      	lsrs	r1, r3
 80014ea:	4302      	orrs	r2, r0
 80014ec:	432a      	orrs	r2, r5
 80014ee:	000b      	movs	r3, r1
 80014f0:	0751      	lsls	r1, r2, #29
 80014f2:	d100      	bne.n	80014f6 <__aeabi_ddiv+0x56e>
 80014f4:	e751      	b.n	800139a <__aeabi_ddiv+0x412>
 80014f6:	210f      	movs	r1, #15
 80014f8:	4011      	ands	r1, r2
 80014fa:	2904      	cmp	r1, #4
 80014fc:	d000      	beq.n	8001500 <__aeabi_ddiv+0x578>
 80014fe:	e746      	b.n	800138e <__aeabi_ddiv+0x406>
 8001500:	e74b      	b.n	800139a <__aeabi_ddiv+0x412>
 8001502:	0005      	movs	r5, r0
 8001504:	428e      	cmp	r6, r1
 8001506:	d000      	beq.n	800150a <__aeabi_ddiv+0x582>
 8001508:	e66a      	b.n	80011e0 <__aeabi_ddiv+0x258>
 800150a:	9a00      	ldr	r2, [sp, #0]
 800150c:	4293      	cmp	r3, r2
 800150e:	d000      	beq.n	8001512 <__aeabi_ddiv+0x58a>
 8001510:	e666      	b.n	80011e0 <__aeabi_ddiv+0x258>
 8001512:	e667      	b.n	80011e4 <__aeabi_ddiv+0x25c>
 8001514:	4a16      	ldr	r2, [pc, #88]	; (8001570 <__aeabi_ddiv+0x5e8>)
 8001516:	445a      	add	r2, fp
 8001518:	2a00      	cmp	r2, #0
 800151a:	dc00      	bgt.n	800151e <__aeabi_ddiv+0x596>
 800151c:	e710      	b.n	8001340 <__aeabi_ddiv+0x3b8>
 800151e:	2301      	movs	r3, #1
 8001520:	2500      	movs	r5, #0
 8001522:	4498      	add	r8, r3
 8001524:	e667      	b.n	80011f6 <__aeabi_ddiv+0x26e>
 8001526:	075d      	lsls	r5, r3, #29
 8001528:	025b      	lsls	r3, r3, #9
 800152a:	0b1c      	lsrs	r4, r3, #12
 800152c:	08d2      	lsrs	r2, r2, #3
 800152e:	2300      	movs	r3, #0
 8001530:	4315      	orrs	r5, r2
 8001532:	e580      	b.n	8001036 <__aeabi_ddiv+0xae>
 8001534:	9800      	ldr	r0, [sp, #0]
 8001536:	3d02      	subs	r5, #2
 8001538:	0042      	lsls	r2, r0, #1
 800153a:	4282      	cmp	r2, r0
 800153c:	41bf      	sbcs	r7, r7
 800153e:	427f      	negs	r7, r7
 8001540:	193c      	adds	r4, r7, r4
 8001542:	1936      	adds	r6, r6, r4
 8001544:	9200      	str	r2, [sp, #0]
 8001546:	e7dd      	b.n	8001504 <__aeabi_ddiv+0x57c>
 8001548:	2480      	movs	r4, #128	; 0x80
 800154a:	4643      	mov	r3, r8
 800154c:	0324      	lsls	r4, r4, #12
 800154e:	431c      	orrs	r4, r3
 8001550:	0324      	lsls	r4, r4, #12
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <__aeabi_ddiv+0x5dc>)
 8001554:	0b24      	lsrs	r4, r4, #12
 8001556:	e56e      	b.n	8001036 <__aeabi_ddiv+0xae>
 8001558:	9a00      	ldr	r2, [sp, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d3ea      	bcc.n	8001534 <__aeabi_ddiv+0x5ac>
 800155e:	0005      	movs	r5, r0
 8001560:	e7d3      	b.n	800150a <__aeabi_ddiv+0x582>
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	000007ff 	.word	0x000007ff
 8001568:	0000043e 	.word	0x0000043e
 800156c:	0000041e 	.word	0x0000041e
 8001570:	000003ff 	.word	0x000003ff

08001574 <__eqdf2>:
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	464e      	mov	r6, r9
 8001578:	4645      	mov	r5, r8
 800157a:	46de      	mov	lr, fp
 800157c:	4657      	mov	r7, sl
 800157e:	4690      	mov	r8, r2
 8001580:	b5e0      	push	{r5, r6, r7, lr}
 8001582:	0017      	movs	r7, r2
 8001584:	031a      	lsls	r2, r3, #12
 8001586:	0b12      	lsrs	r2, r2, #12
 8001588:	0005      	movs	r5, r0
 800158a:	4684      	mov	ip, r0
 800158c:	4819      	ldr	r0, [pc, #100]	; (80015f4 <__eqdf2+0x80>)
 800158e:	030e      	lsls	r6, r1, #12
 8001590:	004c      	lsls	r4, r1, #1
 8001592:	4691      	mov	r9, r2
 8001594:	005a      	lsls	r2, r3, #1
 8001596:	0fdb      	lsrs	r3, r3, #31
 8001598:	469b      	mov	fp, r3
 800159a:	0b36      	lsrs	r6, r6, #12
 800159c:	0d64      	lsrs	r4, r4, #21
 800159e:	0fc9      	lsrs	r1, r1, #31
 80015a0:	0d52      	lsrs	r2, r2, #21
 80015a2:	4284      	cmp	r4, r0
 80015a4:	d019      	beq.n	80015da <__eqdf2+0x66>
 80015a6:	4282      	cmp	r2, r0
 80015a8:	d010      	beq.n	80015cc <__eqdf2+0x58>
 80015aa:	2001      	movs	r0, #1
 80015ac:	4294      	cmp	r4, r2
 80015ae:	d10e      	bne.n	80015ce <__eqdf2+0x5a>
 80015b0:	454e      	cmp	r6, r9
 80015b2:	d10c      	bne.n	80015ce <__eqdf2+0x5a>
 80015b4:	2001      	movs	r0, #1
 80015b6:	45c4      	cmp	ip, r8
 80015b8:	d109      	bne.n	80015ce <__eqdf2+0x5a>
 80015ba:	4559      	cmp	r1, fp
 80015bc:	d017      	beq.n	80015ee <__eqdf2+0x7a>
 80015be:	2c00      	cmp	r4, #0
 80015c0:	d105      	bne.n	80015ce <__eqdf2+0x5a>
 80015c2:	0030      	movs	r0, r6
 80015c4:	4328      	orrs	r0, r5
 80015c6:	1e43      	subs	r3, r0, #1
 80015c8:	4198      	sbcs	r0, r3
 80015ca:	e000      	b.n	80015ce <__eqdf2+0x5a>
 80015cc:	2001      	movs	r0, #1
 80015ce:	bcf0      	pop	{r4, r5, r6, r7}
 80015d0:	46bb      	mov	fp, r7
 80015d2:	46b2      	mov	sl, r6
 80015d4:	46a9      	mov	r9, r5
 80015d6:	46a0      	mov	r8, r4
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	0033      	movs	r3, r6
 80015dc:	2001      	movs	r0, #1
 80015de:	432b      	orrs	r3, r5
 80015e0:	d1f5      	bne.n	80015ce <__eqdf2+0x5a>
 80015e2:	42a2      	cmp	r2, r4
 80015e4:	d1f3      	bne.n	80015ce <__eqdf2+0x5a>
 80015e6:	464b      	mov	r3, r9
 80015e8:	433b      	orrs	r3, r7
 80015ea:	d1f0      	bne.n	80015ce <__eqdf2+0x5a>
 80015ec:	e7e2      	b.n	80015b4 <__eqdf2+0x40>
 80015ee:	2000      	movs	r0, #0
 80015f0:	e7ed      	b.n	80015ce <__eqdf2+0x5a>
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	000007ff 	.word	0x000007ff

080015f8 <__gedf2>:
 80015f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fa:	4647      	mov	r7, r8
 80015fc:	46ce      	mov	lr, r9
 80015fe:	0004      	movs	r4, r0
 8001600:	0018      	movs	r0, r3
 8001602:	0016      	movs	r6, r2
 8001604:	031b      	lsls	r3, r3, #12
 8001606:	0b1b      	lsrs	r3, r3, #12
 8001608:	4d2d      	ldr	r5, [pc, #180]	; (80016c0 <__gedf2+0xc8>)
 800160a:	004a      	lsls	r2, r1, #1
 800160c:	4699      	mov	r9, r3
 800160e:	b580      	push	{r7, lr}
 8001610:	0043      	lsls	r3, r0, #1
 8001612:	030f      	lsls	r7, r1, #12
 8001614:	46a4      	mov	ip, r4
 8001616:	46b0      	mov	r8, r6
 8001618:	0b3f      	lsrs	r7, r7, #12
 800161a:	0d52      	lsrs	r2, r2, #21
 800161c:	0fc9      	lsrs	r1, r1, #31
 800161e:	0d5b      	lsrs	r3, r3, #21
 8001620:	0fc0      	lsrs	r0, r0, #31
 8001622:	42aa      	cmp	r2, r5
 8001624:	d021      	beq.n	800166a <__gedf2+0x72>
 8001626:	42ab      	cmp	r3, r5
 8001628:	d013      	beq.n	8001652 <__gedf2+0x5a>
 800162a:	2a00      	cmp	r2, #0
 800162c:	d122      	bne.n	8001674 <__gedf2+0x7c>
 800162e:	433c      	orrs	r4, r7
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <__gedf2+0x42>
 8001634:	464d      	mov	r5, r9
 8001636:	432e      	orrs	r6, r5
 8001638:	d022      	beq.n	8001680 <__gedf2+0x88>
 800163a:	2c00      	cmp	r4, #0
 800163c:	d010      	beq.n	8001660 <__gedf2+0x68>
 800163e:	4281      	cmp	r1, r0
 8001640:	d022      	beq.n	8001688 <__gedf2+0x90>
 8001642:	2002      	movs	r0, #2
 8001644:	3901      	subs	r1, #1
 8001646:	4008      	ands	r0, r1
 8001648:	3801      	subs	r0, #1
 800164a:	bcc0      	pop	{r6, r7}
 800164c:	46b9      	mov	r9, r7
 800164e:	46b0      	mov	r8, r6
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001652:	464d      	mov	r5, r9
 8001654:	432e      	orrs	r6, r5
 8001656:	d129      	bne.n	80016ac <__gedf2+0xb4>
 8001658:	2a00      	cmp	r2, #0
 800165a:	d1f0      	bne.n	800163e <__gedf2+0x46>
 800165c:	433c      	orrs	r4, r7
 800165e:	d1ee      	bne.n	800163e <__gedf2+0x46>
 8001660:	2800      	cmp	r0, #0
 8001662:	d1f2      	bne.n	800164a <__gedf2+0x52>
 8001664:	2001      	movs	r0, #1
 8001666:	4240      	negs	r0, r0
 8001668:	e7ef      	b.n	800164a <__gedf2+0x52>
 800166a:	003d      	movs	r5, r7
 800166c:	4325      	orrs	r5, r4
 800166e:	d11d      	bne.n	80016ac <__gedf2+0xb4>
 8001670:	4293      	cmp	r3, r2
 8001672:	d0ee      	beq.n	8001652 <__gedf2+0x5a>
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1e2      	bne.n	800163e <__gedf2+0x46>
 8001678:	464c      	mov	r4, r9
 800167a:	4326      	orrs	r6, r4
 800167c:	d1df      	bne.n	800163e <__gedf2+0x46>
 800167e:	e7e0      	b.n	8001642 <__gedf2+0x4a>
 8001680:	2000      	movs	r0, #0
 8001682:	2c00      	cmp	r4, #0
 8001684:	d0e1      	beq.n	800164a <__gedf2+0x52>
 8001686:	e7dc      	b.n	8001642 <__gedf2+0x4a>
 8001688:	429a      	cmp	r2, r3
 800168a:	dc0a      	bgt.n	80016a2 <__gedf2+0xaa>
 800168c:	dbe8      	blt.n	8001660 <__gedf2+0x68>
 800168e:	454f      	cmp	r7, r9
 8001690:	d8d7      	bhi.n	8001642 <__gedf2+0x4a>
 8001692:	d00e      	beq.n	80016b2 <__gedf2+0xba>
 8001694:	2000      	movs	r0, #0
 8001696:	454f      	cmp	r7, r9
 8001698:	d2d7      	bcs.n	800164a <__gedf2+0x52>
 800169a:	2900      	cmp	r1, #0
 800169c:	d0e2      	beq.n	8001664 <__gedf2+0x6c>
 800169e:	0008      	movs	r0, r1
 80016a0:	e7d3      	b.n	800164a <__gedf2+0x52>
 80016a2:	4243      	negs	r3, r0
 80016a4:	4158      	adcs	r0, r3
 80016a6:	0040      	lsls	r0, r0, #1
 80016a8:	3801      	subs	r0, #1
 80016aa:	e7ce      	b.n	800164a <__gedf2+0x52>
 80016ac:	2002      	movs	r0, #2
 80016ae:	4240      	negs	r0, r0
 80016b0:	e7cb      	b.n	800164a <__gedf2+0x52>
 80016b2:	45c4      	cmp	ip, r8
 80016b4:	d8c5      	bhi.n	8001642 <__gedf2+0x4a>
 80016b6:	2000      	movs	r0, #0
 80016b8:	45c4      	cmp	ip, r8
 80016ba:	d2c6      	bcs.n	800164a <__gedf2+0x52>
 80016bc:	e7ed      	b.n	800169a <__gedf2+0xa2>
 80016be:	46c0      	nop			; (mov r8, r8)
 80016c0:	000007ff 	.word	0x000007ff

080016c4 <__ledf2>:
 80016c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c6:	4647      	mov	r7, r8
 80016c8:	46ce      	mov	lr, r9
 80016ca:	0004      	movs	r4, r0
 80016cc:	0018      	movs	r0, r3
 80016ce:	0016      	movs	r6, r2
 80016d0:	031b      	lsls	r3, r3, #12
 80016d2:	0b1b      	lsrs	r3, r3, #12
 80016d4:	4d2c      	ldr	r5, [pc, #176]	; (8001788 <__ledf2+0xc4>)
 80016d6:	004a      	lsls	r2, r1, #1
 80016d8:	4699      	mov	r9, r3
 80016da:	b580      	push	{r7, lr}
 80016dc:	0043      	lsls	r3, r0, #1
 80016de:	030f      	lsls	r7, r1, #12
 80016e0:	46a4      	mov	ip, r4
 80016e2:	46b0      	mov	r8, r6
 80016e4:	0b3f      	lsrs	r7, r7, #12
 80016e6:	0d52      	lsrs	r2, r2, #21
 80016e8:	0fc9      	lsrs	r1, r1, #31
 80016ea:	0d5b      	lsrs	r3, r3, #21
 80016ec:	0fc0      	lsrs	r0, r0, #31
 80016ee:	42aa      	cmp	r2, r5
 80016f0:	d00d      	beq.n	800170e <__ledf2+0x4a>
 80016f2:	42ab      	cmp	r3, r5
 80016f4:	d010      	beq.n	8001718 <__ledf2+0x54>
 80016f6:	2a00      	cmp	r2, #0
 80016f8:	d127      	bne.n	800174a <__ledf2+0x86>
 80016fa:	433c      	orrs	r4, r7
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <__ledf2+0x60>
 8001700:	464d      	mov	r5, r9
 8001702:	432e      	orrs	r6, r5
 8001704:	d10e      	bne.n	8001724 <__ledf2+0x60>
 8001706:	2000      	movs	r0, #0
 8001708:	2c00      	cmp	r4, #0
 800170a:	d015      	beq.n	8001738 <__ledf2+0x74>
 800170c:	e00e      	b.n	800172c <__ledf2+0x68>
 800170e:	003d      	movs	r5, r7
 8001710:	4325      	orrs	r5, r4
 8001712:	d110      	bne.n	8001736 <__ledf2+0x72>
 8001714:	4293      	cmp	r3, r2
 8001716:	d118      	bne.n	800174a <__ledf2+0x86>
 8001718:	464d      	mov	r5, r9
 800171a:	432e      	orrs	r6, r5
 800171c:	d10b      	bne.n	8001736 <__ledf2+0x72>
 800171e:	2a00      	cmp	r2, #0
 8001720:	d102      	bne.n	8001728 <__ledf2+0x64>
 8001722:	433c      	orrs	r4, r7
 8001724:	2c00      	cmp	r4, #0
 8001726:	d00b      	beq.n	8001740 <__ledf2+0x7c>
 8001728:	4281      	cmp	r1, r0
 800172a:	d014      	beq.n	8001756 <__ledf2+0x92>
 800172c:	2002      	movs	r0, #2
 800172e:	3901      	subs	r1, #1
 8001730:	4008      	ands	r0, r1
 8001732:	3801      	subs	r0, #1
 8001734:	e000      	b.n	8001738 <__ledf2+0x74>
 8001736:	2002      	movs	r0, #2
 8001738:	bcc0      	pop	{r6, r7}
 800173a:	46b9      	mov	r9, r7
 800173c:	46b0      	mov	r8, r6
 800173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001740:	2800      	cmp	r0, #0
 8001742:	d1f9      	bne.n	8001738 <__ledf2+0x74>
 8001744:	2001      	movs	r0, #1
 8001746:	4240      	negs	r0, r0
 8001748:	e7f6      	b.n	8001738 <__ledf2+0x74>
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ec      	bne.n	8001728 <__ledf2+0x64>
 800174e:	464c      	mov	r4, r9
 8001750:	4326      	orrs	r6, r4
 8001752:	d1e9      	bne.n	8001728 <__ledf2+0x64>
 8001754:	e7ea      	b.n	800172c <__ledf2+0x68>
 8001756:	429a      	cmp	r2, r3
 8001758:	dd04      	ble.n	8001764 <__ledf2+0xa0>
 800175a:	4243      	negs	r3, r0
 800175c:	4158      	adcs	r0, r3
 800175e:	0040      	lsls	r0, r0, #1
 8001760:	3801      	subs	r0, #1
 8001762:	e7e9      	b.n	8001738 <__ledf2+0x74>
 8001764:	429a      	cmp	r2, r3
 8001766:	dbeb      	blt.n	8001740 <__ledf2+0x7c>
 8001768:	454f      	cmp	r7, r9
 800176a:	d8df      	bhi.n	800172c <__ledf2+0x68>
 800176c:	d006      	beq.n	800177c <__ledf2+0xb8>
 800176e:	2000      	movs	r0, #0
 8001770:	454f      	cmp	r7, r9
 8001772:	d2e1      	bcs.n	8001738 <__ledf2+0x74>
 8001774:	2900      	cmp	r1, #0
 8001776:	d0e5      	beq.n	8001744 <__ledf2+0x80>
 8001778:	0008      	movs	r0, r1
 800177a:	e7dd      	b.n	8001738 <__ledf2+0x74>
 800177c:	45c4      	cmp	ip, r8
 800177e:	d8d5      	bhi.n	800172c <__ledf2+0x68>
 8001780:	2000      	movs	r0, #0
 8001782:	45c4      	cmp	ip, r8
 8001784:	d2d8      	bcs.n	8001738 <__ledf2+0x74>
 8001786:	e7f5      	b.n	8001774 <__ledf2+0xb0>
 8001788:	000007ff 	.word	0x000007ff

0800178c <__aeabi_dmul>:
 800178c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178e:	4657      	mov	r7, sl
 8001790:	464e      	mov	r6, r9
 8001792:	4645      	mov	r5, r8
 8001794:	46de      	mov	lr, fp
 8001796:	b5e0      	push	{r5, r6, r7, lr}
 8001798:	4698      	mov	r8, r3
 800179a:	030c      	lsls	r4, r1, #12
 800179c:	004b      	lsls	r3, r1, #1
 800179e:	0006      	movs	r6, r0
 80017a0:	4692      	mov	sl, r2
 80017a2:	b087      	sub	sp, #28
 80017a4:	0b24      	lsrs	r4, r4, #12
 80017a6:	0d5b      	lsrs	r3, r3, #21
 80017a8:	0fcf      	lsrs	r7, r1, #31
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dmul+0x24>
 80017ae:	e15c      	b.n	8001a6a <__aeabi_dmul+0x2de>
 80017b0:	4ad9      	ldr	r2, [pc, #868]	; (8001b18 <__aeabi_dmul+0x38c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dmul+0x2c>
 80017b6:	e175      	b.n	8001aa4 <__aeabi_dmul+0x318>
 80017b8:	0f42      	lsrs	r2, r0, #29
 80017ba:	00e4      	lsls	r4, r4, #3
 80017bc:	4314      	orrs	r4, r2
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	0412      	lsls	r2, r2, #16
 80017c2:	4314      	orrs	r4, r2
 80017c4:	4ad5      	ldr	r2, [pc, #852]	; (8001b1c <__aeabi_dmul+0x390>)
 80017c6:	00c5      	lsls	r5, r0, #3
 80017c8:	4694      	mov	ip, r2
 80017ca:	4463      	add	r3, ip
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2300      	movs	r3, #0
 80017d0:	4699      	mov	r9, r3
 80017d2:	469b      	mov	fp, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	4642      	mov	r2, r8
 80017d8:	031e      	lsls	r6, r3, #12
 80017da:	0fd2      	lsrs	r2, r2, #31
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4650      	mov	r0, sl
 80017e0:	4690      	mov	r8, r2
 80017e2:	0b36      	lsrs	r6, r6, #12
 80017e4:	0d5b      	lsrs	r3, r3, #21
 80017e6:	d100      	bne.n	80017ea <__aeabi_dmul+0x5e>
 80017e8:	e120      	b.n	8001a2c <__aeabi_dmul+0x2a0>
 80017ea:	4acb      	ldr	r2, [pc, #812]	; (8001b18 <__aeabi_dmul+0x38c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d100      	bne.n	80017f2 <__aeabi_dmul+0x66>
 80017f0:	e162      	b.n	8001ab8 <__aeabi_dmul+0x32c>
 80017f2:	49ca      	ldr	r1, [pc, #808]	; (8001b1c <__aeabi_dmul+0x390>)
 80017f4:	0f42      	lsrs	r2, r0, #29
 80017f6:	468c      	mov	ip, r1
 80017f8:	9900      	ldr	r1, [sp, #0]
 80017fa:	4463      	add	r3, ip
 80017fc:	00f6      	lsls	r6, r6, #3
 80017fe:	468c      	mov	ip, r1
 8001800:	4316      	orrs	r6, r2
 8001802:	2280      	movs	r2, #128	; 0x80
 8001804:	449c      	add	ip, r3
 8001806:	0412      	lsls	r2, r2, #16
 8001808:	4663      	mov	r3, ip
 800180a:	4316      	orrs	r6, r2
 800180c:	00c2      	lsls	r2, r0, #3
 800180e:	2000      	movs	r0, #0
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	9900      	ldr	r1, [sp, #0]
 8001814:	4643      	mov	r3, r8
 8001816:	3101      	adds	r1, #1
 8001818:	468c      	mov	ip, r1
 800181a:	4649      	mov	r1, r9
 800181c:	407b      	eors	r3, r7
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	290f      	cmp	r1, #15
 8001822:	d826      	bhi.n	8001872 <__aeabi_dmul+0xe6>
 8001824:	4bbe      	ldr	r3, [pc, #760]	; (8001b20 <__aeabi_dmul+0x394>)
 8001826:	0089      	lsls	r1, r1, #2
 8001828:	5859      	ldr	r1, [r3, r1]
 800182a:	468f      	mov	pc, r1
 800182c:	4643      	mov	r3, r8
 800182e:	9301      	str	r3, [sp, #4]
 8001830:	0034      	movs	r4, r6
 8001832:	0015      	movs	r5, r2
 8001834:	4683      	mov	fp, r0
 8001836:	465b      	mov	r3, fp
 8001838:	2b02      	cmp	r3, #2
 800183a:	d016      	beq.n	800186a <__aeabi_dmul+0xde>
 800183c:	2b03      	cmp	r3, #3
 800183e:	d100      	bne.n	8001842 <__aeabi_dmul+0xb6>
 8001840:	e203      	b.n	8001c4a <__aeabi_dmul+0x4be>
 8001842:	2b01      	cmp	r3, #1
 8001844:	d000      	beq.n	8001848 <__aeabi_dmul+0xbc>
 8001846:	e0cd      	b.n	80019e4 <__aeabi_dmul+0x258>
 8001848:	2200      	movs	r2, #0
 800184a:	2400      	movs	r4, #0
 800184c:	2500      	movs	r5, #0
 800184e:	9b01      	ldr	r3, [sp, #4]
 8001850:	0512      	lsls	r2, r2, #20
 8001852:	4322      	orrs	r2, r4
 8001854:	07db      	lsls	r3, r3, #31
 8001856:	431a      	orrs	r2, r3
 8001858:	0028      	movs	r0, r5
 800185a:	0011      	movs	r1, r2
 800185c:	b007      	add	sp, #28
 800185e:	bcf0      	pop	{r4, r5, r6, r7}
 8001860:	46bb      	mov	fp, r7
 8001862:	46b2      	mov	sl, r6
 8001864:	46a9      	mov	r9, r5
 8001866:	46a0      	mov	r8, r4
 8001868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186a:	2400      	movs	r4, #0
 800186c:	2500      	movs	r5, #0
 800186e:	4aaa      	ldr	r2, [pc, #680]	; (8001b18 <__aeabi_dmul+0x38c>)
 8001870:	e7ed      	b.n	800184e <__aeabi_dmul+0xc2>
 8001872:	0c28      	lsrs	r0, r5, #16
 8001874:	042d      	lsls	r5, r5, #16
 8001876:	0c2d      	lsrs	r5, r5, #16
 8001878:	002b      	movs	r3, r5
 800187a:	0c11      	lsrs	r1, r2, #16
 800187c:	0412      	lsls	r2, r2, #16
 800187e:	0c12      	lsrs	r2, r2, #16
 8001880:	4353      	muls	r3, r2
 8001882:	4698      	mov	r8, r3
 8001884:	0013      	movs	r3, r2
 8001886:	002f      	movs	r7, r5
 8001888:	4343      	muls	r3, r0
 800188a:	4699      	mov	r9, r3
 800188c:	434f      	muls	r7, r1
 800188e:	444f      	add	r7, r9
 8001890:	46bb      	mov	fp, r7
 8001892:	4647      	mov	r7, r8
 8001894:	000b      	movs	r3, r1
 8001896:	0c3f      	lsrs	r7, r7, #16
 8001898:	46ba      	mov	sl, r7
 800189a:	4343      	muls	r3, r0
 800189c:	44da      	add	sl, fp
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	45d1      	cmp	r9, sl
 80018a2:	d904      	bls.n	80018ae <__aeabi_dmul+0x122>
 80018a4:	2780      	movs	r7, #128	; 0x80
 80018a6:	027f      	lsls	r7, r7, #9
 80018a8:	46b9      	mov	r9, r7
 80018aa:	444b      	add	r3, r9
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	4653      	mov	r3, sl
 80018b0:	0c1b      	lsrs	r3, r3, #16
 80018b2:	469b      	mov	fp, r3
 80018b4:	4653      	mov	r3, sl
 80018b6:	041f      	lsls	r7, r3, #16
 80018b8:	4643      	mov	r3, r8
 80018ba:	041b      	lsls	r3, r3, #16
 80018bc:	0c1b      	lsrs	r3, r3, #16
 80018be:	4698      	mov	r8, r3
 80018c0:	003b      	movs	r3, r7
 80018c2:	4443      	add	r3, r8
 80018c4:	9304      	str	r3, [sp, #16]
 80018c6:	0c33      	lsrs	r3, r6, #16
 80018c8:	0436      	lsls	r6, r6, #16
 80018ca:	0c36      	lsrs	r6, r6, #16
 80018cc:	4698      	mov	r8, r3
 80018ce:	0033      	movs	r3, r6
 80018d0:	4343      	muls	r3, r0
 80018d2:	4699      	mov	r9, r3
 80018d4:	4643      	mov	r3, r8
 80018d6:	4343      	muls	r3, r0
 80018d8:	002f      	movs	r7, r5
 80018da:	469a      	mov	sl, r3
 80018dc:	4643      	mov	r3, r8
 80018de:	4377      	muls	r7, r6
 80018e0:	435d      	muls	r5, r3
 80018e2:	0c38      	lsrs	r0, r7, #16
 80018e4:	444d      	add	r5, r9
 80018e6:	1945      	adds	r5, r0, r5
 80018e8:	45a9      	cmp	r9, r5
 80018ea:	d903      	bls.n	80018f4 <__aeabi_dmul+0x168>
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	025b      	lsls	r3, r3, #9
 80018f0:	4699      	mov	r9, r3
 80018f2:	44ca      	add	sl, r9
 80018f4:	043f      	lsls	r7, r7, #16
 80018f6:	0c28      	lsrs	r0, r5, #16
 80018f8:	0c3f      	lsrs	r7, r7, #16
 80018fa:	042d      	lsls	r5, r5, #16
 80018fc:	19ed      	adds	r5, r5, r7
 80018fe:	0c27      	lsrs	r7, r4, #16
 8001900:	0424      	lsls	r4, r4, #16
 8001902:	0c24      	lsrs	r4, r4, #16
 8001904:	0003      	movs	r3, r0
 8001906:	0020      	movs	r0, r4
 8001908:	4350      	muls	r0, r2
 800190a:	437a      	muls	r2, r7
 800190c:	4691      	mov	r9, r2
 800190e:	003a      	movs	r2, r7
 8001910:	4453      	add	r3, sl
 8001912:	9305      	str	r3, [sp, #20]
 8001914:	0c03      	lsrs	r3, r0, #16
 8001916:	469a      	mov	sl, r3
 8001918:	434a      	muls	r2, r1
 800191a:	4361      	muls	r1, r4
 800191c:	4449      	add	r1, r9
 800191e:	4451      	add	r1, sl
 8001920:	44ab      	add	fp, r5
 8001922:	4589      	cmp	r9, r1
 8001924:	d903      	bls.n	800192e <__aeabi_dmul+0x1a2>
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	4699      	mov	r9, r3
 800192c:	444a      	add	r2, r9
 800192e:	0400      	lsls	r0, r0, #16
 8001930:	0c0b      	lsrs	r3, r1, #16
 8001932:	0c00      	lsrs	r0, r0, #16
 8001934:	0409      	lsls	r1, r1, #16
 8001936:	1809      	adds	r1, r1, r0
 8001938:	0020      	movs	r0, r4
 800193a:	4699      	mov	r9, r3
 800193c:	4643      	mov	r3, r8
 800193e:	4370      	muls	r0, r6
 8001940:	435c      	muls	r4, r3
 8001942:	437e      	muls	r6, r7
 8001944:	435f      	muls	r7, r3
 8001946:	0c03      	lsrs	r3, r0, #16
 8001948:	4698      	mov	r8, r3
 800194a:	19a4      	adds	r4, r4, r6
 800194c:	4444      	add	r4, r8
 800194e:	444a      	add	r2, r9
 8001950:	9703      	str	r7, [sp, #12]
 8001952:	42a6      	cmp	r6, r4
 8001954:	d904      	bls.n	8001960 <__aeabi_dmul+0x1d4>
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	4698      	mov	r8, r3
 800195c:	4447      	add	r7, r8
 800195e:	9703      	str	r7, [sp, #12]
 8001960:	0423      	lsls	r3, r4, #16
 8001962:	9e02      	ldr	r6, [sp, #8]
 8001964:	469a      	mov	sl, r3
 8001966:	9b05      	ldr	r3, [sp, #20]
 8001968:	445e      	add	r6, fp
 800196a:	4698      	mov	r8, r3
 800196c:	42ae      	cmp	r6, r5
 800196e:	41ad      	sbcs	r5, r5
 8001970:	1876      	adds	r6, r6, r1
 8001972:	428e      	cmp	r6, r1
 8001974:	4189      	sbcs	r1, r1
 8001976:	0400      	lsls	r0, r0, #16
 8001978:	0c00      	lsrs	r0, r0, #16
 800197a:	4450      	add	r0, sl
 800197c:	4440      	add	r0, r8
 800197e:	426d      	negs	r5, r5
 8001980:	1947      	adds	r7, r0, r5
 8001982:	46b8      	mov	r8, r7
 8001984:	4693      	mov	fp, r2
 8001986:	4249      	negs	r1, r1
 8001988:	4689      	mov	r9, r1
 800198a:	44c3      	add	fp, r8
 800198c:	44d9      	add	r9, fp
 800198e:	4298      	cmp	r0, r3
 8001990:	4180      	sbcs	r0, r0
 8001992:	45a8      	cmp	r8, r5
 8001994:	41ad      	sbcs	r5, r5
 8001996:	4593      	cmp	fp, r2
 8001998:	4192      	sbcs	r2, r2
 800199a:	4589      	cmp	r9, r1
 800199c:	4189      	sbcs	r1, r1
 800199e:	426d      	negs	r5, r5
 80019a0:	4240      	negs	r0, r0
 80019a2:	4328      	orrs	r0, r5
 80019a4:	0c24      	lsrs	r4, r4, #16
 80019a6:	4252      	negs	r2, r2
 80019a8:	4249      	negs	r1, r1
 80019aa:	430a      	orrs	r2, r1
 80019ac:	9b03      	ldr	r3, [sp, #12]
 80019ae:	1900      	adds	r0, r0, r4
 80019b0:	1880      	adds	r0, r0, r2
 80019b2:	18c7      	adds	r7, r0, r3
 80019b4:	464b      	mov	r3, r9
 80019b6:	0ddc      	lsrs	r4, r3, #23
 80019b8:	9b04      	ldr	r3, [sp, #16]
 80019ba:	0275      	lsls	r5, r6, #9
 80019bc:	431d      	orrs	r5, r3
 80019be:	1e6a      	subs	r2, r5, #1
 80019c0:	4195      	sbcs	r5, r2
 80019c2:	464b      	mov	r3, r9
 80019c4:	0df6      	lsrs	r6, r6, #23
 80019c6:	027f      	lsls	r7, r7, #9
 80019c8:	4335      	orrs	r5, r6
 80019ca:	025a      	lsls	r2, r3, #9
 80019cc:	433c      	orrs	r4, r7
 80019ce:	4315      	orrs	r5, r2
 80019d0:	01fb      	lsls	r3, r7, #7
 80019d2:	d400      	bmi.n	80019d6 <__aeabi_dmul+0x24a>
 80019d4:	e11c      	b.n	8001c10 <__aeabi_dmul+0x484>
 80019d6:	2101      	movs	r1, #1
 80019d8:	086a      	lsrs	r2, r5, #1
 80019da:	400d      	ands	r5, r1
 80019dc:	4315      	orrs	r5, r2
 80019de:	07e2      	lsls	r2, r4, #31
 80019e0:	4315      	orrs	r5, r2
 80019e2:	0864      	lsrs	r4, r4, #1
 80019e4:	494f      	ldr	r1, [pc, #316]	; (8001b24 <__aeabi_dmul+0x398>)
 80019e6:	4461      	add	r1, ip
 80019e8:	2900      	cmp	r1, #0
 80019ea:	dc00      	bgt.n	80019ee <__aeabi_dmul+0x262>
 80019ec:	e0b0      	b.n	8001b50 <__aeabi_dmul+0x3c4>
 80019ee:	076b      	lsls	r3, r5, #29
 80019f0:	d009      	beq.n	8001a06 <__aeabi_dmul+0x27a>
 80019f2:	220f      	movs	r2, #15
 80019f4:	402a      	ands	r2, r5
 80019f6:	2a04      	cmp	r2, #4
 80019f8:	d005      	beq.n	8001a06 <__aeabi_dmul+0x27a>
 80019fa:	1d2a      	adds	r2, r5, #4
 80019fc:	42aa      	cmp	r2, r5
 80019fe:	41ad      	sbcs	r5, r5
 8001a00:	426d      	negs	r5, r5
 8001a02:	1964      	adds	r4, r4, r5
 8001a04:	0015      	movs	r5, r2
 8001a06:	01e3      	lsls	r3, r4, #7
 8001a08:	d504      	bpl.n	8001a14 <__aeabi_dmul+0x288>
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	4a46      	ldr	r2, [pc, #280]	; (8001b28 <__aeabi_dmul+0x39c>)
 8001a0e:	00c9      	lsls	r1, r1, #3
 8001a10:	4014      	ands	r4, r2
 8001a12:	4461      	add	r1, ip
 8001a14:	4a45      	ldr	r2, [pc, #276]	; (8001b2c <__aeabi_dmul+0x3a0>)
 8001a16:	4291      	cmp	r1, r2
 8001a18:	dd00      	ble.n	8001a1c <__aeabi_dmul+0x290>
 8001a1a:	e726      	b.n	800186a <__aeabi_dmul+0xde>
 8001a1c:	0762      	lsls	r2, r4, #29
 8001a1e:	08ed      	lsrs	r5, r5, #3
 8001a20:	0264      	lsls	r4, r4, #9
 8001a22:	0549      	lsls	r1, r1, #21
 8001a24:	4315      	orrs	r5, r2
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	0d4a      	lsrs	r2, r1, #21
 8001a2a:	e710      	b.n	800184e <__aeabi_dmul+0xc2>
 8001a2c:	4652      	mov	r2, sl
 8001a2e:	4332      	orrs	r2, r6
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dmul+0x2a8>
 8001a32:	e07f      	b.n	8001b34 <__aeabi_dmul+0x3a8>
 8001a34:	2e00      	cmp	r6, #0
 8001a36:	d100      	bne.n	8001a3a <__aeabi_dmul+0x2ae>
 8001a38:	e0dc      	b.n	8001bf4 <__aeabi_dmul+0x468>
 8001a3a:	0030      	movs	r0, r6
 8001a3c:	f000 fda0 	bl	8002580 <__clzsi2>
 8001a40:	0002      	movs	r2, r0
 8001a42:	3a0b      	subs	r2, #11
 8001a44:	231d      	movs	r3, #29
 8001a46:	0001      	movs	r1, r0
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	4652      	mov	r2, sl
 8001a4c:	3908      	subs	r1, #8
 8001a4e:	40da      	lsrs	r2, r3
 8001a50:	408e      	lsls	r6, r1
 8001a52:	4316      	orrs	r6, r2
 8001a54:	4652      	mov	r2, sl
 8001a56:	408a      	lsls	r2, r1
 8001a58:	9b00      	ldr	r3, [sp, #0]
 8001a5a:	4935      	ldr	r1, [pc, #212]	; (8001b30 <__aeabi_dmul+0x3a4>)
 8001a5c:	1a18      	subs	r0, r3, r0
 8001a5e:	0003      	movs	r3, r0
 8001a60:	468c      	mov	ip, r1
 8001a62:	4463      	add	r3, ip
 8001a64:	2000      	movs	r0, #0
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	e6d3      	b.n	8001812 <__aeabi_dmul+0x86>
 8001a6a:	0025      	movs	r5, r4
 8001a6c:	4305      	orrs	r5, r0
 8001a6e:	d04a      	beq.n	8001b06 <__aeabi_dmul+0x37a>
 8001a70:	2c00      	cmp	r4, #0
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dmul+0x2ea>
 8001a74:	e0b0      	b.n	8001bd8 <__aeabi_dmul+0x44c>
 8001a76:	0020      	movs	r0, r4
 8001a78:	f000 fd82 	bl	8002580 <__clzsi2>
 8001a7c:	0001      	movs	r1, r0
 8001a7e:	0002      	movs	r2, r0
 8001a80:	390b      	subs	r1, #11
 8001a82:	231d      	movs	r3, #29
 8001a84:	0010      	movs	r0, r2
 8001a86:	1a5b      	subs	r3, r3, r1
 8001a88:	0031      	movs	r1, r6
 8001a8a:	0035      	movs	r5, r6
 8001a8c:	3808      	subs	r0, #8
 8001a8e:	4084      	lsls	r4, r0
 8001a90:	40d9      	lsrs	r1, r3
 8001a92:	4085      	lsls	r5, r0
 8001a94:	430c      	orrs	r4, r1
 8001a96:	4826      	ldr	r0, [pc, #152]	; (8001b30 <__aeabi_dmul+0x3a4>)
 8001a98:	1a83      	subs	r3, r0, r2
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	4699      	mov	r9, r3
 8001aa0:	469b      	mov	fp, r3
 8001aa2:	e697      	b.n	80017d4 <__aeabi_dmul+0x48>
 8001aa4:	0005      	movs	r5, r0
 8001aa6:	4325      	orrs	r5, r4
 8001aa8:	d126      	bne.n	8001af8 <__aeabi_dmul+0x36c>
 8001aaa:	2208      	movs	r2, #8
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	2400      	movs	r4, #0
 8001ab2:	4691      	mov	r9, r2
 8001ab4:	469b      	mov	fp, r3
 8001ab6:	e68d      	b.n	80017d4 <__aeabi_dmul+0x48>
 8001ab8:	4652      	mov	r2, sl
 8001aba:	9b00      	ldr	r3, [sp, #0]
 8001abc:	4332      	orrs	r2, r6
 8001abe:	d110      	bne.n	8001ae2 <__aeabi_dmul+0x356>
 8001ac0:	4915      	ldr	r1, [pc, #84]	; (8001b18 <__aeabi_dmul+0x38c>)
 8001ac2:	2600      	movs	r6, #0
 8001ac4:	468c      	mov	ip, r1
 8001ac6:	4463      	add	r3, ip
 8001ac8:	4649      	mov	r1, r9
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2302      	movs	r3, #2
 8001ace:	4319      	orrs	r1, r3
 8001ad0:	4689      	mov	r9, r1
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	e69d      	b.n	8001812 <__aeabi_dmul+0x86>
 8001ad6:	465b      	mov	r3, fp
 8001ad8:	9701      	str	r7, [sp, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d000      	beq.n	8001ae0 <__aeabi_dmul+0x354>
 8001ade:	e6ad      	b.n	800183c <__aeabi_dmul+0xb0>
 8001ae0:	e6c3      	b.n	800186a <__aeabi_dmul+0xde>
 8001ae2:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <__aeabi_dmul+0x38c>)
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	4694      	mov	ip, r2
 8001ae8:	4463      	add	r3, ip
 8001aea:	464a      	mov	r2, r9
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2303      	movs	r3, #3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	4691      	mov	r9, r2
 8001af4:	4652      	mov	r2, sl
 8001af6:	e68c      	b.n	8001812 <__aeabi_dmul+0x86>
 8001af8:	220c      	movs	r2, #12
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2303      	movs	r3, #3
 8001afe:	0005      	movs	r5, r0
 8001b00:	4691      	mov	r9, r2
 8001b02:	469b      	mov	fp, r3
 8001b04:	e666      	b.n	80017d4 <__aeabi_dmul+0x48>
 8001b06:	2304      	movs	r3, #4
 8001b08:	4699      	mov	r9, r3
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	2400      	movs	r4, #0
 8001b12:	469b      	mov	fp, r3
 8001b14:	e65e      	b.n	80017d4 <__aeabi_dmul+0x48>
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	000007ff 	.word	0x000007ff
 8001b1c:	fffffc01 	.word	0xfffffc01
 8001b20:	0800537c 	.word	0x0800537c
 8001b24:	000003ff 	.word	0x000003ff
 8001b28:	feffffff 	.word	0xfeffffff
 8001b2c:	000007fe 	.word	0x000007fe
 8001b30:	fffffc0d 	.word	0xfffffc0d
 8001b34:	4649      	mov	r1, r9
 8001b36:	2301      	movs	r3, #1
 8001b38:	4319      	orrs	r1, r3
 8001b3a:	4689      	mov	r9, r1
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	2001      	movs	r0, #1
 8001b40:	e667      	b.n	8001812 <__aeabi_dmul+0x86>
 8001b42:	2300      	movs	r3, #0
 8001b44:	2480      	movs	r4, #128	; 0x80
 8001b46:	2500      	movs	r5, #0
 8001b48:	4a43      	ldr	r2, [pc, #268]	; (8001c58 <__aeabi_dmul+0x4cc>)
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	0324      	lsls	r4, r4, #12
 8001b4e:	e67e      	b.n	800184e <__aeabi_dmul+0xc2>
 8001b50:	2001      	movs	r0, #1
 8001b52:	1a40      	subs	r0, r0, r1
 8001b54:	2838      	cmp	r0, #56	; 0x38
 8001b56:	dd00      	ble.n	8001b5a <__aeabi_dmul+0x3ce>
 8001b58:	e676      	b.n	8001848 <__aeabi_dmul+0xbc>
 8001b5a:	281f      	cmp	r0, #31
 8001b5c:	dd5b      	ble.n	8001c16 <__aeabi_dmul+0x48a>
 8001b5e:	221f      	movs	r2, #31
 8001b60:	0023      	movs	r3, r4
 8001b62:	4252      	negs	r2, r2
 8001b64:	1a51      	subs	r1, r2, r1
 8001b66:	40cb      	lsrs	r3, r1
 8001b68:	0019      	movs	r1, r3
 8001b6a:	2820      	cmp	r0, #32
 8001b6c:	d003      	beq.n	8001b76 <__aeabi_dmul+0x3ea>
 8001b6e:	4a3b      	ldr	r2, [pc, #236]	; (8001c5c <__aeabi_dmul+0x4d0>)
 8001b70:	4462      	add	r2, ip
 8001b72:	4094      	lsls	r4, r2
 8001b74:	4325      	orrs	r5, r4
 8001b76:	1e6a      	subs	r2, r5, #1
 8001b78:	4195      	sbcs	r5, r2
 8001b7a:	002a      	movs	r2, r5
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	2107      	movs	r1, #7
 8001b80:	000d      	movs	r5, r1
 8001b82:	2400      	movs	r4, #0
 8001b84:	4015      	ands	r5, r2
 8001b86:	4211      	tst	r1, r2
 8001b88:	d05b      	beq.n	8001c42 <__aeabi_dmul+0x4b6>
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	2400      	movs	r4, #0
 8001b8e:	4011      	ands	r1, r2
 8001b90:	2904      	cmp	r1, #4
 8001b92:	d053      	beq.n	8001c3c <__aeabi_dmul+0x4b0>
 8001b94:	1d11      	adds	r1, r2, #4
 8001b96:	4291      	cmp	r1, r2
 8001b98:	4192      	sbcs	r2, r2
 8001b9a:	4252      	negs	r2, r2
 8001b9c:	18a4      	adds	r4, r4, r2
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	0223      	lsls	r3, r4, #8
 8001ba2:	d54b      	bpl.n	8001c3c <__aeabi_dmul+0x4b0>
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2400      	movs	r4, #0
 8001ba8:	2500      	movs	r5, #0
 8001baa:	e650      	b.n	800184e <__aeabi_dmul+0xc2>
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	031b      	lsls	r3, r3, #12
 8001bb0:	421c      	tst	r4, r3
 8001bb2:	d009      	beq.n	8001bc8 <__aeabi_dmul+0x43c>
 8001bb4:	421e      	tst	r6, r3
 8001bb6:	d107      	bne.n	8001bc8 <__aeabi_dmul+0x43c>
 8001bb8:	4333      	orrs	r3, r6
 8001bba:	031c      	lsls	r4, r3, #12
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	0015      	movs	r5, r2
 8001bc0:	0b24      	lsrs	r4, r4, #12
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <__aeabi_dmul+0x4cc>)
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	e642      	b.n	800184e <__aeabi_dmul+0xc2>
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	0312      	lsls	r2, r2, #12
 8001bcc:	4314      	orrs	r4, r2
 8001bce:	0324      	lsls	r4, r4, #12
 8001bd0:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <__aeabi_dmul+0x4cc>)
 8001bd2:	0b24      	lsrs	r4, r4, #12
 8001bd4:	9701      	str	r7, [sp, #4]
 8001bd6:	e63a      	b.n	800184e <__aeabi_dmul+0xc2>
 8001bd8:	f000 fcd2 	bl	8002580 <__clzsi2>
 8001bdc:	0001      	movs	r1, r0
 8001bde:	0002      	movs	r2, r0
 8001be0:	3115      	adds	r1, #21
 8001be2:	3220      	adds	r2, #32
 8001be4:	291c      	cmp	r1, #28
 8001be6:	dc00      	bgt.n	8001bea <__aeabi_dmul+0x45e>
 8001be8:	e74b      	b.n	8001a82 <__aeabi_dmul+0x2f6>
 8001bea:	0034      	movs	r4, r6
 8001bec:	3808      	subs	r0, #8
 8001bee:	2500      	movs	r5, #0
 8001bf0:	4084      	lsls	r4, r0
 8001bf2:	e750      	b.n	8001a96 <__aeabi_dmul+0x30a>
 8001bf4:	f000 fcc4 	bl	8002580 <__clzsi2>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	3215      	adds	r2, #21
 8001bfe:	3020      	adds	r0, #32
 8001c00:	2a1c      	cmp	r2, #28
 8001c02:	dc00      	bgt.n	8001c06 <__aeabi_dmul+0x47a>
 8001c04:	e71e      	b.n	8001a44 <__aeabi_dmul+0x2b8>
 8001c06:	4656      	mov	r6, sl
 8001c08:	3b08      	subs	r3, #8
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	409e      	lsls	r6, r3
 8001c0e:	e723      	b.n	8001a58 <__aeabi_dmul+0x2cc>
 8001c10:	9b00      	ldr	r3, [sp, #0]
 8001c12:	469c      	mov	ip, r3
 8001c14:	e6e6      	b.n	80019e4 <__aeabi_dmul+0x258>
 8001c16:	4912      	ldr	r1, [pc, #72]	; (8001c60 <__aeabi_dmul+0x4d4>)
 8001c18:	0022      	movs	r2, r4
 8001c1a:	4461      	add	r1, ip
 8001c1c:	002e      	movs	r6, r5
 8001c1e:	408d      	lsls	r5, r1
 8001c20:	408a      	lsls	r2, r1
 8001c22:	40c6      	lsrs	r6, r0
 8001c24:	1e69      	subs	r1, r5, #1
 8001c26:	418d      	sbcs	r5, r1
 8001c28:	4332      	orrs	r2, r6
 8001c2a:	432a      	orrs	r2, r5
 8001c2c:	40c4      	lsrs	r4, r0
 8001c2e:	0753      	lsls	r3, r2, #29
 8001c30:	d0b6      	beq.n	8001ba0 <__aeabi_dmul+0x414>
 8001c32:	210f      	movs	r1, #15
 8001c34:	4011      	ands	r1, r2
 8001c36:	2904      	cmp	r1, #4
 8001c38:	d1ac      	bne.n	8001b94 <__aeabi_dmul+0x408>
 8001c3a:	e7b1      	b.n	8001ba0 <__aeabi_dmul+0x414>
 8001c3c:	0765      	lsls	r5, r4, #29
 8001c3e:	0264      	lsls	r4, r4, #9
 8001c40:	0b24      	lsrs	r4, r4, #12
 8001c42:	08d2      	lsrs	r2, r2, #3
 8001c44:	4315      	orrs	r5, r2
 8001c46:	2200      	movs	r2, #0
 8001c48:	e601      	b.n	800184e <__aeabi_dmul+0xc2>
 8001c4a:	2280      	movs	r2, #128	; 0x80
 8001c4c:	0312      	lsls	r2, r2, #12
 8001c4e:	4314      	orrs	r4, r2
 8001c50:	0324      	lsls	r4, r4, #12
 8001c52:	4a01      	ldr	r2, [pc, #4]	; (8001c58 <__aeabi_dmul+0x4cc>)
 8001c54:	0b24      	lsrs	r4, r4, #12
 8001c56:	e5fa      	b.n	800184e <__aeabi_dmul+0xc2>
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	0000043e 	.word	0x0000043e
 8001c60:	0000041e 	.word	0x0000041e

08001c64 <__aeabi_dsub>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	4657      	mov	r7, sl
 8001c68:	464e      	mov	r6, r9
 8001c6a:	4645      	mov	r5, r8
 8001c6c:	46de      	mov	lr, fp
 8001c6e:	b5e0      	push	{r5, r6, r7, lr}
 8001c70:	001e      	movs	r6, r3
 8001c72:	0017      	movs	r7, r2
 8001c74:	004a      	lsls	r2, r1, #1
 8001c76:	030b      	lsls	r3, r1, #12
 8001c78:	0d52      	lsrs	r2, r2, #21
 8001c7a:	0a5b      	lsrs	r3, r3, #9
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	0f42      	lsrs	r2, r0, #29
 8001c80:	431a      	orrs	r2, r3
 8001c82:	0fcd      	lsrs	r5, r1, #31
 8001c84:	4ccd      	ldr	r4, [pc, #820]	; (8001fbc <__aeabi_dsub+0x358>)
 8001c86:	0331      	lsls	r1, r6, #12
 8001c88:	00c3      	lsls	r3, r0, #3
 8001c8a:	4694      	mov	ip, r2
 8001c8c:	0070      	lsls	r0, r6, #1
 8001c8e:	0f7a      	lsrs	r2, r7, #29
 8001c90:	0a49      	lsrs	r1, r1, #9
 8001c92:	00ff      	lsls	r7, r7, #3
 8001c94:	469a      	mov	sl, r3
 8001c96:	46b9      	mov	r9, r7
 8001c98:	0d40      	lsrs	r0, r0, #21
 8001c9a:	0ff6      	lsrs	r6, r6, #31
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	42a0      	cmp	r0, r4
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x40>
 8001ca2:	e0b1      	b.n	8001e08 <__aeabi_dsub+0x1a4>
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4056      	eors	r6, r2
 8001ca8:	46b3      	mov	fp, r6
 8001caa:	42b5      	cmp	r5, r6
 8001cac:	d100      	bne.n	8001cb0 <__aeabi_dsub+0x4c>
 8001cae:	e088      	b.n	8001dc2 <__aeabi_dsub+0x15e>
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	1a12      	subs	r2, r2, r0
 8001cb4:	2a00      	cmp	r2, #0
 8001cb6:	dc00      	bgt.n	8001cba <__aeabi_dsub+0x56>
 8001cb8:	e0ae      	b.n	8001e18 <__aeabi_dsub+0x1b4>
 8001cba:	2800      	cmp	r0, #0
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x5c>
 8001cbe:	e0c1      	b.n	8001e44 <__aeabi_dsub+0x1e0>
 8001cc0:	48be      	ldr	r0, [pc, #760]	; (8001fbc <__aeabi_dsub+0x358>)
 8001cc2:	4580      	cmp	r8, r0
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x64>
 8001cc6:	e151      	b.n	8001f6c <__aeabi_dsub+0x308>
 8001cc8:	2080      	movs	r0, #128	; 0x80
 8001cca:	0400      	lsls	r0, r0, #16
 8001ccc:	4301      	orrs	r1, r0
 8001cce:	2a38      	cmp	r2, #56	; 0x38
 8001cd0:	dd00      	ble.n	8001cd4 <__aeabi_dsub+0x70>
 8001cd2:	e17b      	b.n	8001fcc <__aeabi_dsub+0x368>
 8001cd4:	2a1f      	cmp	r2, #31
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_dsub+0x76>
 8001cd8:	e1ee      	b.n	80020b8 <__aeabi_dsub+0x454>
 8001cda:	2020      	movs	r0, #32
 8001cdc:	003e      	movs	r6, r7
 8001cde:	1a80      	subs	r0, r0, r2
 8001ce0:	000c      	movs	r4, r1
 8001ce2:	40d6      	lsrs	r6, r2
 8001ce4:	40d1      	lsrs	r1, r2
 8001ce6:	4087      	lsls	r7, r0
 8001ce8:	4662      	mov	r2, ip
 8001cea:	4084      	lsls	r4, r0
 8001cec:	1a52      	subs	r2, r2, r1
 8001cee:	1e78      	subs	r0, r7, #1
 8001cf0:	4187      	sbcs	r7, r0
 8001cf2:	4694      	mov	ip, r2
 8001cf4:	4334      	orrs	r4, r6
 8001cf6:	4327      	orrs	r7, r4
 8001cf8:	1bdc      	subs	r4, r3, r7
 8001cfa:	42a3      	cmp	r3, r4
 8001cfc:	419b      	sbcs	r3, r3
 8001cfe:	4662      	mov	r2, ip
 8001d00:	425b      	negs	r3, r3
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	4699      	mov	r9, r3
 8001d06:	464b      	mov	r3, r9
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	d400      	bmi.n	8001d0e <__aeabi_dsub+0xaa>
 8001d0c:	e118      	b.n	8001f40 <__aeabi_dsub+0x2dc>
 8001d0e:	464b      	mov	r3, r9
 8001d10:	0258      	lsls	r0, r3, #9
 8001d12:	0a43      	lsrs	r3, r0, #9
 8001d14:	4699      	mov	r9, r3
 8001d16:	464b      	mov	r3, r9
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_dsub+0xba>
 8001d1c:	e137      	b.n	8001f8e <__aeabi_dsub+0x32a>
 8001d1e:	4648      	mov	r0, r9
 8001d20:	f000 fc2e 	bl	8002580 <__clzsi2>
 8001d24:	0001      	movs	r1, r0
 8001d26:	3908      	subs	r1, #8
 8001d28:	2320      	movs	r3, #32
 8001d2a:	0022      	movs	r2, r4
 8001d2c:	4648      	mov	r0, r9
 8001d2e:	1a5b      	subs	r3, r3, r1
 8001d30:	40da      	lsrs	r2, r3
 8001d32:	4088      	lsls	r0, r1
 8001d34:	408c      	lsls	r4, r1
 8001d36:	4643      	mov	r3, r8
 8001d38:	4310      	orrs	r0, r2
 8001d3a:	4588      	cmp	r8, r1
 8001d3c:	dd00      	ble.n	8001d40 <__aeabi_dsub+0xdc>
 8001d3e:	e136      	b.n	8001fae <__aeabi_dsub+0x34a>
 8001d40:	1ac9      	subs	r1, r1, r3
 8001d42:	1c4b      	adds	r3, r1, #1
 8001d44:	2b1f      	cmp	r3, #31
 8001d46:	dd00      	ble.n	8001d4a <__aeabi_dsub+0xe6>
 8001d48:	e0ea      	b.n	8001f20 <__aeabi_dsub+0x2bc>
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	0026      	movs	r6, r4
 8001d4e:	1ad2      	subs	r2, r2, r3
 8001d50:	0001      	movs	r1, r0
 8001d52:	4094      	lsls	r4, r2
 8001d54:	40de      	lsrs	r6, r3
 8001d56:	40d8      	lsrs	r0, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4091      	lsls	r1, r2
 8001d5c:	1e62      	subs	r2, r4, #1
 8001d5e:	4194      	sbcs	r4, r2
 8001d60:	4681      	mov	r9, r0
 8001d62:	4698      	mov	r8, r3
 8001d64:	4331      	orrs	r1, r6
 8001d66:	430c      	orrs	r4, r1
 8001d68:	0763      	lsls	r3, r4, #29
 8001d6a:	d009      	beq.n	8001d80 <__aeabi_dsub+0x11c>
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	4023      	ands	r3, r4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d005      	beq.n	8001d80 <__aeabi_dsub+0x11c>
 8001d74:	1d23      	adds	r3, r4, #4
 8001d76:	42a3      	cmp	r3, r4
 8001d78:	41a4      	sbcs	r4, r4
 8001d7a:	4264      	negs	r4, r4
 8001d7c:	44a1      	add	r9, r4
 8001d7e:	001c      	movs	r4, r3
 8001d80:	464b      	mov	r3, r9
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	d400      	bmi.n	8001d88 <__aeabi_dsub+0x124>
 8001d86:	e0de      	b.n	8001f46 <__aeabi_dsub+0x2e2>
 8001d88:	4641      	mov	r1, r8
 8001d8a:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <__aeabi_dsub+0x358>)
 8001d8c:	3101      	adds	r1, #1
 8001d8e:	4299      	cmp	r1, r3
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x130>
 8001d92:	e0e7      	b.n	8001f64 <__aeabi_dsub+0x300>
 8001d94:	464b      	mov	r3, r9
 8001d96:	488a      	ldr	r0, [pc, #552]	; (8001fc0 <__aeabi_dsub+0x35c>)
 8001d98:	08e4      	lsrs	r4, r4, #3
 8001d9a:	4003      	ands	r3, r0
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	0549      	lsls	r1, r1, #21
 8001da0:	075b      	lsls	r3, r3, #29
 8001da2:	0240      	lsls	r0, r0, #9
 8001da4:	4323      	orrs	r3, r4
 8001da6:	0d4a      	lsrs	r2, r1, #21
 8001da8:	0b04      	lsrs	r4, r0, #12
 8001daa:	0512      	lsls	r2, r2, #20
 8001dac:	07ed      	lsls	r5, r5, #31
 8001dae:	4322      	orrs	r2, r4
 8001db0:	432a      	orrs	r2, r5
 8001db2:	0018      	movs	r0, r3
 8001db4:	0011      	movs	r1, r2
 8001db6:	bcf0      	pop	{r4, r5, r6, r7}
 8001db8:	46bb      	mov	fp, r7
 8001dba:	46b2      	mov	sl, r6
 8001dbc:	46a9      	mov	r9, r5
 8001dbe:	46a0      	mov	r8, r4
 8001dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	1a12      	subs	r2, r2, r0
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	dd52      	ble.n	8001e70 <__aeabi_dsub+0x20c>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x16c>
 8001dce:	e09c      	b.n	8001f0a <__aeabi_dsub+0x2a6>
 8001dd0:	45a0      	cmp	r8, r4
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dsub+0x172>
 8001dd4:	e0ca      	b.n	8001f6c <__aeabi_dsub+0x308>
 8001dd6:	2080      	movs	r0, #128	; 0x80
 8001dd8:	0400      	lsls	r0, r0, #16
 8001dda:	4301      	orrs	r1, r0
 8001ddc:	2a38      	cmp	r2, #56	; 0x38
 8001dde:	dd00      	ble.n	8001de2 <__aeabi_dsub+0x17e>
 8001de0:	e149      	b.n	8002076 <__aeabi_dsub+0x412>
 8001de2:	2a1f      	cmp	r2, #31
 8001de4:	dc00      	bgt.n	8001de8 <__aeabi_dsub+0x184>
 8001de6:	e197      	b.n	8002118 <__aeabi_dsub+0x4b4>
 8001de8:	0010      	movs	r0, r2
 8001dea:	000e      	movs	r6, r1
 8001dec:	3820      	subs	r0, #32
 8001dee:	40c6      	lsrs	r6, r0
 8001df0:	2a20      	cmp	r2, #32
 8001df2:	d004      	beq.n	8001dfe <__aeabi_dsub+0x19a>
 8001df4:	2040      	movs	r0, #64	; 0x40
 8001df6:	1a82      	subs	r2, r0, r2
 8001df8:	4091      	lsls	r1, r2
 8001dfa:	430f      	orrs	r7, r1
 8001dfc:	46b9      	mov	r9, r7
 8001dfe:	464c      	mov	r4, r9
 8001e00:	1e62      	subs	r2, r4, #1
 8001e02:	4194      	sbcs	r4, r2
 8001e04:	4334      	orrs	r4, r6
 8001e06:	e13a      	b.n	800207e <__aeabi_dsub+0x41a>
 8001e08:	000a      	movs	r2, r1
 8001e0a:	433a      	orrs	r2, r7
 8001e0c:	d028      	beq.n	8001e60 <__aeabi_dsub+0x1fc>
 8001e0e:	46b3      	mov	fp, r6
 8001e10:	42b5      	cmp	r5, r6
 8001e12:	d02b      	beq.n	8001e6c <__aeabi_dsub+0x208>
 8001e14:	4a6b      	ldr	r2, [pc, #428]	; (8001fc4 <__aeabi_dsub+0x360>)
 8001e16:	4442      	add	r2, r8
 8001e18:	2a00      	cmp	r2, #0
 8001e1a:	d05d      	beq.n	8001ed8 <__aeabi_dsub+0x274>
 8001e1c:	4642      	mov	r2, r8
 8001e1e:	4644      	mov	r4, r8
 8001e20:	1a82      	subs	r2, r0, r2
 8001e22:	2c00      	cmp	r4, #0
 8001e24:	d000      	beq.n	8001e28 <__aeabi_dsub+0x1c4>
 8001e26:	e0f5      	b.n	8002014 <__aeabi_dsub+0x3b0>
 8001e28:	4665      	mov	r5, ip
 8001e2a:	431d      	orrs	r5, r3
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x1cc>
 8001e2e:	e19c      	b.n	800216a <__aeabi_dsub+0x506>
 8001e30:	1e55      	subs	r5, r2, #1
 8001e32:	2a01      	cmp	r2, #1
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x1d4>
 8001e36:	e1fb      	b.n	8002230 <__aeabi_dsub+0x5cc>
 8001e38:	4c60      	ldr	r4, [pc, #384]	; (8001fbc <__aeabi_dsub+0x358>)
 8001e3a:	42a2      	cmp	r2, r4
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dsub+0x1dc>
 8001e3e:	e1bd      	b.n	80021bc <__aeabi_dsub+0x558>
 8001e40:	002a      	movs	r2, r5
 8001e42:	e0f0      	b.n	8002026 <__aeabi_dsub+0x3c2>
 8001e44:	0008      	movs	r0, r1
 8001e46:	4338      	orrs	r0, r7
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x1e8>
 8001e4a:	e0c3      	b.n	8001fd4 <__aeabi_dsub+0x370>
 8001e4c:	1e50      	subs	r0, r2, #1
 8001e4e:	2a01      	cmp	r2, #1
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x1f0>
 8001e52:	e1a8      	b.n	80021a6 <__aeabi_dsub+0x542>
 8001e54:	4c59      	ldr	r4, [pc, #356]	; (8001fbc <__aeabi_dsub+0x358>)
 8001e56:	42a2      	cmp	r2, r4
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x1f8>
 8001e5a:	e087      	b.n	8001f6c <__aeabi_dsub+0x308>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	e736      	b.n	8001cce <__aeabi_dsub+0x6a>
 8001e60:	2201      	movs	r2, #1
 8001e62:	4056      	eors	r6, r2
 8001e64:	46b3      	mov	fp, r6
 8001e66:	42b5      	cmp	r5, r6
 8001e68:	d000      	beq.n	8001e6c <__aeabi_dsub+0x208>
 8001e6a:	e721      	b.n	8001cb0 <__aeabi_dsub+0x4c>
 8001e6c:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <__aeabi_dsub+0x360>)
 8001e6e:	4442      	add	r2, r8
 8001e70:	2a00      	cmp	r2, #0
 8001e72:	d100      	bne.n	8001e76 <__aeabi_dsub+0x212>
 8001e74:	e0b5      	b.n	8001fe2 <__aeabi_dsub+0x37e>
 8001e76:	4642      	mov	r2, r8
 8001e78:	4644      	mov	r4, r8
 8001e7a:	1a82      	subs	r2, r0, r2
 8001e7c:	2c00      	cmp	r4, #0
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x21e>
 8001e80:	e138      	b.n	80020f4 <__aeabi_dsub+0x490>
 8001e82:	4e4e      	ldr	r6, [pc, #312]	; (8001fbc <__aeabi_dsub+0x358>)
 8001e84:	42b0      	cmp	r0, r6
 8001e86:	d100      	bne.n	8001e8a <__aeabi_dsub+0x226>
 8001e88:	e1de      	b.n	8002248 <__aeabi_dsub+0x5e4>
 8001e8a:	2680      	movs	r6, #128	; 0x80
 8001e8c:	4664      	mov	r4, ip
 8001e8e:	0436      	lsls	r6, r6, #16
 8001e90:	4334      	orrs	r4, r6
 8001e92:	46a4      	mov	ip, r4
 8001e94:	2a38      	cmp	r2, #56	; 0x38
 8001e96:	dd00      	ble.n	8001e9a <__aeabi_dsub+0x236>
 8001e98:	e196      	b.n	80021c8 <__aeabi_dsub+0x564>
 8001e9a:	2a1f      	cmp	r2, #31
 8001e9c:	dd00      	ble.n	8001ea0 <__aeabi_dsub+0x23c>
 8001e9e:	e224      	b.n	80022ea <__aeabi_dsub+0x686>
 8001ea0:	2620      	movs	r6, #32
 8001ea2:	1ab4      	subs	r4, r6, r2
 8001ea4:	46a2      	mov	sl, r4
 8001ea6:	4664      	mov	r4, ip
 8001ea8:	4656      	mov	r6, sl
 8001eaa:	40b4      	lsls	r4, r6
 8001eac:	46a1      	mov	r9, r4
 8001eae:	001c      	movs	r4, r3
 8001eb0:	464e      	mov	r6, r9
 8001eb2:	40d4      	lsrs	r4, r2
 8001eb4:	4326      	orrs	r6, r4
 8001eb6:	0034      	movs	r4, r6
 8001eb8:	4656      	mov	r6, sl
 8001eba:	40b3      	lsls	r3, r6
 8001ebc:	1e5e      	subs	r6, r3, #1
 8001ebe:	41b3      	sbcs	r3, r6
 8001ec0:	431c      	orrs	r4, r3
 8001ec2:	4663      	mov	r3, ip
 8001ec4:	40d3      	lsrs	r3, r2
 8001ec6:	18c9      	adds	r1, r1, r3
 8001ec8:	19e4      	adds	r4, r4, r7
 8001eca:	42bc      	cmp	r4, r7
 8001ecc:	41bf      	sbcs	r7, r7
 8001ece:	427f      	negs	r7, r7
 8001ed0:	46b9      	mov	r9, r7
 8001ed2:	4680      	mov	r8, r0
 8001ed4:	4489      	add	r9, r1
 8001ed6:	e0d8      	b.n	800208a <__aeabi_dsub+0x426>
 8001ed8:	4640      	mov	r0, r8
 8001eda:	4c3b      	ldr	r4, [pc, #236]	; (8001fc8 <__aeabi_dsub+0x364>)
 8001edc:	3001      	adds	r0, #1
 8001ede:	4220      	tst	r0, r4
 8001ee0:	d000      	beq.n	8001ee4 <__aeabi_dsub+0x280>
 8001ee2:	e0b4      	b.n	800204e <__aeabi_dsub+0x3ea>
 8001ee4:	4640      	mov	r0, r8
 8001ee6:	2800      	cmp	r0, #0
 8001ee8:	d000      	beq.n	8001eec <__aeabi_dsub+0x288>
 8001eea:	e144      	b.n	8002176 <__aeabi_dsub+0x512>
 8001eec:	4660      	mov	r0, ip
 8001eee:	4318      	orrs	r0, r3
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x290>
 8001ef2:	e190      	b.n	8002216 <__aeabi_dsub+0x5b2>
 8001ef4:	0008      	movs	r0, r1
 8001ef6:	4338      	orrs	r0, r7
 8001ef8:	d000      	beq.n	8001efc <__aeabi_dsub+0x298>
 8001efa:	e1aa      	b.n	8002252 <__aeabi_dsub+0x5ee>
 8001efc:	4661      	mov	r1, ip
 8001efe:	08db      	lsrs	r3, r3, #3
 8001f00:	0749      	lsls	r1, r1, #29
 8001f02:	430b      	orrs	r3, r1
 8001f04:	4661      	mov	r1, ip
 8001f06:	08cc      	lsrs	r4, r1, #3
 8001f08:	e027      	b.n	8001f5a <__aeabi_dsub+0x2f6>
 8001f0a:	0008      	movs	r0, r1
 8001f0c:	4338      	orrs	r0, r7
 8001f0e:	d061      	beq.n	8001fd4 <__aeabi_dsub+0x370>
 8001f10:	1e50      	subs	r0, r2, #1
 8001f12:	2a01      	cmp	r2, #1
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dsub+0x2b4>
 8001f16:	e139      	b.n	800218c <__aeabi_dsub+0x528>
 8001f18:	42a2      	cmp	r2, r4
 8001f1a:	d027      	beq.n	8001f6c <__aeabi_dsub+0x308>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	e75d      	b.n	8001ddc <__aeabi_dsub+0x178>
 8001f20:	0002      	movs	r2, r0
 8001f22:	391f      	subs	r1, #31
 8001f24:	40ca      	lsrs	r2, r1
 8001f26:	0011      	movs	r1, r2
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d003      	beq.n	8001f34 <__aeabi_dsub+0x2d0>
 8001f2c:	2240      	movs	r2, #64	; 0x40
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	4098      	lsls	r0, r3
 8001f32:	4304      	orrs	r4, r0
 8001f34:	1e63      	subs	r3, r4, #1
 8001f36:	419c      	sbcs	r4, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	4699      	mov	r9, r3
 8001f3c:	4698      	mov	r8, r3
 8001f3e:	430c      	orrs	r4, r1
 8001f40:	0763      	lsls	r3, r4, #29
 8001f42:	d000      	beq.n	8001f46 <__aeabi_dsub+0x2e2>
 8001f44:	e712      	b.n	8001d6c <__aeabi_dsub+0x108>
 8001f46:	464b      	mov	r3, r9
 8001f48:	464a      	mov	r2, r9
 8001f4a:	08e4      	lsrs	r4, r4, #3
 8001f4c:	075b      	lsls	r3, r3, #29
 8001f4e:	4323      	orrs	r3, r4
 8001f50:	08d4      	lsrs	r4, r2, #3
 8001f52:	4642      	mov	r2, r8
 8001f54:	4919      	ldr	r1, [pc, #100]	; (8001fbc <__aeabi_dsub+0x358>)
 8001f56:	428a      	cmp	r2, r1
 8001f58:	d00e      	beq.n	8001f78 <__aeabi_dsub+0x314>
 8001f5a:	0324      	lsls	r4, r4, #12
 8001f5c:	0552      	lsls	r2, r2, #21
 8001f5e:	0b24      	lsrs	r4, r4, #12
 8001f60:	0d52      	lsrs	r2, r2, #21
 8001f62:	e722      	b.n	8001daa <__aeabi_dsub+0x146>
 8001f64:	000a      	movs	r2, r1
 8001f66:	2400      	movs	r4, #0
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e71e      	b.n	8001daa <__aeabi_dsub+0x146>
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	4662      	mov	r2, ip
 8001f70:	0752      	lsls	r2, r2, #29
 8001f72:	4313      	orrs	r3, r2
 8001f74:	4662      	mov	r2, ip
 8001f76:	08d4      	lsrs	r4, r2, #3
 8001f78:	001a      	movs	r2, r3
 8001f7a:	4322      	orrs	r2, r4
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x31c>
 8001f7e:	e1fc      	b.n	800237a <__aeabi_dsub+0x716>
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	0312      	lsls	r2, r2, #12
 8001f84:	4314      	orrs	r4, r2
 8001f86:	0324      	lsls	r4, r4, #12
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <__aeabi_dsub+0x358>)
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	e70d      	b.n	8001daa <__aeabi_dsub+0x146>
 8001f8e:	0020      	movs	r0, r4
 8001f90:	f000 faf6 	bl	8002580 <__clzsi2>
 8001f94:	0001      	movs	r1, r0
 8001f96:	3118      	adds	r1, #24
 8001f98:	291f      	cmp	r1, #31
 8001f9a:	dc00      	bgt.n	8001f9e <__aeabi_dsub+0x33a>
 8001f9c:	e6c4      	b.n	8001d28 <__aeabi_dsub+0xc4>
 8001f9e:	3808      	subs	r0, #8
 8001fa0:	4084      	lsls	r4, r0
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	0020      	movs	r0, r4
 8001fa6:	2400      	movs	r4, #0
 8001fa8:	4588      	cmp	r8, r1
 8001faa:	dc00      	bgt.n	8001fae <__aeabi_dsub+0x34a>
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_dsub+0xdc>
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <__aeabi_dsub+0x35c>)
 8001fb0:	1a5b      	subs	r3, r3, r1
 8001fb2:	4010      	ands	r0, r2
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	4681      	mov	r9, r0
 8001fb8:	e6d6      	b.n	8001d68 <__aeabi_dsub+0x104>
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	000007ff 	.word	0x000007ff
 8001fc0:	ff7fffff 	.word	0xff7fffff
 8001fc4:	fffff801 	.word	0xfffff801
 8001fc8:	000007fe 	.word	0x000007fe
 8001fcc:	430f      	orrs	r7, r1
 8001fce:	1e7a      	subs	r2, r7, #1
 8001fd0:	4197      	sbcs	r7, r2
 8001fd2:	e691      	b.n	8001cf8 <__aeabi_dsub+0x94>
 8001fd4:	4661      	mov	r1, ip
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	0749      	lsls	r1, r1, #29
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	4661      	mov	r1, ip
 8001fde:	08cc      	lsrs	r4, r1, #3
 8001fe0:	e7b8      	b.n	8001f54 <__aeabi_dsub+0x2f0>
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	4cd3      	ldr	r4, [pc, #844]	; (8002334 <__aeabi_dsub+0x6d0>)
 8001fe6:	3001      	adds	r0, #1
 8001fe8:	4220      	tst	r0, r4
 8001fea:	d000      	beq.n	8001fee <__aeabi_dsub+0x38a>
 8001fec:	e0a2      	b.n	8002134 <__aeabi_dsub+0x4d0>
 8001fee:	4640      	mov	r0, r8
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d000      	beq.n	8001ff6 <__aeabi_dsub+0x392>
 8001ff4:	e101      	b.n	80021fa <__aeabi_dsub+0x596>
 8001ff6:	4660      	mov	r0, ip
 8001ff8:	4318      	orrs	r0, r3
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x39a>
 8001ffc:	e15e      	b.n	80022bc <__aeabi_dsub+0x658>
 8001ffe:	0008      	movs	r0, r1
 8002000:	4338      	orrs	r0, r7
 8002002:	d000      	beq.n	8002006 <__aeabi_dsub+0x3a2>
 8002004:	e15f      	b.n	80022c6 <__aeabi_dsub+0x662>
 8002006:	4661      	mov	r1, ip
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	0749      	lsls	r1, r1, #29
 800200c:	430b      	orrs	r3, r1
 800200e:	4661      	mov	r1, ip
 8002010:	08cc      	lsrs	r4, r1, #3
 8002012:	e7a2      	b.n	8001f5a <__aeabi_dsub+0x2f6>
 8002014:	4dc8      	ldr	r5, [pc, #800]	; (8002338 <__aeabi_dsub+0x6d4>)
 8002016:	42a8      	cmp	r0, r5
 8002018:	d100      	bne.n	800201c <__aeabi_dsub+0x3b8>
 800201a:	e0cf      	b.n	80021bc <__aeabi_dsub+0x558>
 800201c:	2580      	movs	r5, #128	; 0x80
 800201e:	4664      	mov	r4, ip
 8002020:	042d      	lsls	r5, r5, #16
 8002022:	432c      	orrs	r4, r5
 8002024:	46a4      	mov	ip, r4
 8002026:	2a38      	cmp	r2, #56	; 0x38
 8002028:	dc56      	bgt.n	80020d8 <__aeabi_dsub+0x474>
 800202a:	2a1f      	cmp	r2, #31
 800202c:	dd00      	ble.n	8002030 <__aeabi_dsub+0x3cc>
 800202e:	e0d1      	b.n	80021d4 <__aeabi_dsub+0x570>
 8002030:	2520      	movs	r5, #32
 8002032:	001e      	movs	r6, r3
 8002034:	1aad      	subs	r5, r5, r2
 8002036:	4664      	mov	r4, ip
 8002038:	40ab      	lsls	r3, r5
 800203a:	40ac      	lsls	r4, r5
 800203c:	40d6      	lsrs	r6, r2
 800203e:	1e5d      	subs	r5, r3, #1
 8002040:	41ab      	sbcs	r3, r5
 8002042:	4334      	orrs	r4, r6
 8002044:	4323      	orrs	r3, r4
 8002046:	4664      	mov	r4, ip
 8002048:	40d4      	lsrs	r4, r2
 800204a:	1b09      	subs	r1, r1, r4
 800204c:	e049      	b.n	80020e2 <__aeabi_dsub+0x47e>
 800204e:	4660      	mov	r0, ip
 8002050:	1bdc      	subs	r4, r3, r7
 8002052:	1a46      	subs	r6, r0, r1
 8002054:	42a3      	cmp	r3, r4
 8002056:	4180      	sbcs	r0, r0
 8002058:	4240      	negs	r0, r0
 800205a:	4681      	mov	r9, r0
 800205c:	0030      	movs	r0, r6
 800205e:	464e      	mov	r6, r9
 8002060:	1b80      	subs	r0, r0, r6
 8002062:	4681      	mov	r9, r0
 8002064:	0200      	lsls	r0, r0, #8
 8002066:	d476      	bmi.n	8002156 <__aeabi_dsub+0x4f2>
 8002068:	464b      	mov	r3, r9
 800206a:	4323      	orrs	r3, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x40c>
 800206e:	e652      	b.n	8001d16 <__aeabi_dsub+0xb2>
 8002070:	2400      	movs	r4, #0
 8002072:	2500      	movs	r5, #0
 8002074:	e771      	b.n	8001f5a <__aeabi_dsub+0x2f6>
 8002076:	4339      	orrs	r1, r7
 8002078:	000c      	movs	r4, r1
 800207a:	1e62      	subs	r2, r4, #1
 800207c:	4194      	sbcs	r4, r2
 800207e:	18e4      	adds	r4, r4, r3
 8002080:	429c      	cmp	r4, r3
 8002082:	419b      	sbcs	r3, r3
 8002084:	425b      	negs	r3, r3
 8002086:	4463      	add	r3, ip
 8002088:	4699      	mov	r9, r3
 800208a:	464b      	mov	r3, r9
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	d400      	bmi.n	8002092 <__aeabi_dsub+0x42e>
 8002090:	e756      	b.n	8001f40 <__aeabi_dsub+0x2dc>
 8002092:	2301      	movs	r3, #1
 8002094:	469c      	mov	ip, r3
 8002096:	4ba8      	ldr	r3, [pc, #672]	; (8002338 <__aeabi_dsub+0x6d4>)
 8002098:	44e0      	add	r8, ip
 800209a:	4598      	cmp	r8, r3
 800209c:	d038      	beq.n	8002110 <__aeabi_dsub+0x4ac>
 800209e:	464b      	mov	r3, r9
 80020a0:	48a6      	ldr	r0, [pc, #664]	; (800233c <__aeabi_dsub+0x6d8>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	4003      	ands	r3, r0
 80020a6:	0018      	movs	r0, r3
 80020a8:	0863      	lsrs	r3, r4, #1
 80020aa:	4014      	ands	r4, r2
 80020ac:	431c      	orrs	r4, r3
 80020ae:	07c3      	lsls	r3, r0, #31
 80020b0:	431c      	orrs	r4, r3
 80020b2:	0843      	lsrs	r3, r0, #1
 80020b4:	4699      	mov	r9, r3
 80020b6:	e657      	b.n	8001d68 <__aeabi_dsub+0x104>
 80020b8:	0010      	movs	r0, r2
 80020ba:	000e      	movs	r6, r1
 80020bc:	3820      	subs	r0, #32
 80020be:	40c6      	lsrs	r6, r0
 80020c0:	2a20      	cmp	r2, #32
 80020c2:	d004      	beq.n	80020ce <__aeabi_dsub+0x46a>
 80020c4:	2040      	movs	r0, #64	; 0x40
 80020c6:	1a82      	subs	r2, r0, r2
 80020c8:	4091      	lsls	r1, r2
 80020ca:	430f      	orrs	r7, r1
 80020cc:	46b9      	mov	r9, r7
 80020ce:	464f      	mov	r7, r9
 80020d0:	1e7a      	subs	r2, r7, #1
 80020d2:	4197      	sbcs	r7, r2
 80020d4:	4337      	orrs	r7, r6
 80020d6:	e60f      	b.n	8001cf8 <__aeabi_dsub+0x94>
 80020d8:	4662      	mov	r2, ip
 80020da:	431a      	orrs	r2, r3
 80020dc:	0013      	movs	r3, r2
 80020de:	1e5a      	subs	r2, r3, #1
 80020e0:	4193      	sbcs	r3, r2
 80020e2:	1afc      	subs	r4, r7, r3
 80020e4:	42a7      	cmp	r7, r4
 80020e6:	41bf      	sbcs	r7, r7
 80020e8:	427f      	negs	r7, r7
 80020ea:	1bcb      	subs	r3, r1, r7
 80020ec:	4699      	mov	r9, r3
 80020ee:	465d      	mov	r5, fp
 80020f0:	4680      	mov	r8, r0
 80020f2:	e608      	b.n	8001d06 <__aeabi_dsub+0xa2>
 80020f4:	4666      	mov	r6, ip
 80020f6:	431e      	orrs	r6, r3
 80020f8:	d100      	bne.n	80020fc <__aeabi_dsub+0x498>
 80020fa:	e0be      	b.n	800227a <__aeabi_dsub+0x616>
 80020fc:	1e56      	subs	r6, r2, #1
 80020fe:	2a01      	cmp	r2, #1
 8002100:	d100      	bne.n	8002104 <__aeabi_dsub+0x4a0>
 8002102:	e109      	b.n	8002318 <__aeabi_dsub+0x6b4>
 8002104:	4c8c      	ldr	r4, [pc, #560]	; (8002338 <__aeabi_dsub+0x6d4>)
 8002106:	42a2      	cmp	r2, r4
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x4a8>
 800210a:	e119      	b.n	8002340 <__aeabi_dsub+0x6dc>
 800210c:	0032      	movs	r2, r6
 800210e:	e6c1      	b.n	8001e94 <__aeabi_dsub+0x230>
 8002110:	4642      	mov	r2, r8
 8002112:	2400      	movs	r4, #0
 8002114:	2300      	movs	r3, #0
 8002116:	e648      	b.n	8001daa <__aeabi_dsub+0x146>
 8002118:	2020      	movs	r0, #32
 800211a:	000c      	movs	r4, r1
 800211c:	1a80      	subs	r0, r0, r2
 800211e:	003e      	movs	r6, r7
 8002120:	4087      	lsls	r7, r0
 8002122:	4084      	lsls	r4, r0
 8002124:	40d6      	lsrs	r6, r2
 8002126:	1e78      	subs	r0, r7, #1
 8002128:	4187      	sbcs	r7, r0
 800212a:	40d1      	lsrs	r1, r2
 800212c:	4334      	orrs	r4, r6
 800212e:	433c      	orrs	r4, r7
 8002130:	448c      	add	ip, r1
 8002132:	e7a4      	b.n	800207e <__aeabi_dsub+0x41a>
 8002134:	4a80      	ldr	r2, [pc, #512]	; (8002338 <__aeabi_dsub+0x6d4>)
 8002136:	4290      	cmp	r0, r2
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x4d8>
 800213a:	e0e9      	b.n	8002310 <__aeabi_dsub+0x6ac>
 800213c:	19df      	adds	r7, r3, r7
 800213e:	429f      	cmp	r7, r3
 8002140:	419b      	sbcs	r3, r3
 8002142:	4461      	add	r1, ip
 8002144:	425b      	negs	r3, r3
 8002146:	18c9      	adds	r1, r1, r3
 8002148:	07cc      	lsls	r4, r1, #31
 800214a:	087f      	lsrs	r7, r7, #1
 800214c:	084b      	lsrs	r3, r1, #1
 800214e:	4699      	mov	r9, r3
 8002150:	4680      	mov	r8, r0
 8002152:	433c      	orrs	r4, r7
 8002154:	e6f4      	b.n	8001f40 <__aeabi_dsub+0x2dc>
 8002156:	1afc      	subs	r4, r7, r3
 8002158:	42a7      	cmp	r7, r4
 800215a:	41bf      	sbcs	r7, r7
 800215c:	4663      	mov	r3, ip
 800215e:	427f      	negs	r7, r7
 8002160:	1ac9      	subs	r1, r1, r3
 8002162:	1bcb      	subs	r3, r1, r7
 8002164:	4699      	mov	r9, r3
 8002166:	465d      	mov	r5, fp
 8002168:	e5d5      	b.n	8001d16 <__aeabi_dsub+0xb2>
 800216a:	08ff      	lsrs	r7, r7, #3
 800216c:	074b      	lsls	r3, r1, #29
 800216e:	465d      	mov	r5, fp
 8002170:	433b      	orrs	r3, r7
 8002172:	08cc      	lsrs	r4, r1, #3
 8002174:	e6ee      	b.n	8001f54 <__aeabi_dsub+0x2f0>
 8002176:	4662      	mov	r2, ip
 8002178:	431a      	orrs	r2, r3
 800217a:	d000      	beq.n	800217e <__aeabi_dsub+0x51a>
 800217c:	e082      	b.n	8002284 <__aeabi_dsub+0x620>
 800217e:	000b      	movs	r3, r1
 8002180:	433b      	orrs	r3, r7
 8002182:	d11b      	bne.n	80021bc <__aeabi_dsub+0x558>
 8002184:	2480      	movs	r4, #128	; 0x80
 8002186:	2500      	movs	r5, #0
 8002188:	0324      	lsls	r4, r4, #12
 800218a:	e6f9      	b.n	8001f80 <__aeabi_dsub+0x31c>
 800218c:	19dc      	adds	r4, r3, r7
 800218e:	429c      	cmp	r4, r3
 8002190:	419b      	sbcs	r3, r3
 8002192:	4461      	add	r1, ip
 8002194:	4689      	mov	r9, r1
 8002196:	425b      	negs	r3, r3
 8002198:	4499      	add	r9, r3
 800219a:	464b      	mov	r3, r9
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	d444      	bmi.n	800222a <__aeabi_dsub+0x5c6>
 80021a0:	2301      	movs	r3, #1
 80021a2:	4698      	mov	r8, r3
 80021a4:	e6cc      	b.n	8001f40 <__aeabi_dsub+0x2dc>
 80021a6:	1bdc      	subs	r4, r3, r7
 80021a8:	4662      	mov	r2, ip
 80021aa:	42a3      	cmp	r3, r4
 80021ac:	419b      	sbcs	r3, r3
 80021ae:	1a51      	subs	r1, r2, r1
 80021b0:	425b      	negs	r3, r3
 80021b2:	1acb      	subs	r3, r1, r3
 80021b4:	4699      	mov	r9, r3
 80021b6:	2301      	movs	r3, #1
 80021b8:	4698      	mov	r8, r3
 80021ba:	e5a4      	b.n	8001d06 <__aeabi_dsub+0xa2>
 80021bc:	08ff      	lsrs	r7, r7, #3
 80021be:	074b      	lsls	r3, r1, #29
 80021c0:	465d      	mov	r5, fp
 80021c2:	433b      	orrs	r3, r7
 80021c4:	08cc      	lsrs	r4, r1, #3
 80021c6:	e6d7      	b.n	8001f78 <__aeabi_dsub+0x314>
 80021c8:	4662      	mov	r2, ip
 80021ca:	431a      	orrs	r2, r3
 80021cc:	0014      	movs	r4, r2
 80021ce:	1e63      	subs	r3, r4, #1
 80021d0:	419c      	sbcs	r4, r3
 80021d2:	e679      	b.n	8001ec8 <__aeabi_dsub+0x264>
 80021d4:	0015      	movs	r5, r2
 80021d6:	4664      	mov	r4, ip
 80021d8:	3d20      	subs	r5, #32
 80021da:	40ec      	lsrs	r4, r5
 80021dc:	46a0      	mov	r8, r4
 80021de:	2a20      	cmp	r2, #32
 80021e0:	d005      	beq.n	80021ee <__aeabi_dsub+0x58a>
 80021e2:	2540      	movs	r5, #64	; 0x40
 80021e4:	4664      	mov	r4, ip
 80021e6:	1aaa      	subs	r2, r5, r2
 80021e8:	4094      	lsls	r4, r2
 80021ea:	4323      	orrs	r3, r4
 80021ec:	469a      	mov	sl, r3
 80021ee:	4654      	mov	r4, sl
 80021f0:	1e63      	subs	r3, r4, #1
 80021f2:	419c      	sbcs	r4, r3
 80021f4:	4643      	mov	r3, r8
 80021f6:	4323      	orrs	r3, r4
 80021f8:	e773      	b.n	80020e2 <__aeabi_dsub+0x47e>
 80021fa:	4662      	mov	r2, ip
 80021fc:	431a      	orrs	r2, r3
 80021fe:	d023      	beq.n	8002248 <__aeabi_dsub+0x5e4>
 8002200:	000a      	movs	r2, r1
 8002202:	433a      	orrs	r2, r7
 8002204:	d000      	beq.n	8002208 <__aeabi_dsub+0x5a4>
 8002206:	e0a0      	b.n	800234a <__aeabi_dsub+0x6e6>
 8002208:	4662      	mov	r2, ip
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	0752      	lsls	r2, r2, #29
 800220e:	4313      	orrs	r3, r2
 8002210:	4662      	mov	r2, ip
 8002212:	08d4      	lsrs	r4, r2, #3
 8002214:	e6b0      	b.n	8001f78 <__aeabi_dsub+0x314>
 8002216:	000b      	movs	r3, r1
 8002218:	433b      	orrs	r3, r7
 800221a:	d100      	bne.n	800221e <__aeabi_dsub+0x5ba>
 800221c:	e728      	b.n	8002070 <__aeabi_dsub+0x40c>
 800221e:	08ff      	lsrs	r7, r7, #3
 8002220:	074b      	lsls	r3, r1, #29
 8002222:	465d      	mov	r5, fp
 8002224:	433b      	orrs	r3, r7
 8002226:	08cc      	lsrs	r4, r1, #3
 8002228:	e697      	b.n	8001f5a <__aeabi_dsub+0x2f6>
 800222a:	2302      	movs	r3, #2
 800222c:	4698      	mov	r8, r3
 800222e:	e736      	b.n	800209e <__aeabi_dsub+0x43a>
 8002230:	1afc      	subs	r4, r7, r3
 8002232:	42a7      	cmp	r7, r4
 8002234:	41bf      	sbcs	r7, r7
 8002236:	4663      	mov	r3, ip
 8002238:	427f      	negs	r7, r7
 800223a:	1ac9      	subs	r1, r1, r3
 800223c:	1bcb      	subs	r3, r1, r7
 800223e:	4699      	mov	r9, r3
 8002240:	2301      	movs	r3, #1
 8002242:	465d      	mov	r5, fp
 8002244:	4698      	mov	r8, r3
 8002246:	e55e      	b.n	8001d06 <__aeabi_dsub+0xa2>
 8002248:	074b      	lsls	r3, r1, #29
 800224a:	08ff      	lsrs	r7, r7, #3
 800224c:	433b      	orrs	r3, r7
 800224e:	08cc      	lsrs	r4, r1, #3
 8002250:	e692      	b.n	8001f78 <__aeabi_dsub+0x314>
 8002252:	1bdc      	subs	r4, r3, r7
 8002254:	4660      	mov	r0, ip
 8002256:	42a3      	cmp	r3, r4
 8002258:	41b6      	sbcs	r6, r6
 800225a:	1a40      	subs	r0, r0, r1
 800225c:	4276      	negs	r6, r6
 800225e:	1b80      	subs	r0, r0, r6
 8002260:	4681      	mov	r9, r0
 8002262:	0200      	lsls	r0, r0, #8
 8002264:	d560      	bpl.n	8002328 <__aeabi_dsub+0x6c4>
 8002266:	1afc      	subs	r4, r7, r3
 8002268:	42a7      	cmp	r7, r4
 800226a:	41bf      	sbcs	r7, r7
 800226c:	4663      	mov	r3, ip
 800226e:	427f      	negs	r7, r7
 8002270:	1ac9      	subs	r1, r1, r3
 8002272:	1bcb      	subs	r3, r1, r7
 8002274:	4699      	mov	r9, r3
 8002276:	465d      	mov	r5, fp
 8002278:	e576      	b.n	8001d68 <__aeabi_dsub+0x104>
 800227a:	08ff      	lsrs	r7, r7, #3
 800227c:	074b      	lsls	r3, r1, #29
 800227e:	433b      	orrs	r3, r7
 8002280:	08cc      	lsrs	r4, r1, #3
 8002282:	e667      	b.n	8001f54 <__aeabi_dsub+0x2f0>
 8002284:	000a      	movs	r2, r1
 8002286:	08db      	lsrs	r3, r3, #3
 8002288:	433a      	orrs	r2, r7
 800228a:	d100      	bne.n	800228e <__aeabi_dsub+0x62a>
 800228c:	e66f      	b.n	8001f6e <__aeabi_dsub+0x30a>
 800228e:	4662      	mov	r2, ip
 8002290:	0752      	lsls	r2, r2, #29
 8002292:	4313      	orrs	r3, r2
 8002294:	4662      	mov	r2, ip
 8002296:	08d4      	lsrs	r4, r2, #3
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	0312      	lsls	r2, r2, #12
 800229c:	4214      	tst	r4, r2
 800229e:	d007      	beq.n	80022b0 <__aeabi_dsub+0x64c>
 80022a0:	08c8      	lsrs	r0, r1, #3
 80022a2:	4210      	tst	r0, r2
 80022a4:	d104      	bne.n	80022b0 <__aeabi_dsub+0x64c>
 80022a6:	465d      	mov	r5, fp
 80022a8:	0004      	movs	r4, r0
 80022aa:	08fb      	lsrs	r3, r7, #3
 80022ac:	0749      	lsls	r1, r1, #29
 80022ae:	430b      	orrs	r3, r1
 80022b0:	0f5a      	lsrs	r2, r3, #29
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	0752      	lsls	r2, r2, #29
 80022b8:	4313      	orrs	r3, r2
 80022ba:	e65d      	b.n	8001f78 <__aeabi_dsub+0x314>
 80022bc:	074b      	lsls	r3, r1, #29
 80022be:	08ff      	lsrs	r7, r7, #3
 80022c0:	433b      	orrs	r3, r7
 80022c2:	08cc      	lsrs	r4, r1, #3
 80022c4:	e649      	b.n	8001f5a <__aeabi_dsub+0x2f6>
 80022c6:	19dc      	adds	r4, r3, r7
 80022c8:	429c      	cmp	r4, r3
 80022ca:	419b      	sbcs	r3, r3
 80022cc:	4461      	add	r1, ip
 80022ce:	4689      	mov	r9, r1
 80022d0:	425b      	negs	r3, r3
 80022d2:	4499      	add	r9, r3
 80022d4:	464b      	mov	r3, r9
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	d400      	bmi.n	80022dc <__aeabi_dsub+0x678>
 80022da:	e631      	b.n	8001f40 <__aeabi_dsub+0x2dc>
 80022dc:	464a      	mov	r2, r9
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <__aeabi_dsub+0x6d8>)
 80022e0:	401a      	ands	r2, r3
 80022e2:	2301      	movs	r3, #1
 80022e4:	4691      	mov	r9, r2
 80022e6:	4698      	mov	r8, r3
 80022e8:	e62a      	b.n	8001f40 <__aeabi_dsub+0x2dc>
 80022ea:	0016      	movs	r6, r2
 80022ec:	4664      	mov	r4, ip
 80022ee:	3e20      	subs	r6, #32
 80022f0:	40f4      	lsrs	r4, r6
 80022f2:	46a0      	mov	r8, r4
 80022f4:	2a20      	cmp	r2, #32
 80022f6:	d005      	beq.n	8002304 <__aeabi_dsub+0x6a0>
 80022f8:	2640      	movs	r6, #64	; 0x40
 80022fa:	4664      	mov	r4, ip
 80022fc:	1ab2      	subs	r2, r6, r2
 80022fe:	4094      	lsls	r4, r2
 8002300:	4323      	orrs	r3, r4
 8002302:	469a      	mov	sl, r3
 8002304:	4654      	mov	r4, sl
 8002306:	1e63      	subs	r3, r4, #1
 8002308:	419c      	sbcs	r4, r3
 800230a:	4643      	mov	r3, r8
 800230c:	431c      	orrs	r4, r3
 800230e:	e5db      	b.n	8001ec8 <__aeabi_dsub+0x264>
 8002310:	0002      	movs	r2, r0
 8002312:	2400      	movs	r4, #0
 8002314:	2300      	movs	r3, #0
 8002316:	e548      	b.n	8001daa <__aeabi_dsub+0x146>
 8002318:	19dc      	adds	r4, r3, r7
 800231a:	42bc      	cmp	r4, r7
 800231c:	41bf      	sbcs	r7, r7
 800231e:	4461      	add	r1, ip
 8002320:	4689      	mov	r9, r1
 8002322:	427f      	negs	r7, r7
 8002324:	44b9      	add	r9, r7
 8002326:	e738      	b.n	800219a <__aeabi_dsub+0x536>
 8002328:	464b      	mov	r3, r9
 800232a:	4323      	orrs	r3, r4
 800232c:	d100      	bne.n	8002330 <__aeabi_dsub+0x6cc>
 800232e:	e69f      	b.n	8002070 <__aeabi_dsub+0x40c>
 8002330:	e606      	b.n	8001f40 <__aeabi_dsub+0x2dc>
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	000007fe 	.word	0x000007fe
 8002338:	000007ff 	.word	0x000007ff
 800233c:	ff7fffff 	.word	0xff7fffff
 8002340:	08ff      	lsrs	r7, r7, #3
 8002342:	074b      	lsls	r3, r1, #29
 8002344:	433b      	orrs	r3, r7
 8002346:	08cc      	lsrs	r4, r1, #3
 8002348:	e616      	b.n	8001f78 <__aeabi_dsub+0x314>
 800234a:	4662      	mov	r2, ip
 800234c:	08db      	lsrs	r3, r3, #3
 800234e:	0752      	lsls	r2, r2, #29
 8002350:	4313      	orrs	r3, r2
 8002352:	4662      	mov	r2, ip
 8002354:	08d4      	lsrs	r4, r2, #3
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	0312      	lsls	r2, r2, #12
 800235a:	4214      	tst	r4, r2
 800235c:	d007      	beq.n	800236e <__aeabi_dsub+0x70a>
 800235e:	08c8      	lsrs	r0, r1, #3
 8002360:	4210      	tst	r0, r2
 8002362:	d104      	bne.n	800236e <__aeabi_dsub+0x70a>
 8002364:	465d      	mov	r5, fp
 8002366:	0004      	movs	r4, r0
 8002368:	08fb      	lsrs	r3, r7, #3
 800236a:	0749      	lsls	r1, r1, #29
 800236c:	430b      	orrs	r3, r1
 800236e:	0f5a      	lsrs	r2, r3, #29
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	0752      	lsls	r2, r2, #29
 8002374:	08db      	lsrs	r3, r3, #3
 8002376:	4313      	orrs	r3, r2
 8002378:	e5fe      	b.n	8001f78 <__aeabi_dsub+0x314>
 800237a:	2300      	movs	r3, #0
 800237c:	4a01      	ldr	r2, [pc, #4]	; (8002384 <__aeabi_dsub+0x720>)
 800237e:	001c      	movs	r4, r3
 8002380:	e513      	b.n	8001daa <__aeabi_dsub+0x146>
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	000007ff 	.word	0x000007ff

08002388 <__aeabi_dcmpun>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	0005      	movs	r5, r0
 800238c:	480c      	ldr	r0, [pc, #48]	; (80023c0 <__aeabi_dcmpun+0x38>)
 800238e:	031c      	lsls	r4, r3, #12
 8002390:	0016      	movs	r6, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	030a      	lsls	r2, r1, #12
 8002396:	0049      	lsls	r1, r1, #1
 8002398:	0b12      	lsrs	r2, r2, #12
 800239a:	0d49      	lsrs	r1, r1, #21
 800239c:	0b24      	lsrs	r4, r4, #12
 800239e:	0d5b      	lsrs	r3, r3, #21
 80023a0:	4281      	cmp	r1, r0
 80023a2:	d008      	beq.n	80023b6 <__aeabi_dcmpun+0x2e>
 80023a4:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <__aeabi_dcmpun+0x38>)
 80023a6:	2000      	movs	r0, #0
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d103      	bne.n	80023b4 <__aeabi_dcmpun+0x2c>
 80023ac:	0020      	movs	r0, r4
 80023ae:	4330      	orrs	r0, r6
 80023b0:	1e43      	subs	r3, r0, #1
 80023b2:	4198      	sbcs	r0, r3
 80023b4:	bd70      	pop	{r4, r5, r6, pc}
 80023b6:	2001      	movs	r0, #1
 80023b8:	432a      	orrs	r2, r5
 80023ba:	d1fb      	bne.n	80023b4 <__aeabi_dcmpun+0x2c>
 80023bc:	e7f2      	b.n	80023a4 <__aeabi_dcmpun+0x1c>
 80023be:	46c0      	nop			; (mov r8, r8)
 80023c0:	000007ff 	.word	0x000007ff

080023c4 <__aeabi_i2d>:
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d016      	beq.n	80023f8 <__aeabi_i2d+0x34>
 80023ca:	17c3      	asrs	r3, r0, #31
 80023cc:	18c5      	adds	r5, r0, r3
 80023ce:	405d      	eors	r5, r3
 80023d0:	0fc4      	lsrs	r4, r0, #31
 80023d2:	0028      	movs	r0, r5
 80023d4:	f000 f8d4 	bl	8002580 <__clzsi2>
 80023d8:	4a11      	ldr	r2, [pc, #68]	; (8002420 <__aeabi_i2d+0x5c>)
 80023da:	1a12      	subs	r2, r2, r0
 80023dc:	280a      	cmp	r0, #10
 80023de:	dc16      	bgt.n	800240e <__aeabi_i2d+0x4a>
 80023e0:	0003      	movs	r3, r0
 80023e2:	002e      	movs	r6, r5
 80023e4:	3315      	adds	r3, #21
 80023e6:	409e      	lsls	r6, r3
 80023e8:	230b      	movs	r3, #11
 80023ea:	1a18      	subs	r0, r3, r0
 80023ec:	40c5      	lsrs	r5, r0
 80023ee:	0552      	lsls	r2, r2, #21
 80023f0:	032d      	lsls	r5, r5, #12
 80023f2:	0b2d      	lsrs	r5, r5, #12
 80023f4:	0d53      	lsrs	r3, r2, #21
 80023f6:	e003      	b.n	8002400 <__aeabi_i2d+0x3c>
 80023f8:	2400      	movs	r4, #0
 80023fa:	2300      	movs	r3, #0
 80023fc:	2500      	movs	r5, #0
 80023fe:	2600      	movs	r6, #0
 8002400:	051b      	lsls	r3, r3, #20
 8002402:	432b      	orrs	r3, r5
 8002404:	07e4      	lsls	r4, r4, #31
 8002406:	4323      	orrs	r3, r4
 8002408:	0030      	movs	r0, r6
 800240a:	0019      	movs	r1, r3
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	380b      	subs	r0, #11
 8002410:	4085      	lsls	r5, r0
 8002412:	0552      	lsls	r2, r2, #21
 8002414:	032d      	lsls	r5, r5, #12
 8002416:	2600      	movs	r6, #0
 8002418:	0b2d      	lsrs	r5, r5, #12
 800241a:	0d53      	lsrs	r3, r2, #21
 800241c:	e7f0      	b.n	8002400 <__aeabi_i2d+0x3c>
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	0000041e 	.word	0x0000041e

08002424 <__aeabi_ui2d>:
 8002424:	b510      	push	{r4, lr}
 8002426:	1e04      	subs	r4, r0, #0
 8002428:	d010      	beq.n	800244c <__aeabi_ui2d+0x28>
 800242a:	f000 f8a9 	bl	8002580 <__clzsi2>
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <__aeabi_ui2d+0x48>)
 8002430:	1a1b      	subs	r3, r3, r0
 8002432:	280a      	cmp	r0, #10
 8002434:	dc11      	bgt.n	800245a <__aeabi_ui2d+0x36>
 8002436:	220b      	movs	r2, #11
 8002438:	0021      	movs	r1, r4
 800243a:	1a12      	subs	r2, r2, r0
 800243c:	40d1      	lsrs	r1, r2
 800243e:	3015      	adds	r0, #21
 8002440:	030a      	lsls	r2, r1, #12
 8002442:	055b      	lsls	r3, r3, #21
 8002444:	4084      	lsls	r4, r0
 8002446:	0b12      	lsrs	r2, r2, #12
 8002448:	0d5b      	lsrs	r3, r3, #21
 800244a:	e001      	b.n	8002450 <__aeabi_ui2d+0x2c>
 800244c:	2300      	movs	r3, #0
 800244e:	2200      	movs	r2, #0
 8002450:	051b      	lsls	r3, r3, #20
 8002452:	4313      	orrs	r3, r2
 8002454:	0020      	movs	r0, r4
 8002456:	0019      	movs	r1, r3
 8002458:	bd10      	pop	{r4, pc}
 800245a:	0022      	movs	r2, r4
 800245c:	380b      	subs	r0, #11
 800245e:	4082      	lsls	r2, r0
 8002460:	055b      	lsls	r3, r3, #21
 8002462:	0312      	lsls	r2, r2, #12
 8002464:	2400      	movs	r4, #0
 8002466:	0b12      	lsrs	r2, r2, #12
 8002468:	0d5b      	lsrs	r3, r3, #21
 800246a:	e7f1      	b.n	8002450 <__aeabi_ui2d+0x2c>
 800246c:	0000041e 	.word	0x0000041e

08002470 <__aeabi_d2f>:
 8002470:	0002      	movs	r2, r0
 8002472:	004b      	lsls	r3, r1, #1
 8002474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002476:	0d5b      	lsrs	r3, r3, #21
 8002478:	030c      	lsls	r4, r1, #12
 800247a:	4e3d      	ldr	r6, [pc, #244]	; (8002570 <__aeabi_d2f+0x100>)
 800247c:	0a64      	lsrs	r4, r4, #9
 800247e:	0f40      	lsrs	r0, r0, #29
 8002480:	1c5f      	adds	r7, r3, #1
 8002482:	0fc9      	lsrs	r1, r1, #31
 8002484:	4304      	orrs	r4, r0
 8002486:	00d5      	lsls	r5, r2, #3
 8002488:	4237      	tst	r7, r6
 800248a:	d00a      	beq.n	80024a2 <__aeabi_d2f+0x32>
 800248c:	4839      	ldr	r0, [pc, #228]	; (8002574 <__aeabi_d2f+0x104>)
 800248e:	181e      	adds	r6, r3, r0
 8002490:	2efe      	cmp	r6, #254	; 0xfe
 8002492:	dd16      	ble.n	80024c2 <__aeabi_d2f+0x52>
 8002494:	20ff      	movs	r0, #255	; 0xff
 8002496:	2400      	movs	r4, #0
 8002498:	05c0      	lsls	r0, r0, #23
 800249a:	4320      	orrs	r0, r4
 800249c:	07c9      	lsls	r1, r1, #31
 800249e:	4308      	orrs	r0, r1
 80024a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <__aeabi_d2f+0x44>
 80024a6:	432c      	orrs	r4, r5
 80024a8:	d026      	beq.n	80024f8 <__aeabi_d2f+0x88>
 80024aa:	2205      	movs	r2, #5
 80024ac:	0192      	lsls	r2, r2, #6
 80024ae:	0a54      	lsrs	r4, r2, #9
 80024b0:	b2d8      	uxtb	r0, r3
 80024b2:	e7f1      	b.n	8002498 <__aeabi_d2f+0x28>
 80024b4:	4325      	orrs	r5, r4
 80024b6:	d0ed      	beq.n	8002494 <__aeabi_d2f+0x24>
 80024b8:	2080      	movs	r0, #128	; 0x80
 80024ba:	03c0      	lsls	r0, r0, #15
 80024bc:	4304      	orrs	r4, r0
 80024be:	20ff      	movs	r0, #255	; 0xff
 80024c0:	e7ea      	b.n	8002498 <__aeabi_d2f+0x28>
 80024c2:	2e00      	cmp	r6, #0
 80024c4:	dd1b      	ble.n	80024fe <__aeabi_d2f+0x8e>
 80024c6:	0192      	lsls	r2, r2, #6
 80024c8:	1e53      	subs	r3, r2, #1
 80024ca:	419a      	sbcs	r2, r3
 80024cc:	00e4      	lsls	r4, r4, #3
 80024ce:	0f6d      	lsrs	r5, r5, #29
 80024d0:	4322      	orrs	r2, r4
 80024d2:	432a      	orrs	r2, r5
 80024d4:	0753      	lsls	r3, r2, #29
 80024d6:	d048      	beq.n	800256a <__aeabi_d2f+0xfa>
 80024d8:	230f      	movs	r3, #15
 80024da:	4013      	ands	r3, r2
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d000      	beq.n	80024e2 <__aeabi_d2f+0x72>
 80024e0:	3204      	adds	r2, #4
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	04db      	lsls	r3, r3, #19
 80024e6:	4013      	ands	r3, r2
 80024e8:	d03f      	beq.n	800256a <__aeabi_d2f+0xfa>
 80024ea:	1c70      	adds	r0, r6, #1
 80024ec:	2efe      	cmp	r6, #254	; 0xfe
 80024ee:	d0d1      	beq.n	8002494 <__aeabi_d2f+0x24>
 80024f0:	0192      	lsls	r2, r2, #6
 80024f2:	0a54      	lsrs	r4, r2, #9
 80024f4:	b2c0      	uxtb	r0, r0
 80024f6:	e7cf      	b.n	8002498 <__aeabi_d2f+0x28>
 80024f8:	2000      	movs	r0, #0
 80024fa:	2400      	movs	r4, #0
 80024fc:	e7cc      	b.n	8002498 <__aeabi_d2f+0x28>
 80024fe:	0032      	movs	r2, r6
 8002500:	3217      	adds	r2, #23
 8002502:	db22      	blt.n	800254a <__aeabi_d2f+0xda>
 8002504:	2080      	movs	r0, #128	; 0x80
 8002506:	0400      	lsls	r0, r0, #16
 8002508:	4320      	orrs	r0, r4
 800250a:	241e      	movs	r4, #30
 800250c:	1ba4      	subs	r4, r4, r6
 800250e:	2c1f      	cmp	r4, #31
 8002510:	dd1d      	ble.n	800254e <__aeabi_d2f+0xde>
 8002512:	2202      	movs	r2, #2
 8002514:	4252      	negs	r2, r2
 8002516:	1b96      	subs	r6, r2, r6
 8002518:	0002      	movs	r2, r0
 800251a:	40f2      	lsrs	r2, r6
 800251c:	0016      	movs	r6, r2
 800251e:	2c20      	cmp	r4, #32
 8002520:	d004      	beq.n	800252c <__aeabi_d2f+0xbc>
 8002522:	4a15      	ldr	r2, [pc, #84]	; (8002578 <__aeabi_d2f+0x108>)
 8002524:	4694      	mov	ip, r2
 8002526:	4463      	add	r3, ip
 8002528:	4098      	lsls	r0, r3
 800252a:	4305      	orrs	r5, r0
 800252c:	002a      	movs	r2, r5
 800252e:	1e53      	subs	r3, r2, #1
 8002530:	419a      	sbcs	r2, r3
 8002532:	4332      	orrs	r2, r6
 8002534:	2600      	movs	r6, #0
 8002536:	0753      	lsls	r3, r2, #29
 8002538:	d1ce      	bne.n	80024d8 <__aeabi_d2f+0x68>
 800253a:	2480      	movs	r4, #128	; 0x80
 800253c:	0013      	movs	r3, r2
 800253e:	04e4      	lsls	r4, r4, #19
 8002540:	2001      	movs	r0, #1
 8002542:	4023      	ands	r3, r4
 8002544:	4222      	tst	r2, r4
 8002546:	d1d3      	bne.n	80024f0 <__aeabi_d2f+0x80>
 8002548:	e7b0      	b.n	80024ac <__aeabi_d2f+0x3c>
 800254a:	2300      	movs	r3, #0
 800254c:	e7ad      	b.n	80024aa <__aeabi_d2f+0x3a>
 800254e:	4a0b      	ldr	r2, [pc, #44]	; (800257c <__aeabi_d2f+0x10c>)
 8002550:	4694      	mov	ip, r2
 8002552:	002a      	movs	r2, r5
 8002554:	40e2      	lsrs	r2, r4
 8002556:	0014      	movs	r4, r2
 8002558:	002a      	movs	r2, r5
 800255a:	4463      	add	r3, ip
 800255c:	409a      	lsls	r2, r3
 800255e:	4098      	lsls	r0, r3
 8002560:	1e55      	subs	r5, r2, #1
 8002562:	41aa      	sbcs	r2, r5
 8002564:	4302      	orrs	r2, r0
 8002566:	4322      	orrs	r2, r4
 8002568:	e7e4      	b.n	8002534 <__aeabi_d2f+0xc4>
 800256a:	0033      	movs	r3, r6
 800256c:	e79e      	b.n	80024ac <__aeabi_d2f+0x3c>
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	000007fe 	.word	0x000007fe
 8002574:	fffffc80 	.word	0xfffffc80
 8002578:	fffffca2 	.word	0xfffffca2
 800257c:	fffffc82 	.word	0xfffffc82

08002580 <__clzsi2>:
 8002580:	211c      	movs	r1, #28
 8002582:	2301      	movs	r3, #1
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	4298      	cmp	r0, r3
 8002588:	d301      	bcc.n	800258e <__clzsi2+0xe>
 800258a:	0c00      	lsrs	r0, r0, #16
 800258c:	3910      	subs	r1, #16
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	4298      	cmp	r0, r3
 8002592:	d301      	bcc.n	8002598 <__clzsi2+0x18>
 8002594:	0a00      	lsrs	r0, r0, #8
 8002596:	3908      	subs	r1, #8
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	4298      	cmp	r0, r3
 800259c:	d301      	bcc.n	80025a2 <__clzsi2+0x22>
 800259e:	0900      	lsrs	r0, r0, #4
 80025a0:	3904      	subs	r1, #4
 80025a2:	a202      	add	r2, pc, #8	; (adr r2, 80025ac <__clzsi2+0x2c>)
 80025a4:	5c10      	ldrb	r0, [r2, r0]
 80025a6:	1840      	adds	r0, r0, r1
 80025a8:	4770      	bx	lr
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	02020304 	.word	0x02020304
 80025b0:	01010101 	.word	0x01010101
	...

080025bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025c0:	f000 fc58 	bl	8002e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025c4:	f000 f822 	bl	800260c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c8:	f000 f950 	bl	800286c <MX_GPIO_Init>
  MX_DMA_Init();
 80025cc:	f000 f930 	bl	8002830 <MX_DMA_Init>
  MX_ADC_Init();
 80025d0:	f000 f860 	bl	8002694 <MX_ADC_Init>
  MX_TIM15_Init();
 80025d4:	f000 f8d4 	bl	8002780 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 80025d8:	4b09      	ldr	r3, [pc, #36]	; (8002600 <main+0x44>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f001 f856 	bl	800368c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)adc_val, 3);
 80025e0:	4908      	ldr	r1, [pc, #32]	; (8002604 <main+0x48>)
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <main+0x44>)
 80025e4:	2203      	movs	r2, #3
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 fdc8 	bl	800317c <HAL_ADC_Start_DMA>
  //HAL_ADC_Start_IT(&hadc);

  HAL_TIM_Base_Start(&htim15);
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <main+0x4c>)
 80025ee:	0018      	movs	r0, r3
 80025f0:	f002 f96e 	bl	80048d0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <main+0x4c>)
 80025f6:	0018      	movs	r0, r3
 80025f8:	f002 f983 	bl	8004902 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <main+0x40>
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20000088 	.word	0x20000088
 8002604:	20000158 	.word	0x20000158
 8002608:	20000118 	.word	0x20000118

0800260c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b091      	sub	sp, #68	; 0x44
 8002610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002612:	2410      	movs	r4, #16
 8002614:	193b      	adds	r3, r7, r4
 8002616:	0018      	movs	r0, r3
 8002618:	2330      	movs	r3, #48	; 0x30
 800261a:	001a      	movs	r2, r3
 800261c:	2100      	movs	r1, #0
 800261e:	f002 fe29 	bl	8005274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002622:	003b      	movs	r3, r7
 8002624:	0018      	movs	r0, r3
 8002626:	2310      	movs	r3, #16
 8002628:	001a      	movs	r2, r3
 800262a:	2100      	movs	r1, #0
 800262c:	f002 fe22 	bl	8005274 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8002630:	0021      	movs	r1, r4
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2211      	movs	r2, #17
 8002636:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002638:	187b      	adds	r3, r7, r1
 800263a:	2201      	movs	r2, #1
 800263c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800263e:	187b      	adds	r3, r7, r1
 8002640:	2201      	movs	r2, #1
 8002642:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002644:	187b      	adds	r3, r7, r1
 8002646:	2210      	movs	r2, #16
 8002648:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800264a:	187b      	adds	r3, r7, r1
 800264c:	2200      	movs	r2, #0
 800264e:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002650:	187b      	adds	r3, r7, r1
 8002652:	0018      	movs	r0, r3
 8002654:	f001 fcc4 	bl	8003fe0 <HAL_RCC_OscConfig>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d001      	beq.n	8002660 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800265c:	f000 faa6 	bl	8002bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002660:	003b      	movs	r3, r7
 8002662:	2207      	movs	r2, #7
 8002664:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002666:	003b      	movs	r3, r7
 8002668:	2201      	movs	r2, #1
 800266a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800266c:	003b      	movs	r3, r7
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002672:	003b      	movs	r3, r7
 8002674:	2200      	movs	r2, #0
 8002676:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002678:	003b      	movs	r3, r7
 800267a:	2101      	movs	r1, #1
 800267c:	0018      	movs	r0, r3
 800267e:	f001 ffa3 	bl	80045c8 <HAL_RCC_ClockConfig>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002686:	f000 fa91 	bl	8002bac <Error_Handler>
  }
}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b011      	add	sp, #68	; 0x44
 8002690:	bd90      	pop	{r4, r7, pc}
	...

08002694 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800269a:	1d3b      	adds	r3, r7, #4
 800269c:	0018      	movs	r0, r3
 800269e:	230c      	movs	r3, #12
 80026a0:	001a      	movs	r2, r3
 80026a2:	2100      	movs	r1, #0
 80026a4:	f002 fde6 	bl	8005274 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80026a8:	4b33      	ldr	r3, [pc, #204]	; (8002778 <MX_ADC_Init+0xe4>)
 80026aa:	4a34      	ldr	r2, [pc, #208]	; (800277c <MX_ADC_Init+0xe8>)
 80026ac:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026ae:	4b32      	ldr	r3, [pc, #200]	; (8002778 <MX_ADC_Init+0xe4>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <MX_ADC_Init+0xe4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <MX_ADC_Init+0xe4>)
 80026bc:	2200      	movs	r2, #0
 80026be:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <MX_ADC_Init+0xe4>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026c6:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <MX_ADC_Init+0xe4>)
 80026c8:	2208      	movs	r2, #8
 80026ca:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <MX_ADC_Init+0xe4>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80026d2:	4b29      	ldr	r3, [pc, #164]	; (8002778 <MX_ADC_Init+0xe4>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <MX_ADC_Init+0xe4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <MX_ADC_Init+0xe4>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 80026e4:	4b24      	ldr	r3, [pc, #144]	; (8002778 <MX_ADC_Init+0xe4>)
 80026e6:	2280      	movs	r2, #128	; 0x80
 80026e8:	0052      	lsls	r2, r2, #1
 80026ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026ec:	4b22      	ldr	r3, [pc, #136]	; (8002778 <MX_ADC_Init+0xe4>)
 80026ee:	2280      	movs	r2, #128	; 0x80
 80026f0:	00d2      	lsls	r2, r2, #3
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 80026f4:	4b20      	ldr	r3, [pc, #128]	; (8002778 <MX_ADC_Init+0xe4>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <MX_ADC_Init+0xe4>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002700:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <MX_ADC_Init+0xe4>)
 8002702:	0018      	movs	r0, r3
 8002704:	f000 fbfc 	bl	8002f00 <HAL_ADC_Init>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d001      	beq.n	8002710 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800270c:	f000 fa4e 	bl	8002bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002716:	1d3b      	adds	r3, r7, #4
 8002718:	2280      	movs	r2, #128	; 0x80
 800271a:	0152      	lsls	r2, r2, #5
 800271c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	2280      	movs	r2, #128	; 0x80
 8002722:	0552      	lsls	r2, r2, #21
 8002724:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002726:	1d3a      	adds	r2, r7, #4
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_ADC_Init+0xe4>)
 800272a:	0011      	movs	r1, r2
 800272c:	0018      	movs	r0, r3
 800272e:	f000 fdb7 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8002736:	f000 fa39 	bl	8002bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	2202      	movs	r2, #2
 800273e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002740:	1d3a      	adds	r2, r7, #4
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <MX_ADC_Init+0xe4>)
 8002744:	0011      	movs	r1, r2
 8002746:	0018      	movs	r0, r3
 8002748:	f000 fdaa 	bl	80032a0 <HAL_ADC_ConfigChannel>
 800274c:	1e03      	subs	r3, r0, #0
 800274e:	d001      	beq.n	8002754 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8002750:	f000 fa2c 	bl	8002bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002754:	1d3b      	adds	r3, r7, #4
 8002756:	2203      	movs	r2, #3
 8002758:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800275a:	1d3a      	adds	r2, r7, #4
 800275c:	4b06      	ldr	r3, [pc, #24]	; (8002778 <MX_ADC_Init+0xe4>)
 800275e:	0011      	movs	r1, r2
 8002760:	0018      	movs	r0, r3
 8002762:	f000 fd9d 	bl	80032a0 <HAL_ADC_ConfigChannel>
 8002766:	1e03      	subs	r3, r0, #0
 8002768:	d001      	beq.n	800276e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800276a:	f000 fa1f 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	20000088 	.word	0x20000088
 800277c:	40012400 	.word	0x40012400

08002780 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002786:	2308      	movs	r3, #8
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	0018      	movs	r0, r3
 800278c:	2310      	movs	r3, #16
 800278e:	001a      	movs	r2, r3
 8002790:	2100      	movs	r1, #0
 8002792:	f002 fd6f 	bl	8005274 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002796:	003b      	movs	r3, r7
 8002798:	0018      	movs	r0, r3
 800279a:	2308      	movs	r3, #8
 800279c:	001a      	movs	r2, r3
 800279e:	2100      	movs	r1, #0
 80027a0:	f002 fd68 	bl	8005274 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <MX_TIM15_Init+0xa8>)
 80027a8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1999;
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027ac:	4a1f      	ldr	r2, [pc, #124]	; (800282c <MX_TIM15_Init+0xac>)
 80027ae:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b0:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027d0:	0018      	movs	r0, r3
 80027d2:	f002 f851 	bl	8004878 <HAL_TIM_Base_Init>
 80027d6:	1e03      	subs	r3, r0, #0
 80027d8:	d001      	beq.n	80027de <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80027da:	f000 f9e7 	bl	8002bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027de:	2108      	movs	r1, #8
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2280      	movs	r2, #128	; 0x80
 80027e4:	0152      	lsls	r2, r2, #5
 80027e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80027e8:	187a      	adds	r2, r7, r1
 80027ea:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <MX_TIM15_Init+0xa4>)
 80027ec:	0011      	movs	r1, r2
 80027ee:	0018      	movs	r0, r3
 80027f0:	f002 f9b6 	bl	8004b60 <HAL_TIM_ConfigClockSource>
 80027f4:	1e03      	subs	r3, r0, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80027f8:	f000 f9d8 	bl	8002bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80027fc:	003b      	movs	r3, r7
 80027fe:	2220      	movs	r2, #32
 8002800:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002802:	003b      	movs	r3, r7
 8002804:	2200      	movs	r2, #0
 8002806:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002808:	003a      	movs	r2, r7
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <MX_TIM15_Init+0xa4>)
 800280c:	0011      	movs	r1, r2
 800280e:	0018      	movs	r0, r3
 8002810:	f002 fbd6 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002814:	1e03      	subs	r3, r0, #0
 8002816:	d001      	beq.n	800281c <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8002818:	f000 f9c8 	bl	8002bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b006      	add	sp, #24
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000118 	.word	0x20000118
 8002828:	40014000 	.word	0x40014000
 800282c:	000007cf 	.word	0x000007cf

08002830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_DMA_Init+0x38>)
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <MX_DMA_Init+0x38>)
 800283c:	2101      	movs	r1, #1
 800283e:	430a      	orrs	r2, r1
 8002840:	615a      	str	r2, [r3, #20]
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_DMA_Init+0x38>)
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2201      	movs	r2, #1
 8002848:	4013      	ands	r3, r2
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	2009      	movs	r0, #9
 8002854:	f001 f85c 	bl	8003910 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002858:	2009      	movs	r0, #9
 800285a:	f001 f86e 	bl	800393a <HAL_NVIC_EnableIRQ>

}
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	40021000 	.word	0x40021000

0800286c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002872:	240c      	movs	r4, #12
 8002874:	193b      	adds	r3, r7, r4
 8002876:	0018      	movs	r0, r3
 8002878:	2314      	movs	r3, #20
 800287a:	001a      	movs	r2, r3
 800287c:	2100      	movs	r1, #0
 800287e:	f002 fcf9 	bl	8005274 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <MX_GPIO_Init+0xdc>)
 8002884:	695a      	ldr	r2, [r3, #20]
 8002886:	4b30      	ldr	r3, [pc, #192]	; (8002948 <MX_GPIO_Init+0xdc>)
 8002888:	2180      	movs	r1, #128	; 0x80
 800288a:	03c9      	lsls	r1, r1, #15
 800288c:	430a      	orrs	r2, r1
 800288e:	615a      	str	r2, [r3, #20]
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <MX_GPIO_Init+0xdc>)
 8002892:	695a      	ldr	r2, [r3, #20]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	03db      	lsls	r3, r3, #15
 8002898:	4013      	ands	r3, r2
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <MX_GPIO_Init+0xdc>)
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	4b29      	ldr	r3, [pc, #164]	; (8002948 <MX_GPIO_Init+0xdc>)
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0289      	lsls	r1, r1, #10
 80028a8:	430a      	orrs	r2, r1
 80028aa:	615a      	str	r2, [r3, #20]
 80028ac:	4b26      	ldr	r3, [pc, #152]	; (8002948 <MX_GPIO_Init+0xdc>)
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	029b      	lsls	r3, r3, #10
 80028b4:	4013      	ands	r3, r2
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ba:	4b23      	ldr	r3, [pc, #140]	; (8002948 <MX_GPIO_Init+0xdc>)
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <MX_GPIO_Init+0xdc>)
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0309      	lsls	r1, r1, #12
 80028c4:	430a      	orrs	r2, r1
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <MX_GPIO_Init+0xdc>)
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	031b      	lsls	r3, r3, #12
 80028d0:	4013      	ands	r3, r2
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80028d6:	2390      	movs	r3, #144	; 0x90
 80028d8:	05db      	lsls	r3, r3, #23
 80028da:	2200      	movs	r2, #0
 80028dc:	2101      	movs	r1, #1
 80028de:	0018      	movs	r0, r3
 80028e0:	f001 fb60 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80028e4:	23c0      	movs	r3, #192	; 0xc0
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4818      	ldr	r0, [pc, #96]	; (800294c <MX_GPIO_Init+0xe0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	0019      	movs	r1, r3
 80028ee:	f001 fb59 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	2201      	movs	r2, #1
 80028fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002904:	193b      	adds	r3, r7, r4
 8002906:	2203      	movs	r2, #3
 8002908:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	193a      	adds	r2, r7, r4
 800290c:	2390      	movs	r3, #144	; 0x90
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f001 f9d2 	bl	8003cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002918:	0021      	movs	r1, r4
 800291a:	187b      	adds	r3, r7, r1
 800291c:	22c0      	movs	r2, #192	; 0xc0
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	2201      	movs	r2, #1
 8002926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002928:	187b      	adds	r3, r7, r1
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	187b      	adds	r3, r7, r1
 8002930:	2200      	movs	r2, #0
 8002932:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002934:	187b      	adds	r3, r7, r1
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <MX_GPIO_Init+0xe0>)
 8002938:	0019      	movs	r1, r3
 800293a:	0010      	movs	r0, r2
 800293c:	f001 f9be 	bl	8003cbc <HAL_GPIO_Init>

}
 8002940:	46c0      	nop			; (mov r8, r8)
 8002942:	46bd      	mov	sp, r7
 8002944:	b009      	add	sp, #36	; 0x24
 8002946:	bd90      	pop	{r4, r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	48000800 	.word	0x48000800

08002950 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
       interrupt (0);
       interrupt (1);
       interrupt (2);
       */
    }
}
 8002958:	46c0      	nop			; (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  u_mom_2[0] = (adc_val[0] - 2017) * (adc_val[0] - 2017);
 8002968:	4b7a      	ldr	r3, [pc, #488]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	4a7a      	ldr	r2, [pc, #488]	; (8002b58 <HAL_ADC_ConvCpltCallback+0x1f8>)
 800296e:	4694      	mov	ip, r2
 8002970:	4463      	add	r3, ip
 8002972:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	4978      	ldr	r1, [pc, #480]	; (8002b58 <HAL_ADC_ConvCpltCallback+0x1f8>)
 8002978:	468c      	mov	ip, r1
 800297a:	4462      	add	r2, ip
 800297c:	4353      	muls	r3, r2
 800297e:	001a      	movs	r2, r3
 8002980:	4b76      	ldr	r3, [pc, #472]	; (8002b5c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002982:	601a      	str	r2, [r3, #0]
  u_mom_diff_2[0] = ((adc_val[0] - 2017) - (adc_val[1] - 2017)) * ((adc_val[0] - 2017) - (adc_val[1] - 2017));
 8002984:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	001a      	movs	r2, r3
 800298a:	4b72      	ldr	r3, [pc, #456]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x1f4>)
 800298c:	885b      	ldrh	r3, [r3, #2]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	4a70      	ldr	r2, [pc, #448]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002992:	8812      	ldrh	r2, [r2, #0]
 8002994:	0011      	movs	r1, r2
 8002996:	4a6f      	ldr	r2, [pc, #444]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002998:	8852      	ldrh	r2, [r2, #2]
 800299a:	1a8a      	subs	r2, r1, r2
 800299c:	435a      	muls	r2, r3
 800299e:	4b70      	ldr	r3, [pc, #448]	; (8002b60 <HAL_ADC_ConvCpltCallback+0x200>)
 80029a0:	601a      	str	r2, [r3, #0]
  //u_mom_2[1] = (adc_val[1] - 2017) * (adc_val[1] - 2017);
  //u_mom_2[2] = (adc_val[2] - 2017) * (adc_val[2] - 2017);

  if (u_mom_2[0] > dead_zone_2)
 80029a2:	4b6e      	ldr	r3, [pc, #440]	; (8002b5c <HAL_ADC_ConvCpltCallback+0x1fc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a6f      	ldr	r2, [pc, #444]	; (8002b64 <HAL_ADC_ConvCpltCallback+0x204>)
 80029a8:	8812      	ldrh	r2, [r2, #0]
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d800      	bhi.n	80029b0 <HAL_ADC_ConvCpltCallback+0x50>
 80029ae:	e0be      	b.n	8002b2e <HAL_ADC_ConvCpltCallback+0x1ce>
 {
   if (dead_zone_flag[0] == 1)
 80029b0:	4b6d      	ldr	r3, [pc, #436]	; (8002b68 <HAL_ADC_ConvCpltCallback+0x208>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d000      	beq.n	80029ba <HAL_ADC_ConvCpltCallback+0x5a>
 80029b8:	e0a0      	b.n	8002afc <HAL_ADC_ConvCpltCallback+0x19c>
     {
       dead_zone_flag[0] = 0;
 80029ba:	4b6b      	ldr	r3, [pc, #428]	; (8002b68 <HAL_ADC_ConvCpltCallback+0x208>)
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]
       freq[0] = 4000 / (float) (freq_num_of_meas[0] + num_of_meas[0]);
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_ADC_ConvCpltCallback+0x20c>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	001a      	movs	r2, r3
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x210>)
 80029c8:	881b      	ldrh	r3, [r3, #0]
 80029ca:	18d3      	adds	r3, r2, r3
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7fd ff51 	bl	8000874 <__aeabi_i2f>
 80029d2:	1c03      	adds	r3, r0, #0
 80029d4:	1c19      	adds	r1, r3, #0
 80029d6:	4867      	ldr	r0, [pc, #412]	; (8002b74 <HAL_ADC_ConvCpltCallback+0x214>)
 80029d8:	f7fd fd84 	bl	80004e4 <__aeabi_fdiv>
 80029dc:	1c03      	adds	r3, r0, #0
 80029de:	1c1a      	adds	r2, r3, #0
 80029e0:	4b65      	ldr	r3, [pc, #404]	; (8002b78 <HAL_ADC_ConvCpltCallback+0x218>)
 80029e2:	601a      	str	r2, [r3, #0]

       if (freq[0] > freq_lim_low && freq[0] < freq_lim_upp)
 80029e4:	4b64      	ldr	r3, [pc, #400]	; (8002b78 <HAL_ADC_ConvCpltCallback+0x218>)
 80029e6:	681c      	ldr	r4, [r3, #0]
 80029e8:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <HAL_ADC_ConvCpltCallback+0x21c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7fd ff41 	bl	8000874 <__aeabi_i2f>
 80029f2:	1c03      	adds	r3, r0, #0
 80029f4:	1c19      	adds	r1, r3, #0
 80029f6:	1c20      	adds	r0, r4, #0
 80029f8:	f7fd fd60 	bl	80004bc <__aeabi_fcmpgt>
 80029fc:	1e03      	subs	r3, r0, #0
 80029fe:	d065      	beq.n	8002acc <HAL_ADC_ConvCpltCallback+0x16c>
 8002a00:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <HAL_ADC_ConvCpltCallback+0x218>)
 8002a02:	681c      	ldr	r4, [r3, #0]
 8002a04:	4b5e      	ldr	r3, [pc, #376]	; (8002b80 <HAL_ADC_ConvCpltCallback+0x220>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fd ff33 	bl	8000874 <__aeabi_i2f>
 8002a0e:	1c03      	adds	r3, r0, #0
 8002a10:	1c19      	adds	r1, r3, #0
 8002a12:	1c20      	adds	r0, r4, #0
 8002a14:	f7fd fd3e 	bl	8000494 <__aeabi_fcmplt>
 8002a18:	1e03      	subs	r3, r0, #0
 8002a1a:	d057      	beq.n	8002acc <HAL_ADC_ConvCpltCallback+0x16c>
 	{
 	  u_rms[0] = (sqrt ((u_mom_2_sum[0] + u_mom_2_sum_prev[0]) / (num_of_meas[0] + num_of_meas_prev[0]))) * 0.195;
 8002a1c:	4b59      	ldr	r3, [pc, #356]	; (8002b84 <HAL_ADC_ConvCpltCallback+0x224>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_ADC_ConvCpltCallback+0x228>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	18d2      	adds	r2, r2, r3
 8002a26:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x210>)
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <HAL_ADC_ConvCpltCallback+0x22c>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	18cb      	adds	r3, r1, r3
 8002a32:	0019      	movs	r1, r3
 8002a34:	0010      	movs	r0, r2
 8002a36:	f7fd fb67 	bl	8000108 <__udivsi3>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fcf1 	bl	8002424 <__aeabi_ui2d>
 8002a42:	0002      	movs	r2, r0
 8002a44:	000b      	movs	r3, r1
 8002a46:	0010      	movs	r0, r2
 8002a48:	0019      	movs	r1, r3
 8002a4a:	f002 fb0c 	bl	8005066 <sqrt>
 8002a4e:	4a50      	ldr	r2, [pc, #320]	; (8002b90 <HAL_ADC_ConvCpltCallback+0x230>)
 8002a50:	4b50      	ldr	r3, [pc, #320]	; (8002b94 <HAL_ADC_ConvCpltCallback+0x234>)
 8002a52:	f7fe fe9b 	bl	800178c <__aeabi_dmul>
 8002a56:	0002      	movs	r2, r0
 8002a58:	000b      	movs	r3, r1
 8002a5a:	0010      	movs	r0, r2
 8002a5c:	0019      	movs	r1, r3
 8002a5e:	f7ff fd07 	bl	8002470 <__aeabi_d2f>
 8002a62:	1c02      	adds	r2, r0, #0
 8002a64:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <HAL_ADC_ConvCpltCallback+0x238>)
 8002a66:	601a      	str	r2, [r3, #0]
 	  u_l[0] = (sqrt ((u_mom_diff_2_sum[0] + u_mom_diff_2_sum_prev[0]) / (num_of_meas[0] + num_of_meas_prev[0]))) * 0.195;
 8002a68:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x23c>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b4c      	ldr	r3, [pc, #304]	; (8002ba0 <HAL_ADC_ConvCpltCallback+0x240>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	18d2      	adds	r2, r2, r3
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x210>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	0019      	movs	r1, r3
 8002a78:	4b44      	ldr	r3, [pc, #272]	; (8002b8c <HAL_ADC_ConvCpltCallback+0x22c>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	18cb      	adds	r3, r1, r3
 8002a7e:	0019      	movs	r1, r3
 8002a80:	0010      	movs	r0, r2
 8002a82:	f7fd fbcb 	bl	800021c <__divsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	0018      	movs	r0, r3
 8002a8a:	f7ff fc9b 	bl	80023c4 <__aeabi_i2d>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	000b      	movs	r3, r1
 8002a92:	0010      	movs	r0, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	f002 fae6 	bl	8005066 <sqrt>
 8002a9a:	4a3d      	ldr	r2, [pc, #244]	; (8002b90 <HAL_ADC_ConvCpltCallback+0x230>)
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_ADC_ConvCpltCallback+0x234>)
 8002a9e:	f7fe fe75 	bl	800178c <__aeabi_dmul>
 8002aa2:	0002      	movs	r2, r0
 8002aa4:	000b      	movs	r3, r1
 8002aa6:	0010      	movs	r0, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	f7ff fce1 	bl	8002470 <__aeabi_d2f>
 8002aae:	1c02      	adds	r2, r0, #0
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	; (8002ba4 <HAL_ADC_ConvCpltCallback+0x244>)
 8002ab2:	601a      	str	r2, [r3, #0]
 	  u_l[0] = u_mom_diff_2_sum[0];
 8002ab4:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x23c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fd fedb 	bl	8000874 <__aeabi_i2f>
 8002abe:	1c02      	adds	r2, r0, #0
 8002ac0:	4b38      	ldr	r3, [pc, #224]	; (8002ba4 <HAL_ADC_ConvCpltCallback+0x244>)
 8002ac2:	601a      	str	r2, [r3, #0]
 	  freq_filt[0] = freq[0];
 8002ac4:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <HAL_ADC_ConvCpltCallback+0x218>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b37      	ldr	r3, [pc, #220]	; (8002ba8 <HAL_ADC_ConvCpltCallback+0x248>)
 8002aca:	601a      	str	r2, [r3, #0]
 	}

       u_mom_2_sum_prev[0] = u_mom_2_sum[0];
 8002acc:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_ADC_ConvCpltCallback+0x224>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_ADC_ConvCpltCallback+0x228>)
 8002ad2:	601a      	str	r2, [r3, #0]
       num_of_meas_prev[0] = num_of_meas[0];
 8002ad4:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x210>)
 8002ad6:	881a      	ldrh	r2, [r3, #0]
 8002ad8:	4b2c      	ldr	r3, [pc, #176]	; (8002b8c <HAL_ADC_ConvCpltCallback+0x22c>)
 8002ada:	801a      	strh	r2, [r3, #0]
       u_mom_diff_2_sum_prev[0] = u_mom_diff_2_sum[0];
 8002adc:	4b2f      	ldr	r3, [pc, #188]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x23c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_ADC_ConvCpltCallback+0x240>)
 8002ae2:	601a      	str	r2, [r3, #0]

       u_mom_2_sum[0] = 0;
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_ADC_ConvCpltCallback+0x224>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
       num_of_meas[0] = 0;
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x210>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	801a      	strh	r2, [r3, #0]
       freq_num_of_meas[0] = 0;
 8002af0:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <HAL_ADC_ConvCpltCallback+0x20c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]
       u_mom_diff_2_sum[0] = 0;
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x23c>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
     }

   if (dead_zone_flag[0] == 0)
 8002afc:	4b1a      	ldr	r3, [pc, #104]	; (8002b68 <HAL_ADC_ConvCpltCallback+0x208>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d11d      	bne.n	8002b40 <HAL_ADC_ConvCpltCallback+0x1e0>
     {
       u_mom_diff_2_sum[0] += u_mom_diff_2[0];
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x23c>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_ADC_ConvCpltCallback+0x200>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	18d2      	adds	r2, r2, r3
 8002b0e:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_ADC_ConvCpltCallback+0x23c>)
 8002b10:	601a      	str	r2, [r3, #0]
       u_mom_2_sum[0] += u_mom_2[0];
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_ADC_ConvCpltCallback+0x224>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_ADC_ConvCpltCallback+0x1fc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	18d2      	adds	r2, r2, r3
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_ADC_ConvCpltCallback+0x224>)
 8002b1e:	601a      	str	r2, [r3, #0]
       ++num_of_meas[0];
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x210>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	3301      	adds	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_ADC_ConvCpltCallback+0x210>)
 8002b2a:	801a      	strh	r2, [r3, #0]
 8002b2c:	e008      	b.n	8002b40 <HAL_ADC_ConvCpltCallback+0x1e0>
     }
 }
  else
 {
   dead_zone_flag[0] = 1;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <HAL_ADC_ConvCpltCallback+0x208>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
   ++freq_num_of_meas[0];
 8002b34:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <HAL_ADC_ConvCpltCallback+0x20c>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_ADC_ConvCpltCallback+0x20c>)
 8002b3e:	801a      	strh	r2, [r3, #0]
      u_mom_diff_2_sum = 0;
    }

  HAL_ADC_Start_DMA(hadc, (uint32_t *)adc_val, 3);
  */
  HAL_ADC_Start_DMA(hadc, (uint32_t *)adc_val, 3);
 8002b40:	4904      	ldr	r1, [pc, #16]	; (8002b54 <HAL_ADC_ConvCpltCallback+0x1f4>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2203      	movs	r2, #3
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fb18 	bl	800317c <HAL_ADC_Start_DMA>
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b003      	add	sp, #12
 8002b52:	bd90      	pop	{r4, r7, pc}
 8002b54:	20000158 	.word	0x20000158
 8002b58:	fffff81f 	.word	0xfffff81f
 8002b5c:	2000016c 	.word	0x2000016c
 8002b60:	2000019c 	.word	0x2000019c
 8002b64:	20000000 	.word	0x20000000
 8002b68:	200001d0 	.word	0x200001d0
 8002b6c:	200001ec 	.word	0x200001ec
 8002b70:	200001c0 	.word	0x200001c0
 8002b74:	457a0000 	.word	0x457a0000
 8002b78:	200001d4 	.word	0x200001d4
 8002b7c:	20000003 	.word	0x20000003
 8002b80:	20000002 	.word	0x20000002
 8002b84:	20000178 	.word	0x20000178
 8002b88:	20000184 	.word	0x20000184
 8002b8c:	200001c8 	.word	0x200001c8
 8002b90:	8f5c28f6 	.word	0x8f5c28f6
 8002b94:	3fc8f5c2 	.word	0x3fc8f5c2
 8002b98:	20000160 	.word	0x20000160
 8002b9c:	200001a8 	.word	0x200001a8
 8002ba0:	200001b4 	.word	0x200001b4
 8002ba4:	20000190 	.word	0x20000190
 8002ba8:	200001e0 	.word	0x200001e0

08002bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <HAL_MspInit+0x44>)
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_MspInit+0x44>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	619a      	str	r2, [r3, #24]
 8002bca:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <HAL_MspInit+0x44>)
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	607b      	str	r3, [r7, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_MspInit+0x44>)
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <HAL_MspInit+0x44>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0549      	lsls	r1, r1, #21
 8002be0:	430a      	orrs	r2, r1
 8002be2:	61da      	str	r2, [r3, #28]
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_MspInit+0x44>)
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	055b      	lsls	r3, r3, #21
 8002bec:	4013      	ands	r3, r2
 8002bee:	603b      	str	r3, [r7, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b002      	add	sp, #8
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b08b      	sub	sp, #44	; 0x2c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	2414      	movs	r4, #20
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	2314      	movs	r3, #20
 8002c10:	001a      	movs	r2, r3
 8002c12:	2100      	movs	r1, #0
 8002c14:	f002 fb2e 	bl	8005274 <memset>
  if(hadc->Instance==ADC1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a2d      	ldr	r2, [pc, #180]	; (8002cd4 <HAL_ADC_MspInit+0xd4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d153      	bne.n	8002cca <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_ADC_MspInit+0xd8>)
 8002c24:	699a      	ldr	r2, [r3, #24]
 8002c26:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <HAL_ADC_MspInit+0xd8>)
 8002c28:	2180      	movs	r1, #128	; 0x80
 8002c2a:	0089      	lsls	r1, r1, #2
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	619a      	str	r2, [r3, #24]
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <HAL_ADC_MspInit+0xd8>)
 8002c32:	699a      	ldr	r2, [r3, #24]
 8002c34:	2380      	movs	r3, #128	; 0x80
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_ADC_MspInit+0xd8>)
 8002c40:	695a      	ldr	r2, [r3, #20]
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <HAL_ADC_MspInit+0xd8>)
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	0289      	lsls	r1, r1, #10
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	615a      	str	r2, [r3, #20]
 8002c4c:	4b22      	ldr	r3, [pc, #136]	; (8002cd8 <HAL_ADC_MspInit+0xd8>)
 8002c4e:	695a      	ldr	r2, [r3, #20]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	029b      	lsls	r3, r3, #10
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
 8002c58:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	220e      	movs	r2, #14
 8002c5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c60:	193b      	adds	r3, r7, r4
 8002c62:	2203      	movs	r2, #3
 8002c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	193b      	adds	r3, r7, r4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6c:	193a      	adds	r2, r7, r4
 8002c6e:	2390      	movs	r3, #144	; 0x90
 8002c70:	05db      	lsls	r3, r3, #23
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 f821 	bl	8003cbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002c7a:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002c7c:	4a18      	ldr	r2, [pc, #96]	; (8002ce0 <HAL_ADC_MspInit+0xe0>)
 8002c7e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c86:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002c8c:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002c94:	2280      	movs	r2, #128	; 0x80
 8002c96:	0052      	lsls	r2, r2, #1
 8002c98:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	00d2      	lsls	r2, r2, #3
 8002ca0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f000 fe5f 	bl	8003974 <HAL_DMA_Init>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002cba:	f7ff ff77 	bl	8002bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002cc2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_ADC_MspInit+0xdc>)
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b00b      	add	sp, #44	; 0x2c
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	40012400 	.word	0x40012400
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	200000d4 	.word	0x200000d4
 8002ce0:	40020008 	.word	0x40020008

08002ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <HAL_TIM_Base_MspInit+0x48>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d115      	bne.n	8002d22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_TIM_Base_MspInit+0x4c>)
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_TIM_Base_MspInit+0x4c>)
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	0249      	lsls	r1, r1, #9
 8002d00:	430a      	orrs	r2, r1
 8002d02:	619a      	str	r2, [r3, #24]
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_TIM_Base_MspInit+0x4c>)
 8002d06:	699a      	ldr	r2, [r3, #24]
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002d12:	2200      	movs	r2, #0
 8002d14:	2100      	movs	r1, #0
 8002d16:	2014      	movs	r0, #20
 8002d18:	f000 fdfa 	bl	8003910 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002d1c:	2014      	movs	r0, #20
 8002d1e:	f000 fe0c 	bl	800393a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002d22:	46c0      	nop			; (mov r8, r8)
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b004      	add	sp, #16
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40014000 	.word	0x40014000
 8002d30:	40021000 	.word	0x40021000

08002d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002d38:	46c0      	nop			; (mov r8, r8)
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d42:	e7fe      	b.n	8002d42 <HardFault_Handler+0x4>

08002d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d5c:	f000 f8ba 	bl	8002ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <DMA1_Channel1_IRQHandler+0x14>)
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 feba 	bl	8003ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	200000d4 	.word	0x200000d4

08002d80 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <TIM15_IRQHandler+0x14>)
 8002d86:	0018      	movs	r0, r3
 8002d88:	f001 fdd4 	bl	8004934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000118 	.word	0x20000118

08002d98 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <SystemInit+0x70>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b19      	ldr	r3, [pc, #100]	; (8002e08 <SystemInit+0x70>)
 8002da2:	2101      	movs	r1, #1
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <SystemInit+0x70>)
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4b16      	ldr	r3, [pc, #88]	; (8002e08 <SystemInit+0x70>)
 8002dae:	4917      	ldr	r1, [pc, #92]	; (8002e0c <SystemInit+0x74>)
 8002db0:	400a      	ands	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <SystemInit+0x70>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <SystemInit+0x70>)
 8002dba:	4915      	ldr	r1, [pc, #84]	; (8002e10 <SystemInit+0x78>)
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <SystemInit+0x70>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <SystemInit+0x70>)
 8002dc6:	4913      	ldr	r1, [pc, #76]	; (8002e14 <SystemInit+0x7c>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <SystemInit+0x70>)
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <SystemInit+0x70>)
 8002dd2:	4911      	ldr	r1, [pc, #68]	; (8002e18 <SystemInit+0x80>)
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <SystemInit+0x70>)
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <SystemInit+0x70>)
 8002dde:	210f      	movs	r1, #15
 8002de0:	438a      	bics	r2, r1
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <SystemInit+0x70>)
 8002de6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de8:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <SystemInit+0x70>)
 8002dea:	490c      	ldr	r1, [pc, #48]	; (8002e1c <SystemInit+0x84>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <SystemInit+0x70>)
 8002df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df4:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <SystemInit+0x70>)
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002dfc:	4b02      	ldr	r3, [pc, #8]	; (8002e08 <SystemInit+0x70>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]

}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	08ffb80c 	.word	0x08ffb80c
 8002e10:	fef6ffff 	.word	0xfef6ffff
 8002e14:	fffbffff 	.word	0xfffbffff
 8002e18:	ffc0ffff 	.word	0xffc0ffff
 8002e1c:	fffffeec 	.word	0xfffffeec

08002e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e20:	480d      	ldr	r0, [pc, #52]	; (8002e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e24:	480d      	ldr	r0, [pc, #52]	; (8002e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002e26:	490e      	ldr	r1, [pc, #56]	; (8002e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e28:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <LoopForever+0xe>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e2c:	e002      	b.n	8002e34 <LoopCopyDataInit>

08002e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e32:	3304      	adds	r3, #4

08002e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e38:	d3f9      	bcc.n	8002e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e3c:	4c0b      	ldr	r4, [pc, #44]	; (8002e6c <LoopForever+0x16>)
  movs r3, #0
 8002e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e40:	e001      	b.n	8002e46 <LoopFillZerobss>

08002e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e44:	3204      	adds	r2, #4

08002e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e48:	d3fb      	bcc.n	8002e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002e4a:	f7ff ffa5 	bl	8002d98 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002e4e:	f002 f9ed 	bl	800522c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e52:	f7ff fbb3 	bl	80025bc <main>

08002e56 <LoopForever>:

LoopForever:
    b LoopForever
 8002e56:	e7fe      	b.n	8002e56 <LoopForever>
  ldr   r0, =_estack
 8002e58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e60:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002e64:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 8002e68:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002e6c:	200001f8 	.word	0x200001f8

08002e70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e70:	e7fe      	b.n	8002e70 <ADC1_IRQHandler>
	...

08002e74 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e78:	4b07      	ldr	r3, [pc, #28]	; (8002e98 <HAL_Init+0x24>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <HAL_Init+0x24>)
 8002e7e:	2110      	movs	r1, #16
 8002e80:	430a      	orrs	r2, r1
 8002e82:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f000 f809 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8a:	f7ff fe95 	bl	8002bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	0018      	movs	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40022000 	.word	0x40022000

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002ea4:	f001 fcde 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	23fa      	movs	r3, #250	; 0xfa
 8002eac:	0099      	lsls	r1, r3, #2
 8002eae:	0010      	movs	r0, r2
 8002eb0:	f7fd f92a 	bl	8000108 <__udivsi3>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 fd4f 	bl	800395a <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	425b      	negs	r3, r3
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f000 fd23 	bl	8003910 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  uwTick++;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_IncTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	1c5a      	adds	r2, r3, #1
 8002ede:	4b02      	ldr	r3, [pc, #8]	; (8002ee8 <HAL_IncTick+0x14>)
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200001f4 	.word	0x200001f4

08002eec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef0:	4b02      	ldr	r3, [pc, #8]	; (8002efc <HAL_GetTick+0x10>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	200001f4 	.word	0x200001f4

08002f00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e124      	b.n	8003168 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2240      	movs	r2, #64	; 0x40
 8002f30:	2100      	movs	r1, #0
 8002f32:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7ff fe62 	bl	8002c00 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	2210      	movs	r2, #16
 8002f42:	4013      	ands	r3, r2
 8002f44:	d000      	beq.n	8002f48 <HAL_ADC_Init+0x48>
 8002f46:	e102      	b.n	800314e <HAL_ADC_Init+0x24e>
 8002f48:	230f      	movs	r3, #15
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d000      	beq.n	8002f54 <HAL_ADC_Init+0x54>
 8002f52:	e0fc      	b.n	800314e <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2204      	movs	r2, #4
 8002f5c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002f5e:	d000      	beq.n	8002f62 <HAL_ADC_Init+0x62>
 8002f60:	e0f5      	b.n	800314e <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a82      	ldr	r2, [pc, #520]	; (8003170 <HAL_ADC_Init+0x270>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2203      	movs	r2, #3
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d112      	bne.n	8002fa6 <HAL_ADC_Init+0xa6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d009      	beq.n	8002fa2 <HAL_ADC_Init+0xa2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	401a      	ands	r2, r3
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	021b      	lsls	r3, r3, #8
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_Init+0xa6>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_ADC_Init+0xa8>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d116      	bne.n	8002fda <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2218      	movs	r2, #24
 8002fb4:	4393      	bics	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	0899      	lsrs	r1, r3, #2
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4963      	ldr	r1, [pc, #396]	; (8003174 <HAL_ADC_Init+0x274>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002ff6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8002ffe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	2b01      	cmp	r3, #1
 8003006:	d002      	beq.n	800300e <HAL_ADC_Init+0x10e>
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	e000      	b.n	8003010 <HAL_ADC_Init+0x110>
 800300e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8003010:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8003016:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d101      	bne.n	8003024 <HAL_ADC_Init+0x124>
 8003020:	2304      	movs	r3, #4
 8003022:	e000      	b.n	8003026 <HAL_ADC_Init+0x126>
 8003024:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8003026:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800302e:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	4313      	orrs	r3, r2
 8003034:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	2b01      	cmp	r3, #1
 800303c:	d115      	bne.n	800306a <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d105      	bne.n	8003052 <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2280      	movs	r2, #128	; 0x80
 800304a:	0252      	lsls	r2, r2, #9
 800304c:	4313      	orrs	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
 8003050:	e00b      	b.n	800306a <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	2220      	movs	r2, #32
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003062:	2201      	movs	r2, #1
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306e:	23c2      	movs	r3, #194	; 0xc2
 8003070:	33ff      	adds	r3, #255	; 0xff
 8003072:	429a      	cmp	r2, r3
 8003074:	d007      	beq.n	8003086 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800307e:	4313      	orrs	r3, r2
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	4313      	orrs	r3, r2
 8003084:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68d9      	ldr	r1, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	430a      	orrs	r2, r1
 8003094:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	055b      	lsls	r3, r3, #21
 800309e:	429a      	cmp	r2, r3
 80030a0:	d01b      	beq.n	80030da <HAL_ADC_Init+0x1da>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d017      	beq.n	80030da <HAL_ADC_Init+0x1da>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d013      	beq.n	80030da <HAL_ADC_Init+0x1da>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d00f      	beq.n	80030da <HAL_ADC_Init+0x1da>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d00b      	beq.n	80030da <HAL_ADC_Init+0x1da>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d007      	beq.n	80030da <HAL_ADC_Init+0x1da>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d003      	beq.n	80030da <HAL_ADC_Init+0x1da>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	2b07      	cmp	r3, #7
 80030d8:	d112      	bne.n	8003100 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695a      	ldr	r2, [r3, #20]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2107      	movs	r1, #7
 80030e6:	438a      	bics	r2, r1
 80030e8:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6959      	ldr	r1, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	2207      	movs	r2, #7
 80030f6:	401a      	ands	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4a1c      	ldr	r2, [pc, #112]	; (8003178 <HAL_ADC_Init+0x278>)
 8003108:	4013      	ands	r3, r2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d10b      	bne.n	8003128 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	2203      	movs	r2, #3
 800311c:	4393      	bics	r3, r2
 800311e:	2201      	movs	r2, #1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003126:	e01c      	b.n	8003162 <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	2212      	movs	r2, #18
 800312e:	4393      	bics	r3, r2
 8003130:	2210      	movs	r2, #16
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800313c:	2201      	movs	r2, #1
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8003144:	230f      	movs	r3, #15
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800314c:	e009      	b.n	8003162 <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	2210      	movs	r2, #16
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 800315a:	230f      	movs	r3, #15
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003162:	230f      	movs	r3, #15
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
}
 8003168:	0018      	movs	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}
 8003170:	fffffefd 	.word	0xfffffefd
 8003174:	fffe0219 	.word	0xfffe0219
 8003178:	833fffe7 	.word	0x833fffe7

0800317c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800317c:	b590      	push	{r4, r7, lr}
 800317e:	b087      	sub	sp, #28
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003188:	2317      	movs	r3, #23
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2204      	movs	r2, #4
 8003198:	4013      	ands	r3, r2
 800319a:	d15e      	bne.n	800325a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2240      	movs	r2, #64	; 0x40
 80031a0:	5c9b      	ldrb	r3, [r3, r2]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Start_DMA+0x2e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e05e      	b.n	8003268 <HAL_ADC_Start_DMA+0xec>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2240      	movs	r2, #64	; 0x40
 80031ae:	2101      	movs	r1, #1
 80031b0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d007      	beq.n	80031ca <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80031ba:	2317      	movs	r3, #23
 80031bc:	18fc      	adds	r4, r7, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f963 	bl	800348c <ADC_Enable>
 80031c6:	0003      	movs	r3, r0
 80031c8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031ca:	2317      	movs	r3, #23
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d146      	bne.n	8003262 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <HAL_ADC_Start_DMA+0xf4>)
 80031da:	4013      	ands	r3, r2
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	0052      	lsls	r2, r2, #1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2240      	movs	r2, #64	; 0x40
 80031f0:	2100      	movs	r1, #0
 80031f2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_ADC_Start_DMA+0xf8>)
 80031fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003200:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_ADC_Start_DMA+0xfc>)
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_ADC_Start_DMA+0x100>)
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	221c      	movs	r2, #28
 8003212:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2110      	movs	r1, #16
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	430a      	orrs	r2, r1
 8003232:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3340      	adds	r3, #64	; 0x40
 800323e:	0019      	movs	r1, r3
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f000 fbea 	bl	8003a1c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2104      	movs	r1, #4
 8003254:	430a      	orrs	r2, r1
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	e003      	b.n	8003262 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800325a:	2317      	movs	r3, #23
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	2202      	movs	r2, #2
 8003260:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003262:	2317      	movs	r3, #23
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	781b      	ldrb	r3, [r3, #0]
}
 8003268:	0018      	movs	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	b007      	add	sp, #28
 800326e:	bd90      	pop	{r4, r7, pc}
 8003270:	fffff0fe 	.word	0xfffff0fe
 8003274:	08003585 	.word	0x08003585
 8003278:	08003639 	.word	0x08003639
 800327c:	08003657 	.word	0x08003657

08003280 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003288:	46c0      	nop			; (mov r8, r8)
 800328a:	46bd      	mov	sp, r7
 800328c:	b002      	add	sp, #8
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b002      	add	sp, #8
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032aa:	230f      	movs	r3, #15
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	055b      	lsls	r3, r3, #21
 80032be:	429a      	cmp	r2, r3
 80032c0:	d011      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x46>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d00d      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x46>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d009      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x46>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d005      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x46>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d001      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x46>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2240      	movs	r2, #64	; 0x40
 80032ea:	5c9b      	ldrb	r3, [r3, r2]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x54>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0bb      	b.n	800346c <HAL_ADC_ConfigChannel+0x1cc>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	2101      	movs	r1, #1
 80032fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2204      	movs	r2, #4
 8003304:	4013      	ands	r3, r2
 8003306:	d000      	beq.n	800330a <HAL_ADC_ConfigChannel+0x6a>
 8003308:	e09f      	b.n	800344a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4a59      	ldr	r2, [pc, #356]	; (8003474 <HAL_ADC_ConfigChannel+0x1d4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d100      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x76>
 8003314:	e077      	b.n	8003406 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	409a      	lsls	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	055b      	lsls	r3, r3, #21
 8003334:	429a      	cmp	r2, r3
 8003336:	d037      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	2b01      	cmp	r3, #1
 800333e:	d033      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	2b02      	cmp	r3, #2
 8003346:	d02f      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	2b03      	cmp	r3, #3
 800334e:	d02b      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	2b04      	cmp	r3, #4
 8003356:	d027      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	2b05      	cmp	r3, #5
 800335e:	d023      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	2b06      	cmp	r3, #6
 8003366:	d01f      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	2b07      	cmp	r3, #7
 800336e:	d01b      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	2107      	movs	r1, #7
 800337c:	400b      	ands	r3, r1
 800337e:	429a      	cmp	r2, r3
 8003380:	d012      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2107      	movs	r1, #7
 800338e:	438a      	bics	r2, r1
 8003390:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6959      	ldr	r1, [r3, #20]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	2207      	movs	r2, #7
 800339e:	401a      	ands	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d003      	beq.n	80033b8 <HAL_ADC_ConfigChannel+0x118>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b11      	cmp	r3, #17
 80033b6:	d152      	bne.n	800345e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80033b8:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_ADC_ConfigChannel+0x1d8>)
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d102      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x12a>
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	041b      	lsls	r3, r3, #16
 80033c8:	e001      	b.n	80033ce <HAL_ADC_ConfigChannel+0x12e>
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	03db      	lsls	r3, r3, #15
 80033ce:	4a2a      	ldr	r2, [pc, #168]	; (8003478 <HAL_ADC_ConfigChannel+0x1d8>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b10      	cmp	r3, #16
 80033da:	d140      	bne.n	800345e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_ADC_ConfigChannel+0x1dc>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4927      	ldr	r1, [pc, #156]	; (8003480 <HAL_ADC_ConfigChannel+0x1e0>)
 80033e2:	0018      	movs	r0, r3
 80033e4:	f7fc fe90 	bl	8000108 <__udivsi3>
 80033e8:	0003      	movs	r3, r0
 80033ea:	001a      	movs	r2, r3
 80033ec:	0013      	movs	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	189b      	adds	r3, r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033f6:	e002      	b.n	80033fe <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x158>
 8003404:	e02b      	b.n	800345e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	4099      	lsls	r1, r3
 8003414:	000b      	movs	r3, r1
 8003416:	43d9      	mvns	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b10      	cmp	r3, #16
 8003426:	d003      	beq.n	8003430 <HAL_ADC_ConfigChannel+0x190>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b11      	cmp	r3, #17
 800342e:	d116      	bne.n	800345e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_ADC_ConfigChannel+0x1d8>)
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b10      	cmp	r3, #16
 800343a:	d101      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x1a0>
 800343c:	4a11      	ldr	r2, [pc, #68]	; (8003484 <HAL_ADC_ConfigChannel+0x1e4>)
 800343e:	e000      	b.n	8003442 <HAL_ADC_ConfigChannel+0x1a2>
 8003440:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_ADC_ConfigChannel+0x1e8>)
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <HAL_ADC_ConfigChannel+0x1d8>)
 8003444:	400a      	ands	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	e009      	b.n	800345e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	2220      	movs	r2, #32
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8003456:	230f      	movs	r3, #15
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2240      	movs	r2, #64	; 0x40
 8003462:	2100      	movs	r1, #0
 8003464:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003466:	230f      	movs	r3, #15
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	781b      	ldrb	r3, [r3, #0]
}
 800346c:	0018      	movs	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	b004      	add	sp, #16
 8003472:	bd80      	pop	{r7, pc}
 8003474:	00001001 	.word	0x00001001
 8003478:	40012708 	.word	0x40012708
 800347c:	20000004 	.word	0x20000004
 8003480:	000f4240 	.word	0x000f4240
 8003484:	ff7fffff 	.word	0xff7fffff
 8003488:	ffbfffff 	.word	0xffbfffff

0800348c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2203      	movs	r2, #3
 80034a4:	4013      	ands	r3, r2
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d112      	bne.n	80034d0 <ADC_Enable+0x44>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2201      	movs	r2, #1
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d009      	beq.n	80034cc <ADC_Enable+0x40>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	021b      	lsls	r3, r3, #8
 80034c2:	401a      	ands	r2, r3
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d101      	bne.n	80034d0 <ADC_Enable+0x44>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <ADC_Enable+0x46>
 80034d0:	2300      	movs	r3, #0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d14b      	bne.n	800356e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a26      	ldr	r2, [pc, #152]	; (8003578 <ADC_Enable+0xec>)
 80034de:	4013      	ands	r3, r2
 80034e0:	d00d      	beq.n	80034fe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	2210      	movs	r2, #16
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f2:	2201      	movs	r2, #1
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e038      	b.n	8003570 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	430a      	orrs	r2, r1
 800350c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800350e:	4b1b      	ldr	r3, [pc, #108]	; (800357c <ADC_Enable+0xf0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	491b      	ldr	r1, [pc, #108]	; (8003580 <ADC_Enable+0xf4>)
 8003514:	0018      	movs	r0, r3
 8003516:	f7fc fdf7 	bl	8000108 <__udivsi3>
 800351a:	0003      	movs	r3, r0
 800351c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800351e:	e002      	b.n	8003526 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	3b01      	subs	r3, #1
 8003524:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f9      	bne.n	8003520 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800352c:	f7ff fcde 	bl	8002eec <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003534:	e014      	b.n	8003560 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003536:	f7ff fcd9 	bl	8002eec <HAL_GetTick>
 800353a:	0002      	movs	r2, r0
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d90d      	bls.n	8003560 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	2210      	movs	r2, #16
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003554:	2201      	movs	r2, #1
 8003556:	431a      	orrs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e007      	b.n	8003570 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2201      	movs	r2, #1
 8003568:	4013      	ands	r3, r2
 800356a:	2b01      	cmp	r3, #1
 800356c:	d1e3      	bne.n	8003536 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b004      	add	sp, #16
 8003576:	bd80      	pop	{r7, pc}
 8003578:	80000017 	.word	0x80000017
 800357c:	20000004 	.word	0x20000004
 8003580:	000f4240 	.word	0x000f4240

08003584 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	2250      	movs	r2, #80	; 0x50
 8003598:	4013      	ands	r3, r2
 800359a:	d140      	bne.n	800361e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	431a      	orrs	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4013      	ands	r3, r2
 80035b6:	d12d      	bne.n	8003614 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d129      	bne.n	8003614 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2208      	movs	r2, #8
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d122      	bne.n	8003614 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2204      	movs	r2, #4
 80035d6:	4013      	ands	r3, r2
 80035d8:	d110      	bne.n	80035fc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	210c      	movs	r1, #12
 80035e6:	438a      	bics	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a11      	ldr	r2, [pc, #68]	; (8003634 <ADC_DMAConvCplt+0xb0>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	2201      	movs	r2, #1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	645a      	str	r2, [r3, #68]	; 0x44
 80035fa:	e00b      	b.n	8003614 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	2220      	movs	r2, #32
 8003602:	431a      	orrs	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	2201      	movs	r2, #1
 800360e:	431a      	orrs	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	649a      	str	r2, [r3, #72]	; 0x48
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff f9a2 	bl	8002960 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 800361c:	e005      	b.n	800362a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	0010      	movs	r0, r2
 8003628:	4798      	blx	r3
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b004      	add	sp, #16
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	fffffefe 	.word	0xfffffefe

08003638 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	0018      	movs	r0, r3
 800364a:	f7ff fe19 	bl	8003280 <HAL_ADC_ConvHalfCpltCallback>
}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	46bd      	mov	sp, r7
 8003652:	b004      	add	sp, #16
 8003654:	bd80      	pop	{r7, pc}

08003656 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	2240      	movs	r2, #64	; 0x40
 800366a:	431a      	orrs	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003674:	2204      	movs	r2, #4
 8003676:	431a      	orrs	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	0018      	movs	r0, r3
 8003680:	f7ff fe06 	bl	8003290 <HAL_ADC_ErrorCallback>
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003694:	2317      	movs	r3, #23
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_ADCEx_Calibration_Start+0x26>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e080      	b.n	80037b4 <HAL_ADCEx_Calibration_Start+0x128>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2203      	movs	r2, #3
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d112      	bne.n	80036ee <HAL_ADCEx_Calibration_Start+0x62>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2201      	movs	r2, #1
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d009      	beq.n	80036ea <HAL_ADCEx_Calibration_Start+0x5e>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	021b      	lsls	r3, r3, #8
 80036e0:	401a      	ands	r2, r3
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d101      	bne.n	80036ee <HAL_ADCEx_Calibration_Start+0x62>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_ADCEx_Calibration_Start+0x64>
 80036ee:	2300      	movs	r3, #0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d14e      	bne.n	8003792 <HAL_ADCEx_Calibration_Start+0x106>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f8:	4a30      	ldr	r2, [pc, #192]	; (80037bc <HAL_ADCEx_Calibration_Start+0x130>)
 80036fa:	4013      	ands	r3, r2
 80036fc:	2202      	movs	r2, #2
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2203      	movs	r2, #3
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2103      	movs	r1, #3
 800371c:	438a      	bics	r2, r1
 800371e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	0609      	lsls	r1, r1, #24
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003732:	f7ff fbdb 	bl	8002eec <HAL_GetTick>
 8003736:	0003      	movs	r3, r0
 8003738:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800373a:	e014      	b.n	8003766 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800373c:	f7ff fbd6 	bl	8002eec <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d90d      	bls.n	8003766 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	2212      	movs	r2, #18
 8003750:	4393      	bics	r3, r2
 8003752:	2210      	movs	r2, #16
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2240      	movs	r2, #64	; 0x40
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e026      	b.n	80037b4 <HAL_ADCEx_Calibration_Start+0x128>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	dbe5      	blt.n	800373c <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68d9      	ldr	r1, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	430a      	orrs	r2, r1
 800377e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003784:	2203      	movs	r2, #3
 8003786:	4393      	bics	r3, r2
 8003788:	2201      	movs	r2, #1
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
 8003790:	e009      	b.n	80037a6 <HAL_ADCEx_Calibration_Start+0x11a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	2220      	movs	r2, #32
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800379e:	2317      	movs	r3, #23
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80037ae:	2317      	movs	r3, #23
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b006      	add	sp, #24
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	fffffefd 	.word	0xfffffefd

080037c0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	0002      	movs	r2, r0
 80037c8:	1dfb      	adds	r3, r7, #7
 80037ca:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80037cc:	1dfb      	adds	r3, r7, #7
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	001a      	movs	r2, r3
 80037d2:	231f      	movs	r3, #31
 80037d4:	401a      	ands	r2, r3
 80037d6:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <NVIC_EnableIRQ+0x28>)
 80037d8:	2101      	movs	r1, #1
 80037da:	4091      	lsls	r1, r2
 80037dc:	000a      	movs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]
}
 80037e0:	46c0      	nop			; (mov r8, r8)
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b002      	add	sp, #8
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	e000e100 	.word	0xe000e100

080037ec <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	0002      	movs	r2, r0
 80037f4:	6039      	str	r1, [r7, #0]
 80037f6:	1dfb      	adds	r3, r7, #7
 80037f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80037fa:	1dfb      	adds	r3, r7, #7
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b7f      	cmp	r3, #127	; 0x7f
 8003800:	d932      	bls.n	8003868 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003802:	4a2f      	ldr	r2, [pc, #188]	; (80038c0 <NVIC_SetPriority+0xd4>)
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	0019      	movs	r1, r3
 800380a:	230f      	movs	r3, #15
 800380c:	400b      	ands	r3, r1
 800380e:	3b08      	subs	r3, #8
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3306      	adds	r3, #6
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	18d3      	adds	r3, r2, r3
 8003818:	3304      	adds	r3, #4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	1dfa      	adds	r2, r7, #7
 800381e:	7812      	ldrb	r2, [r2, #0]
 8003820:	0011      	movs	r1, r2
 8003822:	2203      	movs	r2, #3
 8003824:	400a      	ands	r2, r1
 8003826:	00d2      	lsls	r2, r2, #3
 8003828:	21ff      	movs	r1, #255	; 0xff
 800382a:	4091      	lsls	r1, r2
 800382c:	000a      	movs	r2, r1
 800382e:	43d2      	mvns	r2, r2
 8003830:	401a      	ands	r2, r3
 8003832:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	019b      	lsls	r3, r3, #6
 8003838:	22ff      	movs	r2, #255	; 0xff
 800383a:	401a      	ands	r2, r3
 800383c:	1dfb      	adds	r3, r7, #7
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	0018      	movs	r0, r3
 8003842:	2303      	movs	r3, #3
 8003844:	4003      	ands	r3, r0
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800384a:	481d      	ldr	r0, [pc, #116]	; (80038c0 <NVIC_SetPriority+0xd4>)
 800384c:	1dfb      	adds	r3, r7, #7
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	001c      	movs	r4, r3
 8003852:	230f      	movs	r3, #15
 8003854:	4023      	ands	r3, r4
 8003856:	3b08      	subs	r3, #8
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	430a      	orrs	r2, r1
 800385c:	3306      	adds	r3, #6
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	18c3      	adds	r3, r0, r3
 8003862:	3304      	adds	r3, #4
 8003864:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003866:	e027      	b.n	80038b8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003868:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <NVIC_SetPriority+0xd8>)
 800386a:	1dfb      	adds	r3, r7, #7
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b25b      	sxtb	r3, r3
 8003870:	089b      	lsrs	r3, r3, #2
 8003872:	33c0      	adds	r3, #192	; 0xc0
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	589b      	ldr	r3, [r3, r2]
 8003878:	1dfa      	adds	r2, r7, #7
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	0011      	movs	r1, r2
 800387e:	2203      	movs	r2, #3
 8003880:	400a      	ands	r2, r1
 8003882:	00d2      	lsls	r2, r2, #3
 8003884:	21ff      	movs	r1, #255	; 0xff
 8003886:	4091      	lsls	r1, r2
 8003888:	000a      	movs	r2, r1
 800388a:	43d2      	mvns	r2, r2
 800388c:	401a      	ands	r2, r3
 800388e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	019b      	lsls	r3, r3, #6
 8003894:	22ff      	movs	r2, #255	; 0xff
 8003896:	401a      	ands	r2, r3
 8003898:	1dfb      	adds	r3, r7, #7
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	0018      	movs	r0, r3
 800389e:	2303      	movs	r3, #3
 80038a0:	4003      	ands	r3, r0
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038a6:	4807      	ldr	r0, [pc, #28]	; (80038c4 <NVIC_SetPriority+0xd8>)
 80038a8:	1dfb      	adds	r3, r7, #7
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	089b      	lsrs	r3, r3, #2
 80038b0:	430a      	orrs	r2, r1
 80038b2:	33c0      	adds	r3, #192	; 0xc0
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	501a      	str	r2, [r3, r0]
}
 80038b8:	46c0      	nop			; (mov r8, r8)
 80038ba:	46bd      	mov	sp, r7
 80038bc:	b003      	add	sp, #12
 80038be:	bd90      	pop	{r4, r7, pc}
 80038c0:	e000ed00 	.word	0xe000ed00
 80038c4:	e000e100 	.word	0xe000e100

080038c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	045b      	lsls	r3, r3, #17
 80038d8:	429a      	cmp	r2, r3
 80038da:	d301      	bcc.n	80038e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038dc:	2301      	movs	r3, #1
 80038de:	e010      	b.n	8003902 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <SysTick_Config+0x44>)
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	3a01      	subs	r2, #1
 80038e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e8:	2301      	movs	r3, #1
 80038ea:	425b      	negs	r3, r3
 80038ec:	2103      	movs	r1, #3
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff ff7c 	bl	80037ec <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <SysTick_Config+0x44>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fa:	4b04      	ldr	r3, [pc, #16]	; (800390c <SysTick_Config+0x44>)
 80038fc:	2207      	movs	r2, #7
 80038fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003900:	2300      	movs	r3, #0
}
 8003902:	0018      	movs	r0, r3
 8003904:	46bd      	mov	sp, r7
 8003906:	b002      	add	sp, #8
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	e000e010 	.word	0xe000e010

08003910 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	210f      	movs	r1, #15
 800391c:	187b      	adds	r3, r7, r1
 800391e:	1c02      	adds	r2, r0, #0
 8003920:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	187b      	adds	r3, r7, r1
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	b25b      	sxtb	r3, r3
 800392a:	0011      	movs	r1, r2
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff ff5d 	bl	80037ec <NVIC_SetPriority>
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	b082      	sub	sp, #8
 800393e:	af00      	add	r7, sp, #0
 8003940:	0002      	movs	r2, r0
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003946:	1dfb      	adds	r3, r7, #7
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b25b      	sxtb	r3, r3
 800394c:	0018      	movs	r0, r3
 800394e:	f7ff ff37 	bl	80037c0 <NVIC_EnableIRQ>
}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b002      	add	sp, #8
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0018      	movs	r0, r3
 8003966:	f7ff ffaf 	bl	80038c8 <SysTick_Config>
 800396a:	0003      	movs	r3, r0
}
 800396c:	0018      	movs	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e042      	b.n	8003a10 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2221      	movs	r2, #33	; 0x21
 800398e:	2102      	movs	r1, #2
 8003990:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a1e      	ldr	r2, [pc, #120]	; (8003a18 <HAL_DMA_Init+0xa4>)
 800399e:	4013      	ands	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	0018      	movs	r0, r3
 80039dc:	f000 f952 	bl	8003c84 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2221      	movs	r2, #33	; 0x21
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}  
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b004      	add	sp, #16
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	ffffc00f 	.word	0xffffc00f

08003a1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8003a2a:	2317      	movs	r3, #23
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2220      	movs	r2, #32
 8003a36:	5c9b      	ldrb	r3, [r3, r2]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_DMA_Start_IT+0x24>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e04f      	b.n	8003ae0 <HAL_DMA_Start_IT+0xc4>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2220      	movs	r2, #32
 8003a44:	2101      	movs	r1, #1
 8003a46:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2221      	movs	r2, #33	; 0x21
 8003a4c:	5c9b      	ldrb	r3, [r3, r2]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d13a      	bne.n	8003aca <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2221      	movs	r2, #33	; 0x21
 8003a58:	2102      	movs	r1, #2
 8003a5a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	438a      	bics	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f8d7 	bl	8003c2c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	210e      	movs	r1, #14
 8003a92:	430a      	orrs	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e00f      	b.n	8003ab8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	210a      	movs	r1, #10
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	e007      	b.n	8003ada <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2220      	movs	r2, #32
 8003ace:	2100      	movs	r1, #0
 8003ad0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003ad2:	2317      	movs	r3, #23
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8003ada:	2317      	movs	r3, #23
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	781b      	ldrb	r3, [r3, #0]
} 
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b006      	add	sp, #24
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b04:	2204      	movs	r2, #4
 8003b06:	409a      	lsls	r2, r3
 8003b08:	0013      	movs	r3, r2
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d024      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x72>
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2204      	movs	r2, #4
 8003b14:	4013      	ands	r3, r2
 8003b16:	d020      	beq.n	8003b5a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	4013      	ands	r3, r2
 8003b22:	d107      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2104      	movs	r1, #4
 8003b30:	438a      	bics	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	4091      	lsls	r1, r2
 8003b40:	000a      	movs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d100      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x66>
 8003b4c:	e06a      	b.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	0010      	movs	r0, r2
 8003b56:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003b58:	e064      	b.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2202      	movs	r2, #2
 8003b60:	409a      	lsls	r2, r3
 8003b62:	0013      	movs	r3, r2
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4013      	ands	r3, r2
 8003b68:	d02b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xda>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	4013      	ands	r3, r2
 8003b70:	d027      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d10b      	bne.n	8003b96 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	210a      	movs	r1, #10
 8003b8a:	438a      	bics	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2221      	movs	r2, #33	; 0x21
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4091      	lsls	r1, r2
 8003ba2:	000a      	movs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	2100      	movs	r1, #0
 8003bac:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d036      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	0010      	movs	r0, r2
 8003bbe:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003bc0:	e030      	b.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	0013      	movs	r3, r2
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d028      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d024      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	210e      	movs	r1, #14
 8003be6:	438a      	bics	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4091      	lsls	r1, r2
 8003bf6:	000a      	movs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2221      	movs	r2, #33	; 0x21
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	0010      	movs	r0, r2
 8003c20:	4798      	blx	r3
    }
   }
}  
 8003c22:	e7ff      	b.n	8003c24 <HAL_DMA_IRQHandler+0x13c>
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b004      	add	sp, #16
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	2101      	movs	r1, #1
 8003c44:	4091      	lsls	r1, r2
 8003c46:	000a      	movs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b10      	cmp	r3, #16
 8003c58:	d108      	bne.n	8003c6c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c6a:	e007      	b.n	8003c7c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	60da      	str	r2, [r3, #12]
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <DMA_CalcBaseAndBitshift+0x30>)
 8003c92:	4694      	mov	ip, r2
 8003c94:	4463      	add	r3, ip
 8003c96:	2114      	movs	r1, #20
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7fc fa35 	bl	8000108 <__udivsi3>
 8003c9e:	0003      	movs	r3, r0
 8003ca0:	009a      	lsls	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a03      	ldr	r2, [pc, #12]	; (8003cb8 <DMA_CalcBaseAndBitshift+0x34>)
 8003caa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b002      	add	sp, #8
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	bffdfff8 	.word	0xbffdfff8
 8003cb8:	40020000 	.word	0x40020000

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003cd2:	e14f      	b.n	8003f74 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4091      	lsls	r1, r2
 8003cde:	000a      	movs	r2, r1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d100      	bne.n	8003cec <HAL_GPIO_Init+0x30>
 8003cea:	e140      	b.n	8003f6e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x40>
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b12      	cmp	r3, #18
 8003cfa:	d123      	bne.n	8003d44 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	08da      	lsrs	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3208      	adds	r2, #8
 8003d04:	0092      	lsls	r2, r2, #2
 8003d06:	58d3      	ldr	r3, [r2, r3]
 8003d08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	4013      	ands	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	220f      	movs	r2, #15
 8003d14:	409a      	lsls	r2, r3
 8003d16:	0013      	movs	r3, r2
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	691a      	ldr	r2, [r3, #16]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2107      	movs	r1, #7
 8003d28:	400b      	ands	r3, r1
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	409a      	lsls	r2, r3
 8003d2e:	0013      	movs	r3, r2
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	08da      	lsrs	r2, r3, #3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3208      	adds	r2, #8
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	6939      	ldr	r1, [r7, #16]
 8003d42:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	2203      	movs	r2, #3
 8003d50:	409a      	lsls	r2, r3
 8003d52:	0013      	movs	r3, r2
 8003d54:	43da      	mvns	r2, r3
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2203      	movs	r2, #3
 8003d62:	401a      	ands	r2, r3
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	0013      	movs	r3, r2
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d00b      	beq.n	8003d98 <HAL_GPIO_Init+0xdc>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d007      	beq.n	8003d98 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d8c:	2b11      	cmp	r3, #17
 8003d8e:	d003      	beq.n	8003d98 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b12      	cmp	r3, #18
 8003d96:	d130      	bne.n	8003dfa <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	2203      	movs	r2, #3
 8003da4:	409a      	lsls	r2, r3
 8003da6:	0013      	movs	r3, r2
 8003da8:	43da      	mvns	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	409a      	lsls	r2, r3
 8003dba:	0013      	movs	r3, r2
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003dce:	2201      	movs	r2, #1
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	2201      	movs	r2, #1
 8003de6:	401a      	ands	r2, r3
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	409a      	lsls	r2, r3
 8003dec:	0013      	movs	r3, r2
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	409a      	lsls	r2, r3
 8003e08:	0013      	movs	r3, r2
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	409a      	lsls	r2, r3
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	2380      	movs	r3, #128	; 0x80
 8003e30:	055b      	lsls	r3, r3, #21
 8003e32:	4013      	ands	r3, r2
 8003e34:	d100      	bne.n	8003e38 <HAL_GPIO_Init+0x17c>
 8003e36:	e09a      	b.n	8003f6e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e38:	4b54      	ldr	r3, [pc, #336]	; (8003f8c <HAL_GPIO_Init+0x2d0>)
 8003e3a:	699a      	ldr	r2, [r3, #24]
 8003e3c:	4b53      	ldr	r3, [pc, #332]	; (8003f8c <HAL_GPIO_Init+0x2d0>)
 8003e3e:	2101      	movs	r1, #1
 8003e40:	430a      	orrs	r2, r1
 8003e42:	619a      	str	r2, [r3, #24]
 8003e44:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <HAL_GPIO_Init+0x2d0>)
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003e50:	4a4f      	ldr	r2, [pc, #316]	; (8003f90 <HAL_GPIO_Init+0x2d4>)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	089b      	lsrs	r3, r3, #2
 8003e56:	3302      	adds	r3, #2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	589b      	ldr	r3, [r3, r2]
 8003e5c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2203      	movs	r2, #3
 8003e62:	4013      	ands	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	220f      	movs	r2, #15
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	0013      	movs	r3, r2
 8003e6c:	43da      	mvns	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4013      	ands	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	2390      	movs	r3, #144	; 0x90
 8003e78:	05db      	lsls	r3, r3, #23
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d013      	beq.n	8003ea6 <HAL_GPIO_Init+0x1ea>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a44      	ldr	r2, [pc, #272]	; (8003f94 <HAL_GPIO_Init+0x2d8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00d      	beq.n	8003ea2 <HAL_GPIO_Init+0x1e6>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a43      	ldr	r2, [pc, #268]	; (8003f98 <HAL_GPIO_Init+0x2dc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d007      	beq.n	8003e9e <HAL_GPIO_Init+0x1e2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a42      	ldr	r2, [pc, #264]	; (8003f9c <HAL_GPIO_Init+0x2e0>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <HAL_GPIO_Init+0x1de>
 8003e96:	2303      	movs	r3, #3
 8003e98:	e006      	b.n	8003ea8 <HAL_GPIO_Init+0x1ec>
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	e004      	b.n	8003ea8 <HAL_GPIO_Init+0x1ec>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e002      	b.n	8003ea8 <HAL_GPIO_Init+0x1ec>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_GPIO_Init+0x1ec>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	2103      	movs	r1, #3
 8003eac:	400a      	ands	r2, r1
 8003eae:	0092      	lsls	r2, r2, #2
 8003eb0:	4093      	lsls	r3, r2
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003eb8:	4935      	ldr	r1, [pc, #212]	; (8003f90 <HAL_GPIO_Init+0x2d4>)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ec6:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43da      	mvns	r2, r3
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	029b      	lsls	r3, r3, #10
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003f14:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f1a:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	43da      	mvns	r2, r3
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4013      	ands	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	035b      	lsls	r3, r3, #13
 8003f32:	4013      	ands	r3, r2
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	43da      	mvns	r2, r3
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	039b      	lsls	r3, r3, #14
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003f68:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_GPIO_Init+0x2e4>)
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	3301      	adds	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	40da      	lsrs	r2, r3
 8003f7c:	1e13      	subs	r3, r2, #0
 8003f7e:	d000      	beq.n	8003f82 <HAL_GPIO_Init+0x2c6>
 8003f80:	e6a8      	b.n	8003cd4 <HAL_GPIO_Init+0x18>
  } 
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b006      	add	sp, #24
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40010000 	.word	0x40010000
 8003f94:	48000400 	.word	0x48000400
 8003f98:	48000800 	.word	0x48000800
 8003f9c:	48000c00 	.word	0x48000c00
 8003fa0:	40010400 	.word	0x40010400

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	0008      	movs	r0, r1
 8003fae:	0011      	movs	r1, r2
 8003fb0:	1cbb      	adds	r3, r7, #2
 8003fb2:	1c02      	adds	r2, r0, #0
 8003fb4:	801a      	strh	r2, [r3, #0]
 8003fb6:	1c7b      	adds	r3, r7, #1
 8003fb8:	1c0a      	adds	r2, r1, #0
 8003fba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fbc:	1c7b      	adds	r3, r7, #1
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fc4:	1cbb      	adds	r3, r7, #2
 8003fc6:	881a      	ldrh	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fcc:	e003      	b.n	8003fd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fce:	1cbb      	adds	r3, r7, #2
 8003fd0:	881a      	ldrh	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fd6:	46c0      	nop			; (mov r8, r8)
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d100      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x18>
 8003ff6:	e08d      	b.n	8004114 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003ff8:	4bc3      	ldr	r3, [pc, #780]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	220c      	movs	r2, #12
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b04      	cmp	r3, #4
 8004002:	d00e      	beq.n	8004022 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004004:	4bc0      	ldr	r3, [pc, #768]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	220c      	movs	r2, #12
 800400a:	4013      	ands	r3, r2
 800400c:	2b08      	cmp	r3, #8
 800400e:	d116      	bne.n	800403e <HAL_RCC_OscConfig+0x5e>
 8004010:	4bbd      	ldr	r3, [pc, #756]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	025b      	lsls	r3, r3, #9
 8004018:	401a      	ands	r2, r3
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	025b      	lsls	r3, r3, #9
 800401e:	429a      	cmp	r2, r3
 8004020:	d10d      	bne.n	800403e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004022:	4bb9      	ldr	r3, [pc, #740]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	4013      	ands	r3, r2
 800402c:	d100      	bne.n	8004030 <HAL_RCC_OscConfig+0x50>
 800402e:	e070      	b.n	8004112 <HAL_RCC_OscConfig+0x132>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d000      	beq.n	800403a <HAL_RCC_OscConfig+0x5a>
 8004038:	e06b      	b.n	8004112 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e2b6      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d107      	bne.n	8004056 <HAL_RCC_OscConfig+0x76>
 8004046:	4bb0      	ldr	r3, [pc, #704]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	4baf      	ldr	r3, [pc, #700]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	0249      	lsls	r1, r1, #9
 8004050:	430a      	orrs	r2, r1
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	e02f      	b.n	80040b6 <HAL_RCC_OscConfig+0xd6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x98>
 800405e:	4baa      	ldr	r3, [pc, #680]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4ba9      	ldr	r3, [pc, #676]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004064:	49a9      	ldr	r1, [pc, #676]	; (800430c <HAL_RCC_OscConfig+0x32c>)
 8004066:	400a      	ands	r2, r1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	4ba7      	ldr	r3, [pc, #668]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4ba6      	ldr	r3, [pc, #664]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004070:	49a7      	ldr	r1, [pc, #668]	; (8004310 <HAL_RCC_OscConfig+0x330>)
 8004072:	400a      	ands	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e01e      	b.n	80040b6 <HAL_RCC_OscConfig+0xd6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b05      	cmp	r3, #5
 800407e:	d10e      	bne.n	800409e <HAL_RCC_OscConfig+0xbe>
 8004080:	4ba1      	ldr	r3, [pc, #644]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4ba0      	ldr	r3, [pc, #640]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004086:	2180      	movs	r1, #128	; 0x80
 8004088:	02c9      	lsls	r1, r1, #11
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	4b9e      	ldr	r3, [pc, #632]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4b9d      	ldr	r3, [pc, #628]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004094:	2180      	movs	r1, #128	; 0x80
 8004096:	0249      	lsls	r1, r1, #9
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e00b      	b.n	80040b6 <HAL_RCC_OscConfig+0xd6>
 800409e:	4b9a      	ldr	r3, [pc, #616]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b99      	ldr	r3, [pc, #612]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80040a4:	4999      	ldr	r1, [pc, #612]	; (800430c <HAL_RCC_OscConfig+0x32c>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	4b97      	ldr	r3, [pc, #604]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b96      	ldr	r3, [pc, #600]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80040b0:	4997      	ldr	r1, [pc, #604]	; (8004310 <HAL_RCC_OscConfig+0x330>)
 80040b2:	400a      	ands	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d014      	beq.n	80040e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040be:	f7fe ff15 	bl	8002eec <HAL_GetTick>
 80040c2:	0003      	movs	r3, r0
 80040c4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040c8:	f7fe ff10 	bl	8002eec <HAL_GetTick>
 80040cc:	0002      	movs	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e268      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	4b8b      	ldr	r3, [pc, #556]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	4013      	ands	r3, r2
 80040e4:	d0f0      	beq.n	80040c8 <HAL_RCC_OscConfig+0xe8>
 80040e6:	e015      	b.n	8004114 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fe ff00 	bl	8002eec <HAL_GetTick>
 80040ec:	0003      	movs	r3, r0
 80040ee:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f2:	f7fe fefb 	bl	8002eec <HAL_GetTick>
 80040f6:	0002      	movs	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b64      	cmp	r3, #100	; 0x64
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e253      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004104:	4b80      	ldr	r3, [pc, #512]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	2380      	movs	r3, #128	; 0x80
 800410a:	029b      	lsls	r3, r3, #10
 800410c:	4013      	ands	r3, r2
 800410e:	d1f0      	bne.n	80040f2 <HAL_RCC_OscConfig+0x112>
 8004110:	e000      	b.n	8004114 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004112:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2202      	movs	r2, #2
 800411a:	4013      	ands	r3, r2
 800411c:	d100      	bne.n	8004120 <HAL_RCC_OscConfig+0x140>
 800411e:	e069      	b.n	80041f4 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004120:	4b79      	ldr	r3, [pc, #484]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	220c      	movs	r2, #12
 8004126:	4013      	ands	r3, r2
 8004128:	d00b      	beq.n	8004142 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800412a:	4b77      	ldr	r3, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	220c      	movs	r2, #12
 8004130:	4013      	ands	r3, r2
 8004132:	2b08      	cmp	r3, #8
 8004134:	d11c      	bne.n	8004170 <HAL_RCC_OscConfig+0x190>
 8004136:	4b74      	ldr	r3, [pc, #464]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	025b      	lsls	r3, r3, #9
 800413e:	4013      	ands	r3, r2
 8004140:	d116      	bne.n	8004170 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004142:	4b71      	ldr	r3, [pc, #452]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2202      	movs	r2, #2
 8004148:	4013      	ands	r3, r2
 800414a:	d005      	beq.n	8004158 <HAL_RCC_OscConfig+0x178>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d001      	beq.n	8004158 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e229      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b6b      	ldr	r3, [pc, #428]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	22f8      	movs	r2, #248	; 0xf8
 800415e:	4393      	bics	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	00da      	lsls	r2, r3, #3
 8004168:	4b67      	ldr	r3, [pc, #412]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800416a:	430a      	orrs	r2, r1
 800416c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	e041      	b.n	80041f4 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d024      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004178:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	4b62      	ldr	r3, [pc, #392]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800417e:	2101      	movs	r1, #1
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe feb2 	bl	8002eec <HAL_GetTick>
 8004188:	0003      	movs	r3, r0
 800418a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418e:	f7fe fead 	bl	8002eec <HAL_GetTick>
 8004192:	0002      	movs	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e205      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a0:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2202      	movs	r2, #2
 80041a6:	4013      	ands	r3, r2
 80041a8:	d0f1      	beq.n	800418e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041aa:	4b57      	ldr	r3, [pc, #348]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	22f8      	movs	r2, #248	; 0xf8
 80041b0:	4393      	bics	r3, r2
 80041b2:	0019      	movs	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	00da      	lsls	r2, r3, #3
 80041ba:	4b53      	ldr	r3, [pc, #332]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	e018      	b.n	80041f4 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b51      	ldr	r3, [pc, #324]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b50      	ldr	r3, [pc, #320]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80041c8:	2101      	movs	r1, #1
 80041ca:	438a      	bics	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fe fe8d 	bl	8002eec <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d8:	f7fe fe88 	bl	8002eec <HAL_GetTick>
 80041dc:	0002      	movs	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e1e0      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ea:	4b47      	ldr	r3, [pc, #284]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2202      	movs	r2, #2
 80041f0:	4013      	ands	r3, r2
 80041f2:	d1f1      	bne.n	80041d8 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2208      	movs	r2, #8
 80041fa:	4013      	ands	r3, r2
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d019      	beq.n	800423a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b40      	ldr	r3, [pc, #256]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420a:	4b3f      	ldr	r3, [pc, #252]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800420c:	2101      	movs	r1, #1
 800420e:	430a      	orrs	r2, r1
 8004210:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7fe fe6b 	bl	8002eec <HAL_GetTick>
 8004216:	0003      	movs	r3, r0
 8004218:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421c:	f7fe fe66 	bl	8002eec <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e1be      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2202      	movs	r2, #2
 8004234:	4013      	ands	r3, r2
 8004236:	d0f1      	beq.n	800421c <HAL_RCC_OscConfig+0x23c>
 8004238:	e018      	b.n	800426c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423a:	4b33      	ldr	r3, [pc, #204]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800423c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800423e:	4b32      	ldr	r3, [pc, #200]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004240:	2101      	movs	r1, #1
 8004242:	438a      	bics	r2, r1
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fe fe51 	bl	8002eec <HAL_GetTick>
 800424a:	0003      	movs	r3, r0
 800424c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004250:	f7fe fe4c 	bl	8002eec <HAL_GetTick>
 8004254:	0002      	movs	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e1a4      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004262:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2202      	movs	r2, #2
 8004268:	4013      	ands	r3, r2
 800426a:	d1f1      	bne.n	8004250 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2204      	movs	r2, #4
 8004272:	4013      	ands	r3, r2
 8004274:	d100      	bne.n	8004278 <HAL_RCC_OscConfig+0x298>
 8004276:	e0b5      	b.n	80043e4 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004278:	2017      	movs	r0, #23
 800427a:	183b      	adds	r3, r7, r0
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	055b      	lsls	r3, r3, #21
 8004288:	4013      	ands	r3, r2
 800428a:	d110      	bne.n	80042ae <HAL_RCC_OscConfig+0x2ce>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800428e:	69da      	ldr	r2, [r3, #28]
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 8004292:	2180      	movs	r1, #128	; 0x80
 8004294:	0549      	lsls	r1, r1, #21
 8004296:	430a      	orrs	r2, r1
 8004298:	61da      	str	r2, [r3, #28]
 800429a:	4b1b      	ldr	r3, [pc, #108]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	055b      	lsls	r3, r3, #21
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80042a8:	183b      	adds	r3, r7, r0
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ae:	4b19      	ldr	r3, [pc, #100]	; (8004314 <HAL_RCC_OscConfig+0x334>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	4013      	ands	r3, r2
 80042b8:	d11a      	bne.n	80042f0 <HAL_RCC_OscConfig+0x310>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042ba:	4b16      	ldr	r3, [pc, #88]	; (8004314 <HAL_RCC_OscConfig+0x334>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b15      	ldr	r3, [pc, #84]	; (8004314 <HAL_RCC_OscConfig+0x334>)
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	0049      	lsls	r1, r1, #1
 80042c4:	430a      	orrs	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c8:	f7fe fe10 	bl	8002eec <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x304>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d2:	f7fe fe0b 	bl	8002eec <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b64      	cmp	r3, #100	; 0x64
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x304>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e163      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_OscConfig+0x334>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	4013      	ands	r3, r2
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10f      	bne.n	8004318 <HAL_RCC_OscConfig+0x338>
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80042fa:	6a1a      	ldr	r2, [r3, #32]
 80042fc:	4b02      	ldr	r3, [pc, #8]	; (8004308 <HAL_RCC_OscConfig+0x328>)
 80042fe:	2101      	movs	r1, #1
 8004300:	430a      	orrs	r2, r1
 8004302:	621a      	str	r2, [r3, #32]
 8004304:	e036      	b.n	8004374 <HAL_RCC_OscConfig+0x394>
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	40021000 	.word	0x40021000
 800430c:	fffeffff 	.word	0xfffeffff
 8004310:	fffbffff 	.word	0xfffbffff
 8004314:	40007000 	.word	0x40007000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d10c      	bne.n	800433a <HAL_RCC_OscConfig+0x35a>
 8004320:	4ba4      	ldr	r3, [pc, #656]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	4ba3      	ldr	r3, [pc, #652]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004326:	2101      	movs	r1, #1
 8004328:	438a      	bics	r2, r1
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	4ba1      	ldr	r3, [pc, #644]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	4ba0      	ldr	r3, [pc, #640]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004332:	2104      	movs	r1, #4
 8004334:	438a      	bics	r2, r1
 8004336:	621a      	str	r2, [r3, #32]
 8004338:	e01c      	b.n	8004374 <HAL_RCC_OscConfig+0x394>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b05      	cmp	r3, #5
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0x37c>
 8004342:	4b9c      	ldr	r3, [pc, #624]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	4b9b      	ldr	r3, [pc, #620]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004348:	2104      	movs	r1, #4
 800434a:	430a      	orrs	r2, r1
 800434c:	621a      	str	r2, [r3, #32]
 800434e:	4b99      	ldr	r3, [pc, #612]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004350:	6a1a      	ldr	r2, [r3, #32]
 8004352:	4b98      	ldr	r3, [pc, #608]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004354:	2101      	movs	r1, #1
 8004356:	430a      	orrs	r2, r1
 8004358:	621a      	str	r2, [r3, #32]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0x394>
 800435c:	4b95      	ldr	r3, [pc, #596]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800435e:	6a1a      	ldr	r2, [r3, #32]
 8004360:	4b94      	ldr	r3, [pc, #592]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004362:	2101      	movs	r1, #1
 8004364:	438a      	bics	r2, r1
 8004366:	621a      	str	r2, [r3, #32]
 8004368:	4b92      	ldr	r3, [pc, #584]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800436e:	2104      	movs	r1, #4
 8004370:	438a      	bics	r2, r1
 8004372:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d014      	beq.n	80043a6 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437c:	f7fe fdb6 	bl	8002eec <HAL_GetTick>
 8004380:	0003      	movs	r3, r0
 8004382:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	e009      	b.n	800439a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe fdb1 	bl	8002eec <HAL_GetTick>
 800438a:	0002      	movs	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	4a89      	ldr	r2, [pc, #548]	; (80045b8 <HAL_RCC_OscConfig+0x5d8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e108      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	4b86      	ldr	r3, [pc, #536]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x3a6>
 80043a4:	e013      	b.n	80043ce <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a6:	f7fe fda1 	bl	8002eec <HAL_GetTick>
 80043aa:	0003      	movs	r3, r0
 80043ac:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ae:	e009      	b.n	80043c4 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b0:	f7fe fd9c 	bl	8002eec <HAL_GetTick>
 80043b4:	0002      	movs	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	4a7f      	ldr	r2, [pc, #508]	; (80045b8 <HAL_RCC_OscConfig+0x5d8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e0f3      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c4:	4b7b      	ldr	r3, [pc, #492]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	2202      	movs	r2, #2
 80043ca:	4013      	ands	r3, r2
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043ce:	2317      	movs	r3, #23
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d105      	bne.n	80043e4 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043d8:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80043da:	69da      	ldr	r2, [r3, #28]
 80043dc:	4b75      	ldr	r3, [pc, #468]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80043de:	4977      	ldr	r1, [pc, #476]	; (80045bc <HAL_RCC_OscConfig+0x5dc>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2210      	movs	r2, #16
 80043ea:	4013      	ands	r3, r2
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d12a      	bne.n	800444c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80043f6:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80043f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fa:	4b6e      	ldr	r3, [pc, #440]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80043fc:	2104      	movs	r1, #4
 80043fe:	430a      	orrs	r2, r1
 8004400:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004402:	4b6c      	ldr	r3, [pc, #432]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004406:	4b6b      	ldr	r3, [pc, #428]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004408:	2101      	movs	r1, #1
 800440a:	430a      	orrs	r2, r1
 800440c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800440e:	f7fe fd6d 	bl	8002eec <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004418:	f7fe fd68 	bl	8002eec <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e0c0      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800442a:	4b62      	ldr	r3, [pc, #392]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800442c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442e:	2202      	movs	r2, #2
 8004430:	4013      	ands	r3, r2
 8004432:	d0f1      	beq.n	8004418 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004434:	4b5f      	ldr	r3, [pc, #380]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004438:	22f8      	movs	r2, #248	; 0xf8
 800443a:	4393      	bics	r3, r2
 800443c:	0019      	movs	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	00da      	lsls	r2, r3, #3
 8004444:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004446:	430a      	orrs	r2, r1
 8004448:	635a      	str	r2, [r3, #52]	; 0x34
 800444a:	e034      	b.n	80044b6 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	3305      	adds	r3, #5
 8004452:	d111      	bne.n	8004478 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004454:	4b57      	ldr	r3, [pc, #348]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004458:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800445a:	2104      	movs	r1, #4
 800445c:	438a      	bics	r2, r1
 800445e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004460:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	22f8      	movs	r2, #248	; 0xf8
 8004466:	4393      	bics	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	00da      	lsls	r2, r3, #3
 8004470:	4b50      	ldr	r3, [pc, #320]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004472:	430a      	orrs	r2, r1
 8004474:	635a      	str	r2, [r3, #52]	; 0x34
 8004476:	e01e      	b.n	80044b6 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004478:	4b4e      	ldr	r3, [pc, #312]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800447a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800447c:	4b4d      	ldr	r3, [pc, #308]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800447e:	2104      	movs	r1, #4
 8004480:	430a      	orrs	r2, r1
 8004482:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004484:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004488:	4b4a      	ldr	r3, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800448a:	2101      	movs	r1, #1
 800448c:	438a      	bics	r2, r1
 800448e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004490:	f7fe fd2c 	bl	8002eec <HAL_GetTick>
 8004494:	0003      	movs	r3, r0
 8004496:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800449a:	f7fe fd27 	bl	8002eec <HAL_GetTick>
 800449e:	0002      	movs	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e07f      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80044ac:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80044ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b0:	2202      	movs	r2, #2
 80044b2:	4013      	ands	r3, r2
 80044b4:	d1f1      	bne.n	800449a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d100      	bne.n	80044c0 <HAL_RCC_OscConfig+0x4e0>
 80044be:	e074      	b.n	80045aa <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044c0:	4b3c      	ldr	r3, [pc, #240]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	220c      	movs	r2, #12
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d100      	bne.n	80044ce <HAL_RCC_OscConfig+0x4ee>
 80044cc:	e06b      	b.n	80045a6 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d14c      	bne.n	8004570 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d6:	4b37      	ldr	r3, [pc, #220]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b36      	ldr	r3, [pc, #216]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 80044dc:	4938      	ldr	r1, [pc, #224]	; (80045c0 <HAL_RCC_OscConfig+0x5e0>)
 80044de:	400a      	ands	r2, r1
 80044e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e2:	f7fe fd03 	bl	8002eec <HAL_GetTick>
 80044e6:	0003      	movs	r3, r0
 80044e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fe fcfe 	bl	8002eec <HAL_GetTick>
 80044f0:	0002      	movs	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e056      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044fe:	4b2d      	ldr	r3, [pc, #180]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	049b      	lsls	r3, r3, #18
 8004506:	4013      	ands	r3, r2
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	220f      	movs	r2, #15
 8004510:	4393      	bics	r3, r2
 8004512:	0019      	movs	r1, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	4b26      	ldr	r3, [pc, #152]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800451a:	430a      	orrs	r2, r1
 800451c:	62da      	str	r2, [r3, #44]	; 0x2c
 800451e:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4a28      	ldr	r2, [pc, #160]	; (80045c4 <HAL_RCC_OscConfig+0x5e4>)
 8004524:	4013      	ands	r3, r2
 8004526:	0019      	movs	r1, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	431a      	orrs	r2, r3
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800453e:	2180      	movs	r1, #128	; 0x80
 8004540:	0449      	lsls	r1, r1, #17
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004546:	f7fe fcd1 	bl	8002eec <HAL_GetTick>
 800454a:	0003      	movs	r3, r0
 800454c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004550:	f7fe fccc 	bl	8002eec <HAL_GetTick>
 8004554:	0002      	movs	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e024      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004562:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	049b      	lsls	r3, r3, #18
 800456a:	4013      	ands	r3, r2
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x570>
 800456e:	e01c      	b.n	80045aa <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004570:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 8004576:	4912      	ldr	r1, [pc, #72]	; (80045c0 <HAL_RCC_OscConfig+0x5e0>)
 8004578:	400a      	ands	r2, r1
 800457a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fe fcb6 	bl	8002eec <HAL_GetTick>
 8004580:	0003      	movs	r3, r0
 8004582:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004586:	f7fe fcb1 	bl	8002eec <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e009      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_RCC_OscConfig+0x5d4>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	049b      	lsls	r3, r3, #18
 80045a0:	4013      	ands	r3, r2
 80045a2:	d1f0      	bne.n	8004586 <HAL_RCC_OscConfig+0x5a6>
 80045a4:	e001      	b.n	80045aa <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b006      	add	sp, #24
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	00001388 	.word	0x00001388
 80045bc:	efffffff 	.word	0xefffffff
 80045c0:	feffffff 	.word	0xfeffffff
 80045c4:	ffc2ffff 	.word	0xffc2ffff

080045c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80045d6:	4b6a      	ldr	r3, [pc, #424]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2201      	movs	r2, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d911      	bls.n	8004608 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e4:	4b66      	ldr	r3, [pc, #408]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2201      	movs	r2, #1
 80045ea:	4393      	bics	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	4b64      	ldr	r3, [pc, #400]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80045f6:	4b62      	ldr	r3, [pc, #392]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2201      	movs	r2, #1
 80045fc:	4013      	ands	r3, r2
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b6      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2202      	movs	r2, #2
 800460e:	4013      	ands	r3, r2
 8004610:	d009      	beq.n	8004626 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004612:	4b5c      	ldr	r3, [pc, #368]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	22f0      	movs	r2, #240	; 0xf0
 8004618:	4393      	bics	r3, r2
 800461a:	0019      	movs	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	4b58      	ldr	r3, [pc, #352]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	430a      	orrs	r2, r1
 8004624:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	4013      	ands	r3, r2
 800462e:	d100      	bne.n	8004632 <HAL_RCC_ClockConfig+0x6a>
 8004630:	e067      	b.n	8004702 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800463a:	4b52      	ldr	r3, [pc, #328]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	4013      	ands	r3, r2
 8004644:	d114      	bne.n	8004670 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e095      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b4c      	ldr	r3, [pc, #304]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	049b      	lsls	r3, r3, #18
 800465a:	4013      	ands	r3, r2
 800465c:	d108      	bne.n	8004670 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e089      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b48      	ldr	r3, [pc, #288]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e082      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004670:	4b44      	ldr	r3, [pc, #272]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2203      	movs	r2, #3
 8004676:	4393      	bics	r3, r2
 8004678:	0019      	movs	r1, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	4b41      	ldr	r3, [pc, #260]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	430a      	orrs	r2, r1
 8004682:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004684:	f7fe fc32 	bl	8002eec <HAL_GetTick>
 8004688:	0003      	movs	r3, r0
 800468a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d111      	bne.n	80046b8 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004694:	e009      	b.n	80046aa <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004696:	f7fe fc29 	bl	8002eec <HAL_GetTick>
 800469a:	0002      	movs	r2, r0
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	4a39      	ldr	r2, [pc, #228]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e065      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046aa:	4b36      	ldr	r3, [pc, #216]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	220c      	movs	r2, #12
 80046b0:	4013      	ands	r3, r2
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d1ef      	bne.n	8004696 <HAL_RCC_ClockConfig+0xce>
 80046b6:	e024      	b.n	8004702 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c0:	e009      	b.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c2:	f7fe fc13 	bl	8002eec <HAL_GetTick>
 80046c6:	0002      	movs	r2, r0
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	4a2e      	ldr	r2, [pc, #184]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e04f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046d6:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	220c      	movs	r2, #12
 80046dc:	4013      	ands	r3, r2
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d1ef      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xfa>
 80046e2:	e00e      	b.n	8004702 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fe fc02 	bl	8002eec <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	4a26      	ldr	r2, [pc, #152]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e03e      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046f8:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	220c      	movs	r2, #12
 80046fe:	4013      	ands	r3, r2
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004702:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2201      	movs	r2, #1
 8004708:	4013      	ands	r3, r2
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d211      	bcs.n	8004734 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2201      	movs	r2, #1
 8004716:	4393      	bics	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004722:	4b17      	ldr	r3, [pc, #92]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	4013      	ands	r3, r2
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d001      	beq.n	8004734 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e020      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2204      	movs	r2, #4
 800473a:	4013      	ands	r3, r2
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	4a12      	ldr	r2, [pc, #72]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	4013      	ands	r3, r2
 8004746:	0019      	movs	r1, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	4b0d      	ldr	r3, [pc, #52]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	430a      	orrs	r2, r1
 8004750:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004752:	f000 f821 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004756:	0001      	movs	r1, r0
 8004758:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	220f      	movs	r2, #15
 8004760:	4013      	ands	r3, r2
 8004762:	4a0b      	ldr	r2, [pc, #44]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004764:	5cd3      	ldrb	r3, [r2, r3]
 8004766:	000a      	movs	r2, r1
 8004768:	40da      	lsrs	r2, r3
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x1cc>)
 800476c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800476e:	2000      	movs	r0, #0
 8004770:	f7fe fb94 	bl	8002e9c <HAL_InitTick>
  
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	0018      	movs	r0, r3
 8004778:	46bd      	mov	sp, r7
 800477a:	b004      	add	sp, #16
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	40022000 	.word	0x40022000
 8004784:	40021000 	.word	0x40021000
 8004788:	00001388 	.word	0x00001388
 800478c:	fffff8ff 	.word	0xfffff8ff
 8004790:	080053bc 	.word	0x080053bc
 8004794:	20000004 	.word	0x20000004

08004798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	b590      	push	{r4, r7, lr}
 800479a:	b08f      	sub	sp, #60	; 0x3c
 800479c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800479e:	2314      	movs	r3, #20
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	4a2b      	ldr	r2, [pc, #172]	; (8004850 <HAL_RCC_GetSysClockFreq+0xb8>)
 80047a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047a6:	c313      	stmia	r3!, {r0, r1, r4}
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80047ac:	1d3b      	adds	r3, r7, #4
 80047ae:	4a29      	ldr	r2, [pc, #164]	; (8004854 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047b2:	c313      	stmia	r3!, {r0, r1, r4}
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047bc:	2300      	movs	r3, #0
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c0:	2300      	movs	r3, #0
 80047c2:	637b      	str	r3, [r7, #52]	; 0x34
 80047c4:	2300      	movs	r3, #0
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80047cc:	4b22      	ldr	r3, [pc, #136]	; (8004858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	220c      	movs	r2, #12
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d002      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x4a>
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d003      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0x50>
 80047e0:	e02d      	b.n	800483e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047e2:	4b1e      	ldr	r3, [pc, #120]	; (800485c <HAL_RCC_GetSysClockFreq+0xc4>)
 80047e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047e6:	e02d      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	0c9b      	lsrs	r3, r3, #18
 80047ec:	220f      	movs	r2, #15
 80047ee:	4013      	ands	r3, r2
 80047f0:	2214      	movs	r2, #20
 80047f2:	18ba      	adds	r2, r7, r2
 80047f4:	5cd3      	ldrb	r3, [r2, r3]
 80047f6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80047f8:	4b17      	ldr	r3, [pc, #92]	; (8004858 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	220f      	movs	r2, #15
 80047fe:	4013      	ands	r3, r2
 8004800:	1d3a      	adds	r2, r7, #4
 8004802:	5cd3      	ldrb	r3, [r2, r3]
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	025b      	lsls	r3, r3, #9
 800480c:	4013      	ands	r3, r2
 800480e:	d009      	beq.n	8004824 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004810:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004812:	4812      	ldr	r0, [pc, #72]	; (800485c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004814:	f7fb fc78 	bl	8000108 <__udivsi3>
 8004818:	0003      	movs	r3, r0
 800481a:	001a      	movs	r2, r3
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	4353      	muls	r3, r2
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
 8004822:	e009      	b.n	8004838 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8004824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004826:	000a      	movs	r2, r1
 8004828:	0152      	lsls	r2, r2, #5
 800482a:	1a52      	subs	r2, r2, r1
 800482c:	0193      	lsls	r3, r2, #6
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	185b      	adds	r3, r3, r1
 8004834:	021b      	lsls	r3, r3, #8
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800483c:	e002      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800483e:	4b08      	ldr	r3, [pc, #32]	; (8004860 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004840:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004842:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004846:	0018      	movs	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	b00f      	add	sp, #60	; 0x3c
 800484c:	bd90      	pop	{r4, r7, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	0800529c 	.word	0x0800529c
 8004854:	080052ac 	.word	0x080052ac
 8004858:	40021000 	.word	0x40021000
 800485c:	01e84800 	.word	0x01e84800
 8004860:	007a1200 	.word	0x007a1200

08004864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <HAL_RCC_GetHCLKFreq+0x10>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	0018      	movs	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	20000004 	.word	0x20000004

08004878 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e01e      	b.n	80048c8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	223d      	movs	r2, #61	; 0x3d
 800488e:	5c9b      	ldrb	r3, [r3, r2]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	223c      	movs	r2, #60	; 0x3c
 800489a:	2100      	movs	r1, #0
 800489c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	0018      	movs	r0, r3
 80048a2:	f7fe fa1f 	bl	8002ce4 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	223d      	movs	r2, #61	; 0x3d
 80048aa:	2102      	movs	r1, #2
 80048ac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	0019      	movs	r1, r3
 80048b8:	0010      	movs	r0, r2
 80048ba:	f000 fa5f 	bl	8004d7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	223d      	movs	r2, #61	; 0x3d
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b002      	add	sp, #8
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	223d      	movs	r2, #61	; 0x3d
 80048dc:	2102      	movs	r1, #2
 80048de:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2101      	movs	r1, #1
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	223d      	movs	r2, #61	; 0x3d
 80048f4:	2101      	movs	r1, #1
 80048f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	0018      	movs	r0, r3
 80048fc:	46bd      	mov	sp, r7
 80048fe:	b002      	add	sp, #8
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	430a      	orrs	r2, r1
 8004918:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2101      	movs	r1, #1
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b002      	add	sp, #8
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2202      	movs	r2, #2
 8004944:	4013      	ands	r3, r2
 8004946:	2b02      	cmp	r3, #2
 8004948:	d124      	bne.n	8004994 <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2202      	movs	r2, #2
 8004952:	4013      	ands	r3, r2
 8004954:	2b02      	cmp	r3, #2
 8004956:	d11d      	bne.n	8004994 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2203      	movs	r2, #3
 800495e:	4252      	negs	r2, r2
 8004960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	2203      	movs	r2, #3
 8004970:	4013      	ands	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	0018      	movs	r0, r3
 8004978:	f000 f9e8 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 800497c:	e007      	b.n	800498e <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	0018      	movs	r0, r3
 8004982:	f000 f9db 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	0018      	movs	r0, r3
 800498a:	f000 f9e7 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	2204      	movs	r2, #4
 800499c:	4013      	ands	r3, r2
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d125      	bne.n	80049ee <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2204      	movs	r2, #4
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d11e      	bne.n	80049ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2205      	movs	r2, #5
 80049b6:	4252      	negs	r2, r2
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	23c0      	movs	r3, #192	; 0xc0
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4013      	ands	r3, r2
 80049cc:	d004      	beq.n	80049d8 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f000 f9bb 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 80049d6:	e007      	b.n	80049e8 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 f9ae 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0018      	movs	r0, r3
 80049e4:	f000 f9ba 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2208      	movs	r2, #8
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d124      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2208      	movs	r2, #8
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d11d      	bne.n	8004a46 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2209      	movs	r2, #9
 8004a10:	4252      	negs	r2, r2
 8004a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2204      	movs	r2, #4
 8004a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	2203      	movs	r2, #3
 8004a22:	4013      	ands	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f98f 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 8004a2e:	e007      	b.n	8004a40 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 f982 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 f98e 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b10      	cmp	r3, #16
 8004a52:	d125      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2210      	movs	r2, #16
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d11e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2211      	movs	r2, #17
 8004a68:	4252      	negs	r2, r2
 8004a6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2208      	movs	r2, #8
 8004a70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	23c0      	movs	r3, #192	; 0xc0
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 f962 	bl	8004d4c <HAL_TIM_IC_CaptureCallback>
 8004a88:	e007      	b.n	8004a9a <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	f000 f955 	bl	8004d3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f000 f961 	bl	8004d5c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d10f      	bne.n	8004ace <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d108      	bne.n	8004ace <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	4252      	negs	r2, r2
 8004ac4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fd ff41 	bl	8002950 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d10f      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	2280      	movs	r2, #128	; 0x80
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b80      	cmp	r3, #128	; 0x80
 8004ae8:	d108      	bne.n	8004afc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2281      	movs	r2, #129	; 0x81
 8004af0:	4252      	negs	r2, r2
 8004af2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 faad 	bl	8005056 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	2240      	movs	r2, #64	; 0x40
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b40      	cmp	r3, #64	; 0x40
 8004b08:	d10f      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2240      	movs	r2, #64	; 0x40
 8004b12:	4013      	ands	r3, r2
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d108      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2241      	movs	r2, #65	; 0x41
 8004b1e:	4252      	negs	r2, r2
 8004b20:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f921 	bl	8004d6c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2220      	movs	r2, #32
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d10f      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	4013      	ands	r3, r2
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d108      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2221      	movs	r2, #33	; 0x21
 8004b4c:	4252      	negs	r2, r2
 8004b4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 fa77 	bl	8005046 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8004b58:	46c0      	nop			; (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	223c      	movs	r2, #60	; 0x3c
 8004b72:	5c9b      	ldrb	r3, [r3, r2]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIM_ConfigClockSource+0x1c>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0d8      	b.n	8004d2e <HAL_TIM_ConfigClockSource+0x1ce>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	223c      	movs	r2, #60	; 0x3c
 8004b80:	2101      	movs	r1, #1
 8004b82:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	223d      	movs	r2, #61	; 0x3d
 8004b88:	2102      	movs	r1, #2
 8004b8a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2277      	movs	r2, #119	; 0x77
 8004b98:	4393      	bics	r3, r2
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	4a66      	ldr	r2, [pc, #408]	; (8004d38 <HAL_TIM_ConfigClockSource+0x1d8>)
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	0192      	lsls	r2, r2, #6
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d050      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0xfa>
 8004bb8:	2280      	movs	r2, #128	; 0x80
 8004bba:	0192      	lsls	r2, r2, #6
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d900      	bls.n	8004bc2 <HAL_TIM_ConfigClockSource+0x62>
 8004bc0:	e0ab      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	0152      	lsls	r2, r2, #5
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d023      	beq.n	8004c12 <HAL_TIM_ConfigClockSource+0xb2>
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	0152      	lsls	r2, r2, #5
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d900      	bls.n	8004bd4 <HAL_TIM_ConfigClockSource+0x74>
 8004bd2:	e0a2      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004bd4:	2b70      	cmp	r3, #112	; 0x70
 8004bd6:	d025      	beq.n	8004c24 <HAL_TIM_ConfigClockSource+0xc4>
 8004bd8:	d900      	bls.n	8004bdc <HAL_TIM_ConfigClockSource+0x7c>
 8004bda:	e09e      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004bdc:	2b60      	cmp	r3, #96	; 0x60
 8004bde:	d060      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x142>
 8004be0:	d900      	bls.n	8004be4 <HAL_TIM_ConfigClockSource+0x84>
 8004be2:	e09a      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004be4:	2b50      	cmp	r3, #80	; 0x50
 8004be6:	d04c      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0x122>
 8004be8:	d900      	bls.n	8004bec <HAL_TIM_ConfigClockSource+0x8c>
 8004bea:	e096      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004bec:	2b40      	cmp	r3, #64	; 0x40
 8004bee:	d068      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0x162>
 8004bf0:	d900      	bls.n	8004bf4 <HAL_TIM_ConfigClockSource+0x94>
 8004bf2:	e092      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004bf4:	2b30      	cmp	r3, #48	; 0x30
 8004bf6:	d100      	bne.n	8004bfa <HAL_TIM_ConfigClockSource+0x9a>
 8004bf8:	e088      	b.n	8004d0c <HAL_TIM_ConfigClockSource+0x1ac>
 8004bfa:	d900      	bls.n	8004bfe <HAL_TIM_ConfigClockSource+0x9e>
 8004bfc:	e08d      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d100      	bne.n	8004c04 <HAL_TIM_ConfigClockSource+0xa4>
 8004c02:	e07c      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x19e>
 8004c04:	d900      	bls.n	8004c08 <HAL_TIM_ConfigClockSource+0xa8>
 8004c06:	e088      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d06a      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x182>
 8004c0c:	2b10      	cmp	r3, #16
 8004c0e:	d06f      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8004c10:	e083      	b.n	8004d1a <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2107      	movs	r1, #7
 8004c1e:	438a      	bics	r2, r1
 8004c20:	609a      	str	r2, [r3, #8]
    break;
 8004c22:	e07b      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6818      	ldr	r0, [r3, #0]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	6899      	ldr	r1, [r3, #8]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f000 f9a2 	bl	8004f7c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2277      	movs	r2, #119	; 0x77
 8004c44:	4393      	bics	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2277      	movs	r2, #119	; 0x77
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	609a      	str	r2, [r3, #8]
    break;
 8004c58:	e060      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6899      	ldr	r1, [r3, #8]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f000 f987 	bl	8004f7c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2180      	movs	r1, #128	; 0x80
 8004c7a:	01c9      	lsls	r1, r1, #7
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
    break;
 8004c80:	e04c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6818      	ldr	r0, [r3, #0]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	6859      	ldr	r1, [r3, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	001a      	movs	r2, r3
 8004c90:	f000 f8ec 	bl	8004e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2150      	movs	r1, #80	; 0x50
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 f94e 	bl	8004f3c <TIM_ITRx_SetConfig>
    break;
 8004ca0:	e03c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6859      	ldr	r1, [r3, #4]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	001a      	movs	r2, r3
 8004cb0:	f000 f90e 	bl	8004ed0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2160      	movs	r1, #96	; 0x60
 8004cba:	0018      	movs	r0, r3
 8004cbc:	f000 f93e 	bl	8004f3c <TIM_ITRx_SetConfig>
    break;
 8004cc0:	e02c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6859      	ldr	r1, [r3, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	001a      	movs	r2, r3
 8004cd0:	f000 f8cc 	bl	8004e6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2140      	movs	r1, #64	; 0x40
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f92e 	bl	8004f3c <TIM_ITRx_SetConfig>
    break;
 8004ce0:	e01c      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	0018      	movs	r0, r3
 8004cea:	f000 f927 	bl	8004f3c <TIM_ITRx_SetConfig>
    break;
 8004cee:	e015      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2110      	movs	r1, #16
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f000 f920 	bl	8004f3c <TIM_ITRx_SetConfig>
    break;
 8004cfc:	e00e      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2120      	movs	r1, #32
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 f919 	bl	8004f3c <TIM_ITRx_SetConfig>
    break;
 8004d0a:	e007      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2130      	movs	r1, #48	; 0x30
 8004d12:	0018      	movs	r0, r3
 8004d14:	f000 f912 	bl	8004f3c <TIM_ITRx_SetConfig>
    break;
 8004d18:	e000      	b.n	8004d1c <HAL_TIM_ConfigClockSource+0x1bc>
    break;
 8004d1a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	223d      	movs	r2, #61	; 0x3d
 8004d20:	2101      	movs	r1, #1
 8004d22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	223c      	movs	r2, #60	; 0x3c
 8004d28:	2100      	movs	r1, #0
 8004d2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	ffff00ff 	.word	0xffff00ff

08004d3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d64:	46c0      	nop			; (mov r8, r8)
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b002      	add	sp, #8
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a2f      	ldr	r2, [pc, #188]	; (8004e50 <TIM_Base_SetConfig+0xd4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_Base_SetConfig+0x24>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a2e      	ldr	r2, [pc, #184]	; (8004e54 <TIM_Base_SetConfig+0xd8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2270      	movs	r2, #112	; 0x70
 8004da4:	4393      	bics	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a26      	ldr	r2, [pc, #152]	; (8004e50 <TIM_Base_SetConfig+0xd4>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <TIM_Base_SetConfig+0x66>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a25      	ldr	r2, [pc, #148]	; (8004e54 <TIM_Base_SetConfig+0xd8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00f      	beq.n	8004de2 <TIM_Base_SetConfig+0x66>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a24      	ldr	r2, [pc, #144]	; (8004e58 <TIM_Base_SetConfig+0xdc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00b      	beq.n	8004de2 <TIM_Base_SetConfig+0x66>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a23      	ldr	r2, [pc, #140]	; (8004e5c <TIM_Base_SetConfig+0xe0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d007      	beq.n	8004de2 <TIM_Base_SetConfig+0x66>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a22      	ldr	r2, [pc, #136]	; (8004e60 <TIM_Base_SetConfig+0xe4>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d003      	beq.n	8004de2 <TIM_Base_SetConfig+0x66>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <TIM_Base_SetConfig+0xe8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d108      	bne.n	8004df4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a20      	ldr	r2, [pc, #128]	; (8004e68 <TIM_Base_SetConfig+0xec>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2280      	movs	r2, #128	; 0x80
 8004df8:	4393      	bics	r3, r2
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689a      	ldr	r2, [r3, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <TIM_Base_SetConfig+0xd4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <TIM_Base_SetConfig+0xbe>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a0d      	ldr	r2, [pc, #52]	; (8004e5c <TIM_Base_SetConfig+0xe0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d007      	beq.n	8004e3a <TIM_Base_SetConfig+0xbe>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <TIM_Base_SetConfig+0xe4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d003      	beq.n	8004e3a <TIM_Base_SetConfig+0xbe>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <TIM_Base_SetConfig+0xe8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d103      	bne.n	8004e42 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	615a      	str	r2, [r3, #20]
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b004      	add	sp, #16
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40002000 	.word	0x40002000
 8004e5c:	40014000 	.word	0x40014000
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800
 8004e68:	fffffcff 	.word	0xfffffcff

08004e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	4393      	bics	r3, r2
 8004e8e:	001a      	movs	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	22f0      	movs	r2, #240	; 0xf0
 8004e9e:	4393      	bics	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	220a      	movs	r2, #10
 8004eb0:	4393      	bics	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	621a      	str	r2, [r3, #32]
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b006      	add	sp, #24
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	2210      	movs	r2, #16
 8004eea:	4393      	bics	r3, r2
 8004eec:	001a      	movs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <TIM_TI2_ConfigInputStage+0x68>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	22a0      	movs	r2, #160	; 0xa0
 8004f14:	4393      	bics	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	46bd      	mov	sp, r7
 8004f32:	b006      	add	sp, #24
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	ffff0fff 	.word	0xffff0fff

08004f3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	000a      	movs	r2, r1
 8004f46:	1cbb      	adds	r3, r7, #2
 8004f48:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2270      	movs	r2, #112	; 0x70
 8004f58:	4393      	bics	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8004f5c:	1cbb      	adds	r3, r7, #2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	2207      	movs	r2, #7
 8004f62:	4313      	orrs	r3, r2
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	001a      	movs	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b004      	add	sp, #16
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <TIM_ETR_SetConfig+0x40>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	46c0      	nop			; (mov r8, r8)
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b006      	add	sp, #24
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	ffff00ff 	.word	0xffff00ff

08004fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	223c      	movs	r2, #60	; 0x3c
 8004fce:	5c9b      	ldrb	r3, [r3, r2]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e032      	b.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	223c      	movs	r2, #60	; 0x3c
 8004fdc:	2101      	movs	r1, #1
 8004fde:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	223d      	movs	r2, #61	; 0x3d
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2170      	movs	r1, #112	; 0x70
 8004ff4:	438a      	bics	r2, r1
 8004ff6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6859      	ldr	r1, [r3, #4]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	438a      	bics	r2, r1
 8005018:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6899      	ldr	r1, [r3, #8]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685a      	ldr	r2, [r3, #4]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	223d      	movs	r2, #61	; 0x3d
 8005030:	2101      	movs	r1, #1
 8005032:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	223c      	movs	r2, #60	; 0x3c
 8005038:	2100      	movs	r1, #0
 800503a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b002      	add	sp, #8
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	46bd      	mov	sp, r7
 8005052:	b002      	add	sp, #8
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b002      	add	sp, #8
 8005064:	bd80      	pop	{r7, pc}

08005066 <sqrt>:
 8005066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005068:	0004      	movs	r4, r0
 800506a:	000d      	movs	r5, r1
 800506c:	f000 f822 	bl	80050b4 <__ieee754_sqrt>
 8005070:	0022      	movs	r2, r4
 8005072:	0006      	movs	r6, r0
 8005074:	000f      	movs	r7, r1
 8005076:	002b      	movs	r3, r5
 8005078:	0020      	movs	r0, r4
 800507a:	0029      	movs	r1, r5
 800507c:	f7fd f984 	bl	8002388 <__aeabi_dcmpun>
 8005080:	2800      	cmp	r0, #0
 8005082:	d113      	bne.n	80050ac <sqrt+0x46>
 8005084:	2200      	movs	r2, #0
 8005086:	2300      	movs	r3, #0
 8005088:	0020      	movs	r0, r4
 800508a:	0029      	movs	r1, r5
 800508c:	f7fb f9c8 	bl	8000420 <__aeabi_dcmplt>
 8005090:	2800      	cmp	r0, #0
 8005092:	d00b      	beq.n	80050ac <sqrt+0x46>
 8005094:	f000 f8c4 	bl	8005220 <__errno>
 8005098:	2321      	movs	r3, #33	; 0x21
 800509a:	2200      	movs	r2, #0
 800509c:	6003      	str	r3, [r0, #0]
 800509e:	2300      	movs	r3, #0
 80050a0:	0010      	movs	r0, r2
 80050a2:	0019      	movs	r1, r3
 80050a4:	f7fb ff70 	bl	8000f88 <__aeabi_ddiv>
 80050a8:	0006      	movs	r6, r0
 80050aa:	000f      	movs	r7, r1
 80050ac:	0030      	movs	r0, r6
 80050ae:	0039      	movs	r1, r7
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080050b4 <__ieee754_sqrt>:
 80050b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b6:	000b      	movs	r3, r1
 80050b8:	000c      	movs	r4, r1
 80050ba:	4956      	ldr	r1, [pc, #344]	; (8005214 <__ieee754_sqrt+0x160>)
 80050bc:	0005      	movs	r5, r0
 80050be:	0002      	movs	r2, r0
 80050c0:	0008      	movs	r0, r1
 80050c2:	b085      	sub	sp, #20
 80050c4:	4020      	ands	r0, r4
 80050c6:	4288      	cmp	r0, r1
 80050c8:	d10f      	bne.n	80050ea <__ieee754_sqrt+0x36>
 80050ca:	0028      	movs	r0, r5
 80050cc:	0021      	movs	r1, r4
 80050ce:	f7fc fb5d 	bl	800178c <__aeabi_dmul>
 80050d2:	0002      	movs	r2, r0
 80050d4:	000b      	movs	r3, r1
 80050d6:	0028      	movs	r0, r5
 80050d8:	0021      	movs	r1, r4
 80050da:	f7fb fc19 	bl	8000910 <__aeabi_dadd>
 80050de:	0005      	movs	r5, r0
 80050e0:	000c      	movs	r4, r1
 80050e2:	0028      	movs	r0, r5
 80050e4:	0021      	movs	r1, r4
 80050e6:	b005      	add	sp, #20
 80050e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050ea:	2c00      	cmp	r4, #0
 80050ec:	dc10      	bgt.n	8005110 <__ieee754_sqrt+0x5c>
 80050ee:	0061      	lsls	r1, r4, #1
 80050f0:	0849      	lsrs	r1, r1, #1
 80050f2:	4329      	orrs	r1, r5
 80050f4:	d0f5      	beq.n	80050e2 <__ieee754_sqrt+0x2e>
 80050f6:	2100      	movs	r1, #0
 80050f8:	428c      	cmp	r4, r1
 80050fa:	d100      	bne.n	80050fe <__ieee754_sqrt+0x4a>
 80050fc:	e080      	b.n	8005200 <__ieee754_sqrt+0x14c>
 80050fe:	0028      	movs	r0, r5
 8005100:	0021      	movs	r1, r4
 8005102:	f7fc fdaf 	bl	8001c64 <__aeabi_dsub>
 8005106:	0002      	movs	r2, r0
 8005108:	000b      	movs	r3, r1
 800510a:	f7fb ff3d 	bl	8000f88 <__aeabi_ddiv>
 800510e:	e7e6      	b.n	80050de <__ieee754_sqrt+0x2a>
 8005110:	1521      	asrs	r1, r4, #20
 8005112:	d075      	beq.n	8005200 <__ieee754_sqrt+0x14c>
 8005114:	4840      	ldr	r0, [pc, #256]	; (8005218 <__ieee754_sqrt+0x164>)
 8005116:	031b      	lsls	r3, r3, #12
 8005118:	180c      	adds	r4, r1, r0
 800511a:	2080      	movs	r0, #128	; 0x80
 800511c:	0b1b      	lsrs	r3, r3, #12
 800511e:	0340      	lsls	r0, r0, #13
 8005120:	4303      	orrs	r3, r0
 8005122:	07c9      	lsls	r1, r1, #31
 8005124:	d403      	bmi.n	800512e <__ieee754_sqrt+0x7a>
 8005126:	0fd1      	lsrs	r1, r2, #31
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	185b      	adds	r3, r3, r1
 800512c:	0052      	lsls	r2, r2, #1
 800512e:	1061      	asrs	r1, r4, #1
 8005130:	2400      	movs	r4, #0
 8005132:	9103      	str	r1, [sp, #12]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	0fd1      	lsrs	r1, r2, #31
 8005138:	185b      	adds	r3, r3, r1
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	2516      	movs	r5, #22
 800513e:	0020      	movs	r0, r4
 8005140:	0052      	lsls	r2, r2, #1
 8005142:	0389      	lsls	r1, r1, #14
 8005144:	1846      	adds	r6, r0, r1
 8005146:	429e      	cmp	r6, r3
 8005148:	dc02      	bgt.n	8005150 <__ieee754_sqrt+0x9c>
 800514a:	1870      	adds	r0, r6, r1
 800514c:	1b9b      	subs	r3, r3, r6
 800514e:	1864      	adds	r4, r4, r1
 8005150:	0fd6      	lsrs	r6, r2, #31
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	3d01      	subs	r5, #1
 8005156:	18f3      	adds	r3, r6, r3
 8005158:	0052      	lsls	r2, r2, #1
 800515a:	0849      	lsrs	r1, r1, #1
 800515c:	2d00      	cmp	r5, #0
 800515e:	d1f1      	bne.n	8005144 <__ieee754_sqrt+0x90>
 8005160:	2620      	movs	r6, #32
 8005162:	2780      	movs	r7, #128	; 0x80
 8005164:	0029      	movs	r1, r5
 8005166:	9601      	str	r6, [sp, #4]
 8005168:	063f      	lsls	r7, r7, #24
 800516a:	197e      	adds	r6, r7, r5
 800516c:	46b4      	mov	ip, r6
 800516e:	4283      	cmp	r3, r0
 8005170:	dc02      	bgt.n	8005178 <__ieee754_sqrt+0xc4>
 8005172:	d114      	bne.n	800519e <__ieee754_sqrt+0xea>
 8005174:	4296      	cmp	r6, r2
 8005176:	d812      	bhi.n	800519e <__ieee754_sqrt+0xea>
 8005178:	4665      	mov	r5, ip
 800517a:	4666      	mov	r6, ip
 800517c:	19ed      	adds	r5, r5, r7
 800517e:	9002      	str	r0, [sp, #8]
 8005180:	2e00      	cmp	r6, #0
 8005182:	da03      	bge.n	800518c <__ieee754_sqrt+0xd8>
 8005184:	43ee      	mvns	r6, r5
 8005186:	0ff6      	lsrs	r6, r6, #31
 8005188:	1986      	adds	r6, r0, r6
 800518a:	9602      	str	r6, [sp, #8]
 800518c:	1a1b      	subs	r3, r3, r0
 800518e:	4562      	cmp	r2, ip
 8005190:	4180      	sbcs	r0, r0
 8005192:	4240      	negs	r0, r0
 8005194:	1a1b      	subs	r3, r3, r0
 8005196:	4660      	mov	r0, ip
 8005198:	1a12      	subs	r2, r2, r0
 800519a:	9802      	ldr	r0, [sp, #8]
 800519c:	19c9      	adds	r1, r1, r7
 800519e:	0fd6      	lsrs	r6, r2, #31
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	199b      	adds	r3, r3, r6
 80051a4:	9e01      	ldr	r6, [sp, #4]
 80051a6:	0052      	lsls	r2, r2, #1
 80051a8:	3e01      	subs	r6, #1
 80051aa:	087f      	lsrs	r7, r7, #1
 80051ac:	9601      	str	r6, [sp, #4]
 80051ae:	2e00      	cmp	r6, #0
 80051b0:	d1db      	bne.n	800516a <__ieee754_sqrt+0xb6>
 80051b2:	4313      	orrs	r3, r2
 80051b4:	d003      	beq.n	80051be <__ieee754_sqrt+0x10a>
 80051b6:	1c4b      	adds	r3, r1, #1
 80051b8:	d127      	bne.n	800520a <__ieee754_sqrt+0x156>
 80051ba:	0031      	movs	r1, r6
 80051bc:	3401      	adds	r4, #1
 80051be:	4b17      	ldr	r3, [pc, #92]	; (800521c <__ieee754_sqrt+0x168>)
 80051c0:	1060      	asrs	r0, r4, #1
 80051c2:	18c0      	adds	r0, r0, r3
 80051c4:	0849      	lsrs	r1, r1, #1
 80051c6:	07e3      	lsls	r3, r4, #31
 80051c8:	d502      	bpl.n	80051d0 <__ieee754_sqrt+0x11c>
 80051ca:	2380      	movs	r3, #128	; 0x80
 80051cc:	061b      	lsls	r3, r3, #24
 80051ce:	4319      	orrs	r1, r3
 80051d0:	9b03      	ldr	r3, [sp, #12]
 80051d2:	000d      	movs	r5, r1
 80051d4:	051c      	lsls	r4, r3, #20
 80051d6:	1823      	adds	r3, r4, r0
 80051d8:	001c      	movs	r4, r3
 80051da:	e782      	b.n	80050e2 <__ieee754_sqrt+0x2e>
 80051dc:	0ad3      	lsrs	r3, r2, #11
 80051de:	3815      	subs	r0, #21
 80051e0:	0552      	lsls	r2, r2, #21
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0fa      	beq.n	80051dc <__ieee754_sqrt+0x128>
 80051e6:	2480      	movs	r4, #128	; 0x80
 80051e8:	0364      	lsls	r4, r4, #13
 80051ea:	4223      	tst	r3, r4
 80051ec:	d00a      	beq.n	8005204 <__ieee754_sqrt+0x150>
 80051ee:	2420      	movs	r4, #32
 80051f0:	0016      	movs	r6, r2
 80051f2:	1a64      	subs	r4, r4, r1
 80051f4:	40e6      	lsrs	r6, r4
 80051f6:	1e4d      	subs	r5, r1, #1
 80051f8:	408a      	lsls	r2, r1
 80051fa:	4333      	orrs	r3, r6
 80051fc:	1b41      	subs	r1, r0, r5
 80051fe:	e789      	b.n	8005114 <__ieee754_sqrt+0x60>
 8005200:	2000      	movs	r0, #0
 8005202:	e7ee      	b.n	80051e2 <__ieee754_sqrt+0x12e>
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	3101      	adds	r1, #1
 8005208:	e7ef      	b.n	80051ea <__ieee754_sqrt+0x136>
 800520a:	2301      	movs	r3, #1
 800520c:	3101      	adds	r1, #1
 800520e:	4399      	bics	r1, r3
 8005210:	e7d5      	b.n	80051be <__ieee754_sqrt+0x10a>
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	7ff00000 	.word	0x7ff00000
 8005218:	fffffc01 	.word	0xfffffc01
 800521c:	3fe00000 	.word	0x3fe00000

08005220 <__errno>:
 8005220:	4b01      	ldr	r3, [pc, #4]	; (8005228 <__errno+0x8>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	4770      	bx	lr
 8005226:	46c0      	nop			; (mov r8, r8)
 8005228:	20000008 	.word	0x20000008

0800522c <__libc_init_array>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	2600      	movs	r6, #0
 8005230:	4d0c      	ldr	r5, [pc, #48]	; (8005264 <__libc_init_array+0x38>)
 8005232:	4c0d      	ldr	r4, [pc, #52]	; (8005268 <__libc_init_array+0x3c>)
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	42a6      	cmp	r6, r4
 800523a:	d109      	bne.n	8005250 <__libc_init_array+0x24>
 800523c:	2600      	movs	r6, #0
 800523e:	f000 f821 	bl	8005284 <_init>
 8005242:	4d0a      	ldr	r5, [pc, #40]	; (800526c <__libc_init_array+0x40>)
 8005244:	4c0a      	ldr	r4, [pc, #40]	; (8005270 <__libc_init_array+0x44>)
 8005246:	1b64      	subs	r4, r4, r5
 8005248:	10a4      	asrs	r4, r4, #2
 800524a:	42a6      	cmp	r6, r4
 800524c:	d105      	bne.n	800525a <__libc_init_array+0x2e>
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	00b3      	lsls	r3, r6, #2
 8005252:	58eb      	ldr	r3, [r5, r3]
 8005254:	4798      	blx	r3
 8005256:	3601      	adds	r6, #1
 8005258:	e7ee      	b.n	8005238 <__libc_init_array+0xc>
 800525a:	00b3      	lsls	r3, r6, #2
 800525c:	58eb      	ldr	r3, [r5, r3]
 800525e:	4798      	blx	r3
 8005260:	3601      	adds	r6, #1
 8005262:	e7f2      	b.n	800524a <__libc_init_array+0x1e>
 8005264:	080053cc 	.word	0x080053cc
 8005268:	080053cc 	.word	0x080053cc
 800526c:	080053cc 	.word	0x080053cc
 8005270:	080053d0 	.word	0x080053d0

08005274 <memset>:
 8005274:	0003      	movs	r3, r0
 8005276:	1882      	adds	r2, r0, r2
 8005278:	4293      	cmp	r3, r2
 800527a:	d100      	bne.n	800527e <memset+0xa>
 800527c:	4770      	bx	lr
 800527e:	7019      	strb	r1, [r3, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	e7f9      	b.n	8005278 <memset+0x4>

08005284 <_init>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	46c0      	nop			; (mov r8, r8)
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr

08005290 <_fini>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr
